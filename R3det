{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5f86c556",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T04:29:38.704730Z",
     "iopub.status.busy": "2025-03-18T04:29:38.704487Z",
     "iopub.status.idle": "2025-03-18T04:29:43.234479Z",
     "shell.execute_reply": "2025-03-18T04:29:43.233386Z"
    },
    "papermill": {
     "duration": 4.535966,
     "end_time": "2025-03-18T04:29:43.236539",
     "exception": false,
     "start_time": "2025-03-18T04:29:38.700573",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nvcc: NVIDIA (R) Cuda compiler driver\r\n",
      "Copyright (c) 2005-2023 NVIDIA Corporation\r\n",
      "Built on Tue_Aug_15_22:02:13_PDT_2023\r\n",
      "Cuda compilation tools, release 12.2, V12.2.140\r\n",
      "Build cuda_12.2.r12.2/compiler.33191640_0\r\n",
      "PyTorch: 2.5.1+cu121 CUDA Available: True CUDA Version: 12.1\r\n"
     ]
    }
   ],
   "source": [
    "!nvcc --version\n",
    "!python -c \"import torch; print('PyTorch:', torch.__version__, 'CUDA Available:', torch.cuda.is_available(), 'CUDA Version:', torch.version.cuda)\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a04c05ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T04:29:43.246249Z",
     "iopub.status.busy": "2025-03-18T04:29:43.246017Z",
     "iopub.status.idle": "2025-03-18T04:30:34.846910Z",
     "shell.execute_reply": "2025-03-18T04:30:34.846047Z"
    },
    "papermill": {
     "duration": 51.606394,
     "end_time": "2025-03-18T04:30:34.848814",
     "exception": false,
     "start_time": "2025-03-18T04:29:43.242420",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33mWARNING: Skipping mmcv as it is not installed.\u001b[0m\u001b[33m\r\n",
      "\u001b[0m\u001b[33mWARNING: Skipping mmcv-full as it is not installed.\u001b[0m\u001b[33m\r\n",
      "\u001b[0m\u001b[33mWARNING: Skipping mmdet as it is not installed.\u001b[0m\u001b[33m\r\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "# Step 2: Uninstall Conflicting Packages\n",
    "!pip uninstall -y mmcv mmcv-full mmdet torch torchvision tensorflow tensorboard -q"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "997d39ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T04:30:34.856114Z",
     "iopub.status.busy": "2025-03-18T04:30:34.855887Z",
     "iopub.status.idle": "2025-03-18T04:32:45.532951Z",
     "shell.execute_reply": "2025-03-18T04:32:45.531840Z"
    },
    "papermill": {
     "duration": 130.682276,
     "end_time": "2025-03-18T04:32:45.534470",
     "exception": false,
     "start_time": "2025-03-18T04:30:34.852194",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 GB\u001b[0m \u001b[31m453.5 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.2/24.2 MB\u001b[0m \u001b[31m68.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "pytorch-lightning 2.5.0.post0 requires torch>=2.1.0, but you have torch 1.13.1+cu116 which is incompatible.\r\n",
      "torchaudio 2.5.1+cu121 requires torch==2.5.1, but you have torch 1.13.1+cu116 which is incompatible.\r\n",
      "torchmetrics 1.6.1 requires torch>=2.0.0, but you have torch 1.13.1+cu116 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m46.0/46.0 MB\u001b[0m \u001b[31m17.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m46.8/46.8 kB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m256.2/256.2 kB\u001b[0m \u001b[31m16.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.5/1.5 MB\u001b[0m \u001b[31m41.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m259.5/259.5 kB\u001b[0m \u001b[31m11.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m57.0/57.0 kB\u001b[0m \u001b[31m3.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m50.1/50.1 kB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m89.7/89.7 kB\u001b[0m \u001b[31m6.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m449.6/449.6 kB\u001b[0m \u001b[31m9.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m52.7/52.7 kB\u001b[0m \u001b[31m3.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m311.5/311.5 kB\u001b[0m \u001b[31m17.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.8/62.8 kB\u001b[0m \u001b[31m4.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m239.4/239.4 kB\u001b[0m \u001b[31m12.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m506.5/506.5 kB\u001b[0m \u001b[31m30.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m77.1/77.1 kB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m144.2/144.2 kB\u001b[0m \u001b[31m11.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m953.1/953.1 kB\u001b[0m \u001b[31m46.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m99.5/99.5 kB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Building wheel for oss2 (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Building wheel for aliyun-python-sdk-core (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Building wheel for crcmod (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "dopamine-rl 4.1.0 requires tensorflow>=2.2.0, which is not installed.\r\n",
      "tensorflow-decision-forests 1.10.0 requires tensorflow==2.17.0, which is not installed.\r\n",
      "datasets 3.3.1 requires requests>=2.32.2, but you have requests 2.28.2 which is incompatible.\r\n",
      "datasets 3.3.1 requires tqdm>=4.66.3, but you have tqdm 4.65.2 which is incompatible.\r\n",
      "featuretools 1.31.0 requires tqdm>=4.66.3, but you have tqdm 4.65.2 which is incompatible.\r\n",
      "gcsfs 2024.10.0 requires fsspec==2024.10.0, but you have fsspec 2024.12.0 which is incompatible.\r\n",
      "google-cloud-bigtable 2.27.0 requires google-api-core[grpc]<3.0.0dev,>=2.16.0, but you have google-api-core 1.34.1 which is incompatible.\r\n",
      "google-colab 1.0.0 requires notebook==6.5.5, but you have notebook 6.5.4 which is incompatible.\r\n",
      "google-colab 1.0.0 requires pandas==2.2.2, but you have pandas 2.2.3 which is incompatible.\r\n",
      "google-colab 1.0.0 requires requests==2.32.3, but you have requests 2.28.2 which is incompatible.\r\n",
      "jupyterlab-server 2.27.3 requires requests>=2.31, but you have requests 2.28.2 which is incompatible.\r\n",
      "langchain 0.3.12 requires async-timeout<5.0.0,>=4.0.0; python_version < \"3.11\", but you have async-timeout 5.0.1 which is incompatible.\r\n",
      "pandas-gbq 0.25.0 requires google-api-core<3.0.0dev,>=2.10.2, but you have google-api-core 1.34.1 which is incompatible.\r\n",
      "plotnine 0.14.4 requires matplotlib>=3.8.0, but you have matplotlib 3.7.5 which is incompatible.\r\n",
      "pymc 5.19.1 requires rich>=13.7.1, but you have rich 13.4.2 which is incompatible.\r\n",
      "pytensor 2.26.4 requires filelock>=3.15, but you have filelock 3.14.0 which is incompatible.\r\n",
      "pytorch-lightning 2.5.0.post0 requires torch>=2.1.0, but you have torch 1.13.1+cu116 which is incompatible.\r\n",
      "sphinx 8.1.3 requires requests>=2.30.0, but you have requests 2.28.2 which is incompatible.\r\n",
      "torchmetrics 1.6.1 requires torch>=2.0.0, but you have torch 1.13.1+cu116 which is incompatible.\r\n",
      "yfinance 0.2.50 requires requests>=2.31, but you have requests 2.28.2 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m452.7/452.7 kB\u001b[0m \u001b[31m18.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install torch==1.13.1+cu116 torchvision==0.14.1+cu116 -f https://download.pytorch.org/whl/torch_stable.html -q\n",
    "!pip install mmcv-full==1.7.1 -f https://download.openmmlab.com/mmcv/dist/cu116/torch1.13.0/index.html -q\n",
    "!pip install mmdet==2.28.2 -q\n",
    "!pip install -U openmim -q\n",
    "!mim install \"mmengine>=0.7.0\" -q\n",
    "!pip install xmltodict -q  # For dataset conversion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fac53aa0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T04:32:45.606208Z",
     "iopub.status.busy": "2025-03-18T04:32:45.605961Z",
     "iopub.status.idle": "2025-03-18T04:32:47.105884Z",
     "shell.execute_reply": "2025-03-18T04:32:47.104792Z"
    },
    "papermill": {
     "duration": 1.537142,
     "end_time": "2025-03-18T04:32:47.107466",
     "exception": false,
     "start_time": "2025-03-18T04:32:45.570324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nvcc: NVIDIA (R) Cuda compiler driver\r\n",
      "Copyright (c) 2005-2023 NVIDIA Corporation\r\n",
      "Built on Tue_Aug_15_22:02:13_PDT_2023\r\n",
      "Cuda compilation tools, release 12.2, V12.2.140\r\n",
      "Build cuda_12.2.r12.2/compiler.33191640_0\r\n",
      "PyTorch: 1.13.1+cu116 CUDA Available: True CUDA Version: 11.6\r\n"
     ]
    }
   ],
   "source": [
    "!nvcc --version\n",
    "!python -c \"import torch; print('PyTorch:', torch.__version__, 'CUDA Available:', torch.cuda.is_available(), 'CUDA Version:', torch.version.cuda)\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0cf10cc4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T04:32:47.178862Z",
     "iopub.status.busy": "2025-03-18T04:32:47.178567Z",
     "iopub.status.idle": "2025-03-18T04:33:00.140217Z",
     "shell.execute_reply": "2025-03-18T04:33:00.139166Z"
    },
    "papermill": {
     "duration": 12.998893,
     "end_time": "2025-03-18T04:33:00.141832",
     "exception": false,
     "start_time": "2025-03-18T04:32:47.142939",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cloning into '/kaggle/working/mmrotate'...\r\n",
      "remote: Enumerating objects: 3897, done.\u001b[K\r\n",
      "remote: Counting objects: 100% (1261/1261), done.\u001b[K\r\n",
      "remote: Compressing objects: 100% (384/384), done.\u001b[K\r\n",
      "remote: Total 3897 (delta 983), reused 877 (delta 877), pack-reused 2636 (from 2)\u001b[K\r\n",
      "Receiving objects: 100% (3897/3897), 25.33 MiB | 20.70 MiB/s, done.\r\n",
      "Resolving deltas: 100% (2382/2382), done.\r\n",
      "/kaggle/working/mmrotate\n",
      "Obtaining file:///kaggle/working/mmrotate\r\n",
      "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "Collecting e2cnn (from mmrotate==0.3.4)\r\n",
      "  Downloading e2cnn-0.2.3-py3-none-any.whl.metadata (15 kB)\r\n",
      "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (3.7.5)\r\n",
      "Requirement already satisfied: mmcv-full in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (1.7.1)\r\n",
      "Requirement already satisfied: mmdet<3.0.0,>=2.25.1 in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (2.28.2)\r\n",
      "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (1.26.4)\r\n",
      "Requirement already satisfied: pycocotools in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (2.0.8)\r\n",
      "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (1.17.0)\r\n",
      "Requirement already satisfied: terminaltables in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (3.1.10)\r\n",
      "Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (1.13.1+cu116)\r\n",
      "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from mmdet<3.0.0,>=2.25.1->mmrotate==0.3.4) (1.13.1)\r\n",
      "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from e2cnn->mmrotate==0.3.4) (1.13.1)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (1.3.1)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (4.55.3)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (1.4.7)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (24.2)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (11.0.0)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (3.2.0)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (2.9.0.post0)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy->mmrotate==0.3.4) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy->mmrotate==0.3.4) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy->mmrotate==0.3.4) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy->mmrotate==0.3.4) (2025.0.1)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy->mmrotate==0.3.4) (2022.0.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy->mmrotate==0.3.4) (2.4.1)\r\n",
      "Requirement already satisfied: addict in /usr/local/lib/python3.10/dist-packages (from mmcv-full->mmrotate==0.3.4) (2.4.0)\r\n",
      "Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from mmcv-full->mmrotate==0.3.4) (6.0.2)\r\n",
      "Requirement already satisfied: yapf in /usr/local/lib/python3.10/dist-packages (from mmcv-full->mmrotate==0.3.4) (0.43.0)\r\n",
      "Requirement already satisfied: opencv-python>=3 in /usr/local/lib/python3.10/dist-packages (from mmcv-full->mmrotate==0.3.4) (4.10.0.84)\r\n",
      "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from torch->mmrotate==0.3.4) (4.12.2)\r\n",
      "Requirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy->mmrotate==0.3.4) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy->mmrotate==0.3.4) (2022.0.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy->mmrotate==0.3.4) (1.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy->mmrotate==0.3.4) (2024.2.0)\r\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->e2cnn->mmrotate==0.3.4) (1.3.0)\r\n",
      "Requirement already satisfied: platformdirs>=3.5.1 in /usr/local/lib/python3.10/dist-packages (from yapf->mmcv-full->mmrotate==0.3.4) (4.3.6)\r\n",
      "Requirement already satisfied: tomli>=2.0.1 in /usr/local/lib/python3.10/dist-packages (from yapf->mmcv-full->mmrotate==0.3.4) (2.2.1)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy->mmrotate==0.3.4) (2024.2.0)\r\n",
      "Downloading e2cnn-0.2.3-py3-none-any.whl (225 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m225.3/225.3 kB\u001b[0m \u001b[31m10.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: e2cnn, mmrotate\r\n",
      "  Running setup.py develop for mmrotate\r\n",
      "Successfully installed e2cnn-0.2.3 mmrotate-0.3.4\r\n"
     ]
    }
   ],
   "source": [
    "# Step 4: Clone and Install MMRotate 0.3.4\n",
    "!git clone https://github.com/open-mmlab/mmrotate.git /kaggle/working/mmrotate\n",
    "%cd /kaggle/working/mmrotate\n",
    "# !git checkout v0.3.4  # Ensure exact version\n",
    "!pip install -r requirements/build.txt -q\n",
    "!pip install -v -e . -q"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e34a3922",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T04:33:00.220154Z",
     "iopub.status.busy": "2025-03-18T04:33:00.219899Z",
     "iopub.status.idle": "2025-03-18T04:33:01.550676Z",
     "shell.execute_reply": "2025-03-18T04:33:01.549785Z"
    },
    "papermill": {
     "duration": 1.3726,
     "end_time": "2025-03-18T04:33:01.552379",
     "exception": false,
     "start_time": "2025-03-18T04:33:00.179779",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mmcv-full                          1.7.1\r\n",
      "mmdet                              2.28.2\r\n",
      "mmengine                           0.10.7\r\n",
      "mmrotate                           0.3.4                /kaggle/working/mmrotate\r\n",
      "pytorch-ignite                     0.5.1\r\n",
      "pytorch-lightning                  2.5.0.post0\r\n",
      "torch                              1.13.1+cu116\r\n",
      "torchaudio                         2.5.1+cu121\r\n",
      "torchinfo                          1.8.0\r\n",
      "torchmetrics                       1.6.1\r\n",
      "torchsummary                       1.5.1\r\n",
      "torchtune                          0.5.0\r\n",
      "torchvision                        0.14.1+cu116\r\n"
     ]
    }
   ],
   "source": [
    "# Step 5: Verify Installations\n",
    "!pip list | grep -E 'torch|mmcv|mmdet|mmengine|mmrotate'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c933ef3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T04:33:01.628435Z",
     "iopub.status.busy": "2025-03-18T04:33:01.628178Z",
     "iopub.status.idle": "2025-03-18T04:33:01.643089Z",
     "shell.execute_reply": "2025-03-18T04:33:01.642232Z"
    },
    "papermill": {
     "duration": 0.053715,
     "end_time": "2025-03-18T04:33:01.644455",
     "exception": false,
     "start_time": "2025-03-18T04:33:01.590740",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Step 6: Prepare Dataset (SCCOS to DOTA format)\n",
    "import os\n",
    "import shutil\n",
    "import random\n",
    "import xmltodict\n",
    "import tqdm\n",
    "import math\n",
    "\n",
    "dataset_path = \"/kaggle/input/sccos-dataset/\"\n",
    "working_dir = \"/kaggle/working/sccos_dota\"\n",
    "train_images_dir = os.path.join(working_dir, \"train/images\")\n",
    "train_labels_dir = os.path.join(working_dir, \"train/labels\")\n",
    "val_images_dir = os.path.join(working_dir, \"val/images\")\n",
    "val_labels_dir = os.path.join(working_dir, \"val/labels\")\n",
    "test_images_dir = os.path.join(working_dir, \"test/images\")\n",
    "test_labels_dir = os.path.join(working_dir, \"test/labels\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3946f1ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T04:33:01.720411Z",
     "iopub.status.busy": "2025-03-18T04:33:01.720158Z",
     "iopub.status.idle": "2025-03-18T04:35:11.831103Z",
     "shell.execute_reply": "2025-03-18T04:35:11.830130Z"
    },
    "papermill": {
     "duration": 130.151167,
     "end_time": "2025-03-18T04:35:11.832809",
     "exception": false,
     "start_time": "2025-03-18T04:33:01.681642",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset split: Train=3711, Val=464, Test=464\n",
      "Converting train set to DOTA format...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 3711/3711 [00:01<00:00, 2100.72it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Converting val set to DOTA format...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 464/464 [00:00<00:00, 2069.17it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Converting test set to DOTA format...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 464/464 [00:00<00:00, 2342.11it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset conversion to DOTA format complete.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# Clean and recreate directories\n",
    "if os.path.exists(working_dir):\n",
    "    shutil.rmtree(working_dir)\n",
    "for dir_path in [train_images_dir, train_labels_dir, val_images_dir, val_labels_dir, test_images_dir, test_labels_dir]:\n",
    "    os.makedirs(dir_path, exist_ok=True)\n",
    "\n",
    "# Source paths\n",
    "train_img_dir = os.path.join(dataset_path, \"train/images\")\n",
    "train_ann_dir = os.path.join(dataset_path, \"train/annotations\")\n",
    "test_img_dir = os.path.join(dataset_path, \"test/images\")\n",
    "test_ann_dir = os.path.join(dataset_path, \"test/annotations\")\n",
    "\n",
    "# Get all files and split\n",
    "train_files = [f for f in os.listdir(train_img_dir) if f.endswith('.png')]\n",
    "test_files = [f for f in os.listdir(test_img_dir) if f.endswith('.png')]\n",
    "random.seed(42)\n",
    "random.shuffle(train_files)\n",
    "random.shuffle(test_files)\n",
    "test_size = len(test_files)\n",
    "val_size = test_size // 2\n",
    "val_files = test_files[:val_size]\n",
    "test_files = test_files[val_size:]\n",
    "\n",
    "# Copy files\n",
    "def copy_files(file_list, src_img_dir, src_ann_dir, dst_img_dir, dst_ann_dir):\n",
    "    for img_file in file_list:\n",
    "        shutil.copy(os.path.join(src_img_dir, img_file), os.path.join(dst_img_dir, img_file))\n",
    "        ann_file = img_file.replace('.png', '.xml')\n",
    "        if os.path.exists(os.path.join(src_ann_dir, ann_file)):\n",
    "            shutil.copy(os.path.join(src_ann_dir, ann_file), os.path.join(dst_ann_dir, ann_file))\n",
    "\n",
    "copy_files(train_files, train_img_dir, train_ann_dir, train_images_dir, train_labels_dir)\n",
    "copy_files(val_files, test_img_dir, test_ann_dir, val_images_dir, val_labels_dir)\n",
    "copy_files(test_files, test_img_dir, test_ann_dir, test_images_dir, test_labels_dir)\n",
    "print(f\"Dataset split: Train={len(train_files)}, Val={len(val_files)}, Test={len(test_files)}\")\n",
    "\n",
    "# Convert XML to DOTA format\n",
    "def convert_robndbox_to_corners(cx, cy, w, h, angle):\n",
    "    angle = float(angle)\n",
    "    cx, cy, w, h = float(cx), float(cy), float(w), float(h)\n",
    "    cos_a = math.cos(angle)\n",
    "    sin_a = math.sin(angle)\n",
    "    dx, dy = w / 2, h / 2\n",
    "    corners = [(-dx, -dy), (dx, -dy), (dx, dy), (-dx, dy)]\n",
    "    rotated_corners = [(cx + x * cos_a - y * sin_a, cy + x * sin_a + y * cos_a) for x, y in corners]\n",
    "    return rotated_corners\n",
    "\n",
    "def convert_xml_to_dota(xml_path, output_label_dir):\n",
    "    with open(xml_path, 'r') as f:\n",
    "        xml_data = xmltodict.parse(f.read())\n",
    "    objects = xml_data['annotation'].get('object', [])\n",
    "    if not isinstance(objects, list):\n",
    "        objects = [objects] if objects else []\n",
    "    txt_lines = []\n",
    "    for obj in objects:\n",
    "        if obj and 'robndbox' in obj:\n",
    "            robndbox = obj['robndbox']\n",
    "            try:\n",
    "                cx, cy, w, h, angle = robndbox['cx'], robndbox['cy'], robndbox['w'], robndbox['h'], robndbox['angle']\n",
    "                (x1, y1), (x2, y2), (x3, y3), (x4, y4) = convert_robndbox_to_corners(cx, cy, w, h, angle)\n",
    "                class_name = \"ship\"\n",
    "                difficulty = 0\n",
    "                txt_lines.append(f\"{x1:.2f} {y1:.2f} {x2:.2f} {y2:.2f} {x3:.2f} {y3:.2f} {x4:.2f} {y4:.2f} {class_name} {difficulty}\")\n",
    "            except (KeyError, ValueError) as e:\n",
    "                print(f\"Invalid robndbox data in {xml_path}: {e}\")\n",
    "                continue\n",
    "    txt_filename = os.path.splitext(os.path.basename(xml_path))[0] + \".txt\"\n",
    "    txt_path = os.path.join(output_label_dir, txt_filename)\n",
    "    if txt_lines:\n",
    "        with open(txt_path, 'w') as f:\n",
    "            f.write(\"\\n\".join(txt_lines))\n",
    "    os.remove(xml_path)\n",
    "\n",
    "for split, label_dir in [(\"train\", train_labels_dir), (\"val\", val_labels_dir), (\"test\", test_labels_dir)]:\n",
    "    print(f\"Converting {split} set to DOTA format...\")\n",
    "    for xml_file in tqdm.tqdm(os.listdir(label_dir)):\n",
    "        if xml_file.endswith(\".xml\"):\n",
    "            convert_xml_to_dota(os.path.join(label_dir, xml_file), label_dir)\n",
    "print(\"Dataset conversion to DOTA format complete.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "10cfa82a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T04:35:11.910185Z",
     "iopub.status.busy": "2025-03-18T04:35:11.909938Z",
     "iopub.status.idle": "2025-03-18T04:36:55.808590Z",
     "shell.execute_reply": "2025-03-18T04:36:55.807688Z"
    },
    "papermill": {
     "duration": 103.976995,
     "end_time": "2025-03-18T04:36:55.848452",
     "exception": false,
     "start_time": "2025-03-18T04:35:11.871457",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m190.2/190.2 kB\u001b[0m \u001b[31m8.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validating training images...\n",
      "Empty file detected: /kaggle/working/sccos_dota/train/images/2284.png\n",
      "Removed bad image: /kaggle/working/sccos_dota/train/images/2284.png\n",
      "Removed corresponding label: /kaggle/working/sccos_dota/train/labels/2284.txt\n",
      "Found and handled 1 bad files.\n"
     ]
    }
   ],
   "source": [
    "# NEW: Fix YAPF compatibility issue\n",
    "!pip install yapf==0.32.0 -q  # Pin to a version compatible with MMCV 1.7.1\n",
    "\n",
    "# NEW: Validate training images\n",
    "import os\n",
    "import cv2\n",
    "import mmcv\n",
    "\n",
    "def validate_images(image_dir, label_dir):\n",
    "    bad_files = []\n",
    "    for img_file in os.listdir(image_dir):\n",
    "        if not img_file.endswith('.png'):\n",
    "            continue\n",
    "        img_path = os.path.join(image_dir, img_file)\n",
    "        # Check if file is empty\n",
    "        if os.path.getsize(img_path) == 0:\n",
    "            bad_files.append(img_file)\n",
    "            print(f\"Empty file detected: {img_path}\")\n",
    "            continue\n",
    "        # Try loading with mmcv (mimics pipeline behavior)\n",
    "        try:\n",
    "            img = mmcv.imread(img_path)\n",
    "            if img is None:\n",
    "                raise ValueError(\"Image loaded as None\")\n",
    "        except Exception as e:\n",
    "            bad_files.append(img_file)\n",
    "            print(f\"Corrupt or unreadable file: {img_path} - Error: {e}\")\n",
    "    \n",
    "    # Remove bad files and their labels\n",
    "    for bad_file in bad_files:\n",
    "        img_path = os.path.join(image_dir, bad_file)\n",
    "        label_file = bad_file.replace('.png', '.txt')\n",
    "        label_path = os.path.join(label_dir, label_file)\n",
    "        if os.path.exists(img_path):\n",
    "            os.remove(img_path)\n",
    "            print(f\"Removed bad image: {img_path}\")\n",
    "        if os.path.exists(label_path):\n",
    "            os.remove(label_path)\n",
    "            print(f\"Removed corresponding label: {label_path}\")\n",
    "    \n",
    "    if bad_files:\n",
    "        print(f\"Found and handled {len(bad_files)} bad files.\")\n",
    "    else:\n",
    "        print(\"All images validated successfully.\")\n",
    "\n",
    "# Validate training set\n",
    "train_images_dir = \"/kaggle/working/sccos_dota/train/images\"\n",
    "train_labels_dir = \"/kaggle/working/sccos_dota/train/labels\"\n",
    "print(\"Validating training images...\")\n",
    "validate_images(train_images_dir, train_labels_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "982cf139",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T04:36:55.926300Z",
     "iopub.status.busy": "2025-03-18T04:36:55.925839Z",
     "iopub.status.idle": "2025-03-18T04:36:55.932546Z",
     "shell.execute_reply": "2025-03-18T04:36:55.931687Z"
    },
    "papermill": {
     "duration": 0.046637,
     "end_time": "2025-03-18T04:36:55.933844",
     "exception": false,
     "start_time": "2025-03-18T04:36:55.887207",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "R3Det configuration saved to /kaggle/working/mmrotate/configs/r3det/r3det_r50_fpn_1x_sccos.py\n"
     ]
    }
   ],
   "source": [
    "# Step 7: Create Config File for R3Det\n",
    "config_content = \"\"\"\n",
    "_base_ = [\n",
    "    '../_base_/datasets/dotav1.py', '../_base_/schedules/schedule_1x.py',\n",
    "    '../_base_/default_runtime.py'\n",
    "]\n",
    "\n",
    "angle_version = 'oc'  # Match original config\n",
    "dataset_type = 'DOTADataset'\n",
    "data_root = '/kaggle/working/sccos_dota/'\n",
    "classes = ('ship',)  # Single class\n",
    "img_norm_cfg = dict(mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\n",
    "\n",
    "train_pipeline = [\n",
    "    dict(type='LoadImageFromFile'),\n",
    "    dict(type='LoadAnnotations', with_bbox=True),\n",
    "    dict(type='RResize', img_scale=(1024, 1024)),\n",
    "    dict(\n",
    "        type='RRandomFlip',\n",
    "        flip_ratio=[0.25, 0.25, 0.25],\n",
    "        direction=['horizontal', 'vertical', 'diagonal'],\n",
    "        version=angle_version),\n",
    "    dict(type='Normalize', **img_norm_cfg),\n",
    "    dict(type='Pad', size_divisor=32),\n",
    "    dict(type='DefaultFormatBundle'),\n",
    "    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n",
    "]\n",
    "test_pipeline = [\n",
    "    dict(type='LoadImageFromFile'),\n",
    "    dict(type='MultiScaleFlipAug', img_scale=(1024, 1024), flip=False,\n",
    "         transforms=[\n",
    "             dict(type='RResize'),\n",
    "             dict(type='Normalize', **img_norm_cfg),\n",
    "             dict(type='Pad', size_divisor=32),\n",
    "             dict(type='DefaultFormatBundle'),\n",
    "             dict(type='Collect', keys=['img'])\n",
    "         ])\n",
    "]\n",
    "\n",
    "data = dict(\n",
    "    samples_per_gpu=4,\n",
    "    workers_per_gpu=1,\n",
    "    train=dict(\n",
    "        type=dataset_type,\n",
    "        ann_file=data_root + 'train/labels/',\n",
    "        img_prefix=data_root + 'train/images/',\n",
    "        pipeline=train_pipeline,\n",
    "        classes=classes,\n",
    "        version=angle_version),\n",
    "    val=dict(\n",
    "        type=dataset_type,\n",
    "        ann_file=data_root + 'val/labels/',\n",
    "        img_prefix=data_root + 'val/images/',\n",
    "        pipeline=test_pipeline,\n",
    "        classes=classes,\n",
    "        version=angle_version),\n",
    "    test=dict(\n",
    "        type=dataset_type,\n",
    "        ann_file=data_root + 'test/labels/',\n",
    "        img_prefix=data_root + 'test/images/',\n",
    "        pipeline=test_pipeline,\n",
    "        classes=classes,\n",
    "        version=angle_version))\n",
    "\n",
    "evaluation = dict(interval=1, metric='mAP')\n",
    "optimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0001)\n",
    "optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\n",
    "lr_config = dict(\n",
    "    policy='step',\n",
    "    warmup='linear',\n",
    "    warmup_iters=200,\n",
    "    warmup_ratio=1.0 / 3,\n",
    "    step=[8, 11])\n",
    "runner = dict(type='EpochBasedRunner', max_epochs=10)\n",
    "checkpoint_config = dict(interval=1)\n",
    "log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\n",
    "\n",
    "model = dict(\n",
    "    type='R3Det',\n",
    "    backbone=dict(\n",
    "        type='ResNet',\n",
    "        depth=50,\n",
    "        num_stages=4,\n",
    "        out_indices=(0, 1, 2, 3),\n",
    "        frozen_stages=1,\n",
    "        zero_init_residual=False,\n",
    "        norm_cfg=dict(type='BN', requires_grad=True),\n",
    "        norm_eval=True,\n",
    "        style='pytorch',\n",
    "        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n",
    "    neck=dict(\n",
    "        type='FPN',\n",
    "        in_channels=[256, 512, 1024, 2048],\n",
    "        out_channels=256,\n",
    "        start_level=1,\n",
    "        add_extra_convs='on_input',\n",
    "        num_outs=5),\n",
    "    bbox_head=dict(\n",
    "        type='RotatedRetinaHead',\n",
    "        num_classes=1,  # Single class: ship\n",
    "        in_channels=256,\n",
    "        stacked_convs=2,\n",
    "        feat_channels=256,\n",
    "        anchor_generator=dict(\n",
    "            type='RotatedAnchorGenerator',\n",
    "            octave_base_scale=4,\n",
    "            scales_per_octave=3,\n",
    "            ratios=[1.0, 0.5, 2.0],\n",
    "            strides=[8, 16, 32, 64, 128]),\n",
    "        bbox_coder=dict(\n",
    "            type='DeltaXYWHAOBBoxCoder',\n",
    "            angle_range=angle_version,\n",
    "            norm_factor=None,\n",
    "            edge_swap=False,\n",
    "            proj_xy=False,\n",
    "            target_means=[0.0, 0.0, 0.0, 0.0, 0.0],\n",
    "            target_stds=[1.0, 1.0, 1.0, 1.0, 1.0]),\n",
    "        loss_cls=dict(\n",
    "            type='FocalLoss',\n",
    "            use_sigmoid=True,\n",
    "            gamma=2.0,\n",
    "            alpha=0.25,\n",
    "            loss_weight=1.0),\n",
    "        loss_bbox=dict(type='SmoothL1Loss', beta=0.11, loss_weight=1.0)),\n",
    "    frm_cfgs=[dict(in_channels=256, featmap_strides=[8, 16, 32, 64, 128])],\n",
    "    num_refine_stages=1,\n",
    "    refine_heads=[\n",
    "        dict(\n",
    "            type='RotatedRetinaRefineHead',\n",
    "            num_classes=1,  # Single class: ship\n",
    "            in_channels=256,\n",
    "            stacked_convs=2,\n",
    "            feat_channels=256,\n",
    "            assign_by_circumhbbox=None,\n",
    "            anchor_generator=dict(\n",
    "                type='PseudoAnchorGenerator', strides=[8, 16, 32, 64, 128]),\n",
    "            bbox_coder=dict(\n",
    "                type='DeltaXYWHAOBBoxCoder',\n",
    "                angle_range=angle_version,\n",
    "                norm_factor=None,\n",
    "                edge_swap=False,\n",
    "                proj_xy=False,\n",
    "                target_means=[0.0, 0.0, 0.0, 0.0, 0.0],\n",
    "                target_stds=[1.0, 1.0, 1.0, 1.0, 1.0]),\n",
    "            loss_cls=dict(\n",
    "                type='FocalLoss',\n",
    "                use_sigmoid=True,\n",
    "                gamma=2.0,\n",
    "                alpha=0.25,\n",
    "                loss_weight=1.0),\n",
    "            loss_bbox=dict(type='SmoothL1Loss', beta=0.11, loss_weight=1.0))\n",
    "    ],\n",
    "    train_cfg=dict(\n",
    "        s0=dict(\n",
    "            assigner=dict(\n",
    "                type='MaxIoUAssigner',\n",
    "                pos_iou_thr=0.5,\n",
    "                neg_iou_thr=0.4,\n",
    "                min_pos_iou=0,\n",
    "                ignore_iof_thr=-1,\n",
    "                iou_calculator=dict(type='RBboxOverlaps2D')),\n",
    "            allowed_border=-1,\n",
    "            pos_weight=-1,\n",
    "            debug=False),\n",
    "        sr=[\n",
    "            dict(\n",
    "                assigner=dict(\n",
    "                    type='MaxIoUAssigner',\n",
    "                    pos_iou_thr=0.6,\n",
    "                    neg_iou_thr=0.5,\n",
    "                    min_pos_iou=0,\n",
    "                    ignore_iof_thr=-1,\n",
    "                    iou_calculator=dict(type='RBboxOverlaps2D')),\n",
    "                allowed_border=-1,\n",
    "                pos_weight=-1,\n",
    "                debug=False)\n",
    "        ],\n",
    "        stage_loss_weights=[1.0]),\n",
    "    test_cfg=dict(\n",
    "        nms_pre=2000,\n",
    "        min_bbox_size=0,\n",
    "        score_thr=0.05,\n",
    "        nms=dict(iou_thr=0.1),\n",
    "        max_per_img=2000))\n",
    "\"\"\"\n",
    "config_path = \"/kaggle/working/mmrotate/configs/r3det/r3det_r50_fpn_1x_sccos.py\"\n",
    "with open(config_path, 'w') as f:\n",
    "    f.write(config_content)\n",
    "print(f\"R3Det configuration saved to {config_path}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6568aabe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T04:36:56.012541Z",
     "iopub.status.busy": "2025-03-18T04:36:56.012274Z",
     "iopub.status.idle": "2025-03-18T06:31:43.767869Z",
     "shell.execute_reply": "2025-03-18T06:31:43.766623Z"
    },
    "papermill": {
     "duration": 6887.797126,
     "end_time": "2025-03-18T06:31:43.769465",
     "exception": false,
     "start_time": "2025-03-18T04:36:55.972339",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/working/mmrotate\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 04:37:03,934 - mmrotate - INFO - Environment info:\r\n",
      "------------------------------------------------------------\r\n",
      "sys.platform: linux\r\n",
      "Python: 3.10.12 (main, Nov  6 2024, 20:22:13) [GCC 11.4.0]\r\n",
      "CUDA available: True\r\n",
      "GPU 0: Tesla P100-PCIE-16GB\r\n",
      "CUDA_HOME: /usr/local/cuda\r\n",
      "NVCC: Cuda compilation tools, release 12.2, V12.2.140\r\n",
      "GCC: x86_64-linux-gnu-gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\r\n",
      "PyTorch: 1.13.1+cu116\r\n",
      "PyTorch compiling details: PyTorch built with:\r\n",
      "  - GCC 9.3\r\n",
      "  - C++ Version: 201402\r\n",
      "  - Intel(R) oneAPI Math Kernel Library Version 2025.0.1-Product Build 20241031 for Intel(R) 64 architecture applications\r\n",
      "  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\r\n",
      "  - OpenMP 201511 (a.k.a. OpenMP 4.5)\r\n",
      "  - LAPACK is enabled (usually provided by MKL)\r\n",
      "  - NNPACK is enabled\r\n",
      "  - CPU capability usage: AVX2\r\n",
      "  - CUDA Runtime 11.6\r\n",
      "  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\r\n",
      "  - CuDNN 8.3.2  (built against CUDA 11.5)\r\n",
      "  - Magma 2.6.1\r\n",
      "  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \r\n",
      "\r\n",
      "TorchVision: 0.14.1+cu116\r\n",
      "OpenCV: 4.10.0\r\n",
      "MMCV: 1.7.1\r\n",
      "MMCV Compiler: GCC 9.3\r\n",
      "MMCV CUDA Compiler: 11.6\r\n",
      "MMRotate: 0.3.4+b030f38\r\n",
      "------------------------------------------------------------\r\n",
      "\r\n",
      "2025-03-18 04:37:04,176 - mmrotate - INFO - Distributed training: False\r\n",
      "2025-03-18 04:37:04,548 - mmrotate - INFO - Config:\r\n",
      "dataset_type = 'DOTADataset'\r\n",
      "data_root = '/kaggle/working/sccos_dota/'\r\n",
      "img_norm_cfg = dict(\r\n",
      "    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\r\n",
      "train_pipeline = [\r\n",
      "    dict(type='LoadImageFromFile'),\r\n",
      "    dict(type='LoadAnnotations', with_bbox=True),\r\n",
      "    dict(type='RResize', img_scale=(1024, 1024)),\r\n",
      "    dict(\r\n",
      "        type='RRandomFlip',\r\n",
      "        flip_ratio=[0.25, 0.25, 0.25],\r\n",
      "        direction=['horizontal', 'vertical', 'diagonal'],\r\n",
      "        version='oc'),\r\n",
      "    dict(\r\n",
      "        type='Normalize',\r\n",
      "        mean=[123.675, 116.28, 103.53],\r\n",
      "        std=[58.395, 57.12, 57.375],\r\n",
      "        to_rgb=True),\r\n",
      "    dict(type='Pad', size_divisor=32),\r\n",
      "    dict(type='DefaultFormatBundle'),\r\n",
      "    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\r\n",
      "]\r\n",
      "test_pipeline = [\r\n",
      "    dict(type='LoadImageFromFile'),\r\n",
      "    dict(\r\n",
      "        type='MultiScaleFlipAug',\r\n",
      "        img_scale=(1024, 1024),\r\n",
      "        flip=False,\r\n",
      "        transforms=[\r\n",
      "            dict(type='RResize'),\r\n",
      "            dict(\r\n",
      "                type='Normalize',\r\n",
      "                mean=[123.675, 116.28, 103.53],\r\n",
      "                std=[58.395, 57.12, 57.375],\r\n",
      "                to_rgb=True),\r\n",
      "            dict(type='Pad', size_divisor=32),\r\n",
      "            dict(type='DefaultFormatBundle'),\r\n",
      "            dict(type='Collect', keys=['img'])\r\n",
      "        ])\r\n",
      "]\r\n",
      "data = dict(\r\n",
      "    samples_per_gpu=4,\r\n",
      "    workers_per_gpu=1,\r\n",
      "    train=dict(\r\n",
      "        type='DOTADataset',\r\n",
      "        ann_file='/kaggle/working/sccos_dota/train/labels/',\r\n",
      "        img_prefix='/kaggle/working/sccos_dota/train/images/',\r\n",
      "        pipeline=[\r\n",
      "            dict(type='LoadImageFromFile'),\r\n",
      "            dict(type='LoadAnnotations', with_bbox=True),\r\n",
      "            dict(type='RResize', img_scale=(1024, 1024)),\r\n",
      "            dict(\r\n",
      "                type='RRandomFlip',\r\n",
      "                flip_ratio=[0.25, 0.25, 0.25],\r\n",
      "                direction=['horizontal', 'vertical', 'diagonal'],\r\n",
      "                version='oc'),\r\n",
      "            dict(\r\n",
      "                type='Normalize',\r\n",
      "                mean=[123.675, 116.28, 103.53],\r\n",
      "                std=[58.395, 57.12, 57.375],\r\n",
      "                to_rgb=True),\r\n",
      "            dict(type='Pad', size_divisor=32),\r\n",
      "            dict(type='DefaultFormatBundle'),\r\n",
      "            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\r\n",
      "        ],\r\n",
      "        classes=('ship', ),\r\n",
      "        version='oc'),\r\n",
      "    val=dict(\r\n",
      "        type='DOTADataset',\r\n",
      "        ann_file='/kaggle/working/sccos_dota/val/labels/',\r\n",
      "        img_prefix='/kaggle/working/sccos_dota/val/images/',\r\n",
      "        pipeline=[\r\n",
      "            dict(type='LoadImageFromFile'),\r\n",
      "            dict(\r\n",
      "                type='MultiScaleFlipAug',\r\n",
      "                img_scale=(1024, 1024),\r\n",
      "                flip=False,\r\n",
      "                transforms=[\r\n",
      "                    dict(type='RResize'),\r\n",
      "                    dict(\r\n",
      "                        type='Normalize',\r\n",
      "                        mean=[123.675, 116.28, 103.53],\r\n",
      "                        std=[58.395, 57.12, 57.375],\r\n",
      "                        to_rgb=True),\r\n",
      "                    dict(type='Pad', size_divisor=32),\r\n",
      "                    dict(type='DefaultFormatBundle'),\r\n",
      "                    dict(type='Collect', keys=['img'])\r\n",
      "                ])\r\n",
      "        ],\r\n",
      "        classes=('ship', ),\r\n",
      "        version='oc'),\r\n",
      "    test=dict(\r\n",
      "        type='DOTADataset',\r\n",
      "        ann_file='/kaggle/working/sccos_dota/test/labels/',\r\n",
      "        img_prefix='/kaggle/working/sccos_dota/test/images/',\r\n",
      "        pipeline=[\r\n",
      "            dict(type='LoadImageFromFile'),\r\n",
      "            dict(\r\n",
      "                type='MultiScaleFlipAug',\r\n",
      "                img_scale=(1024, 1024),\r\n",
      "                flip=False,\r\n",
      "                transforms=[\r\n",
      "                    dict(type='RResize'),\r\n",
      "                    dict(\r\n",
      "                        type='Normalize',\r\n",
      "                        mean=[123.675, 116.28, 103.53],\r\n",
      "                        std=[58.395, 57.12, 57.375],\r\n",
      "                        to_rgb=True),\r\n",
      "                    dict(type='Pad', size_divisor=32),\r\n",
      "                    dict(type='DefaultFormatBundle'),\r\n",
      "                    dict(type='Collect', keys=['img'])\r\n",
      "                ])\r\n",
      "        ],\r\n",
      "        classes=('ship', ),\r\n",
      "        version='oc'))\r\n",
      "evaluation = dict(interval=1, metric='mAP')\r\n",
      "optimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0001)\r\n",
      "optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\r\n",
      "lr_config = dict(\r\n",
      "    policy='step',\r\n",
      "    warmup='linear',\r\n",
      "    warmup_iters=200,\r\n",
      "    warmup_ratio=0.3333333333333333,\r\n",
      "    step=[8, 11])\r\n",
      "runner = dict(type='EpochBasedRunner', max_epochs=10)\r\n",
      "checkpoint_config = dict(interval=1)\r\n",
      "log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\r\n",
      "dist_params = dict(backend='nccl')\r\n",
      "log_level = 'INFO'\r\n",
      "load_from = None\r\n",
      "resume_from = None\r\n",
      "workflow = [('train', 1)]\r\n",
      "opencv_num_threads = 0\r\n",
      "mp_start_method = 'fork'\r\n",
      "angle_version = 'oc'\r\n",
      "classes = ('ship', )\r\n",
      "model = dict(\r\n",
      "    type='R3Det',\r\n",
      "    backbone=dict(\r\n",
      "        type='ResNet',\r\n",
      "        depth=50,\r\n",
      "        num_stages=4,\r\n",
      "        out_indices=(0, 1, 2, 3),\r\n",
      "        frozen_stages=1,\r\n",
      "        zero_init_residual=False,\r\n",
      "        norm_cfg=dict(type='BN', requires_grad=True),\r\n",
      "        norm_eval=True,\r\n",
      "        style='pytorch',\r\n",
      "        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\r\n",
      "    neck=dict(\r\n",
      "        type='FPN',\r\n",
      "        in_channels=[256, 512, 1024, 2048],\r\n",
      "        out_channels=256,\r\n",
      "        start_level=1,\r\n",
      "        add_extra_convs='on_input',\r\n",
      "        num_outs=5),\r\n",
      "    bbox_head=dict(\r\n",
      "        type='RotatedRetinaHead',\r\n",
      "        num_classes=1,\r\n",
      "        in_channels=256,\r\n",
      "        stacked_convs=2,\r\n",
      "        feat_channels=256,\r\n",
      "        anchor_generator=dict(\r\n",
      "            type='RotatedAnchorGenerator',\r\n",
      "            octave_base_scale=4,\r\n",
      "            scales_per_octave=3,\r\n",
      "            ratios=[1.0, 0.5, 2.0],\r\n",
      "            strides=[8, 16, 32, 64, 128]),\r\n",
      "        bbox_coder=dict(\r\n",
      "            type='DeltaXYWHAOBBoxCoder',\r\n",
      "            angle_range='oc',\r\n",
      "            norm_factor=None,\r\n",
      "            edge_swap=False,\r\n",
      "            proj_xy=False,\r\n",
      "            target_means=[0.0, 0.0, 0.0, 0.0, 0.0],\r\n",
      "            target_stds=[1.0, 1.0, 1.0, 1.0, 1.0]),\r\n",
      "        loss_cls=dict(\r\n",
      "            type='FocalLoss',\r\n",
      "            use_sigmoid=True,\r\n",
      "            gamma=2.0,\r\n",
      "            alpha=0.25,\r\n",
      "            loss_weight=1.0),\r\n",
      "        loss_bbox=dict(type='SmoothL1Loss', beta=0.11, loss_weight=1.0)),\r\n",
      "    frm_cfgs=[dict(in_channels=256, featmap_strides=[8, 16, 32, 64, 128])],\r\n",
      "    num_refine_stages=1,\r\n",
      "    refine_heads=[\r\n",
      "        dict(\r\n",
      "            type='RotatedRetinaRefineHead',\r\n",
      "            num_classes=1,\r\n",
      "            in_channels=256,\r\n",
      "            stacked_convs=2,\r\n",
      "            feat_channels=256,\r\n",
      "            assign_by_circumhbbox=None,\r\n",
      "            anchor_generator=dict(\r\n",
      "                type='PseudoAnchorGenerator', strides=[8, 16, 32, 64, 128]),\r\n",
      "            bbox_coder=dict(\r\n",
      "                type='DeltaXYWHAOBBoxCoder',\r\n",
      "                angle_range='oc',\r\n",
      "                norm_factor=None,\r\n",
      "                edge_swap=False,\r\n",
      "                proj_xy=False,\r\n",
      "                target_means=[0.0, 0.0, 0.0, 0.0, 0.0],\r\n",
      "                target_stds=[1.0, 1.0, 1.0, 1.0, 1.0]),\r\n",
      "            loss_cls=dict(\r\n",
      "                type='FocalLoss',\r\n",
      "                use_sigmoid=True,\r\n",
      "                gamma=2.0,\r\n",
      "                alpha=0.25,\r\n",
      "                loss_weight=1.0),\r\n",
      "            loss_bbox=dict(type='SmoothL1Loss', beta=0.11, loss_weight=1.0))\r\n",
      "    ],\r\n",
      "    train_cfg=dict(\r\n",
      "        s0=dict(\r\n",
      "            assigner=dict(\r\n",
      "                type='MaxIoUAssigner',\r\n",
      "                pos_iou_thr=0.5,\r\n",
      "                neg_iou_thr=0.4,\r\n",
      "                min_pos_iou=0,\r\n",
      "                ignore_iof_thr=-1,\r\n",
      "                iou_calculator=dict(type='RBboxOverlaps2D')),\r\n",
      "            allowed_border=-1,\r\n",
      "            pos_weight=-1,\r\n",
      "            debug=False),\r\n",
      "        sr=[\r\n",
      "            dict(\r\n",
      "                assigner=dict(\r\n",
      "                    type='MaxIoUAssigner',\r\n",
      "                    pos_iou_thr=0.6,\r\n",
      "                    neg_iou_thr=0.5,\r\n",
      "                    min_pos_iou=0,\r\n",
      "                    ignore_iof_thr=-1,\r\n",
      "                    iou_calculator=dict(type='RBboxOverlaps2D')),\r\n",
      "                allowed_border=-1,\r\n",
      "                pos_weight=-1,\r\n",
      "                debug=False)\r\n",
      "        ],\r\n",
      "        stage_loss_weights=[1.0]),\r\n",
      "    test_cfg=dict(\r\n",
      "        nms_pre=2000,\r\n",
      "        min_bbox_size=0,\r\n",
      "        score_thr=0.05,\r\n",
      "        nms=dict(iou_thr=0.1),\r\n",
      "        max_per_img=2000))\r\n",
      "work_dir = '/kaggle/working/runs/r3det_train'\r\n",
      "auto_resume = False\r\n",
      "gpu_ids = range(0, 1)\r\n",
      "\r\n",
      "2025-03-18 04:37:04,550 - mmrotate - INFO - Set random seed to 1202531485, deterministic: False\r\n",
      "2025-03-18 04:37:04,995 - mmcv - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}\r\n",
      "2025-03-18 04:37:04,995 - mmcv - INFO - load model from: torchvision://resnet50\r\n",
      "2025-03-18 04:37:04,995 - mmcv - INFO - load checkpoint from torchvision path: torchvision://resnet50\r\n",
      "Downloading: \"https://download.pytorch.org/models/resnet50-0676ba61.pth\" to /root/.cache/torch/hub/checkpoints/resnet50-0676ba61.pth\r\n",
      "100%|███████████████████████████████████████| 97.8M/97.8M [00:00<00:00, 374MB/s]\r\n",
      "2025-03-18 04:37:05,422 - mmcv - WARNING - The model and loaded state dict do not match exactly\r\n",
      "\r\n",
      "unexpected key in source state_dict: fc.weight, fc.bias\r\n",
      "\r\n",
      "2025-03-18 04:37:05,446 - mmcv - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}\r\n",
      "2025-03-18 04:37:05,500 - mmcv - INFO - initialize RotatedRetinaHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01, 'override': {'type': 'Normal', 'name': 'retina_cls', 'std': 0.01, 'bias_prob': 0.01}}\r\n",
      "2025-03-18 04:37:05,524 - mmcv - INFO - initialize RotatedRetinaRefineHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01, 'override': {'type': 'Normal', 'name': 'retina_cls', 'std': 0.01, 'bias_prob': 0.01}}\r\n",
      "2025-03-18 04:37:05,543 - mmcv - INFO - \r\n",
      "backbone.conv1.weight - torch.Size([64, 3, 7, 7]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,543 - mmcv - INFO - \r\n",
      "backbone.bn1.weight - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,543 - mmcv - INFO - \r\n",
      "backbone.bn1.bias - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,543 - mmcv - INFO - \r\n",
      "backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,543 - mmcv - INFO - \r\n",
      "backbone.layer1.0.bn1.weight - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,543 - mmcv - INFO - \r\n",
      "backbone.layer1.0.bn1.bias - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,543 - mmcv - INFO - \r\n",
      "backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,543 - mmcv - INFO - \r\n",
      "backbone.layer1.0.bn2.weight - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,543 - mmcv - INFO - \r\n",
      "backbone.layer1.0.bn2.bias - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,543 - mmcv - INFO - \r\n",
      "backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,544 - mmcv - INFO - \r\n",
      "backbone.layer1.0.bn3.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,544 - mmcv - INFO - \r\n",
      "backbone.layer1.0.bn3.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,544 - mmcv - INFO - \r\n",
      "backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,544 - mmcv - INFO - \r\n",
      "backbone.layer1.0.downsample.1.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,544 - mmcv - INFO - \r\n",
      "backbone.layer1.0.downsample.1.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,544 - mmcv - INFO - \r\n",
      "backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,544 - mmcv - INFO - \r\n",
      "backbone.layer1.1.bn1.weight - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,544 - mmcv - INFO - \r\n",
      "backbone.layer1.1.bn1.bias - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,544 - mmcv - INFO - \r\n",
      "backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,544 - mmcv - INFO - \r\n",
      "backbone.layer1.1.bn2.weight - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,544 - mmcv - INFO - \r\n",
      "backbone.layer1.1.bn2.bias - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,544 - mmcv - INFO - \r\n",
      "backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,544 - mmcv - INFO - \r\n",
      "backbone.layer1.1.bn3.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,544 - mmcv - INFO - \r\n",
      "backbone.layer1.1.bn3.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,545 - mmcv - INFO - \r\n",
      "backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,545 - mmcv - INFO - \r\n",
      "backbone.layer1.2.bn1.weight - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,545 - mmcv - INFO - \r\n",
      "backbone.layer1.2.bn1.bias - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,545 - mmcv - INFO - \r\n",
      "backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,545 - mmcv - INFO - \r\n",
      "backbone.layer1.2.bn2.weight - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,545 - mmcv - INFO - \r\n",
      "backbone.layer1.2.bn2.bias - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,545 - mmcv - INFO - \r\n",
      "backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,545 - mmcv - INFO - \r\n",
      "backbone.layer1.2.bn3.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,545 - mmcv - INFO - \r\n",
      "backbone.layer1.2.bn3.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,545 - mmcv - INFO - \r\n",
      "backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,545 - mmcv - INFO - \r\n",
      "backbone.layer2.0.bn1.weight - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,545 - mmcv - INFO - \r\n",
      "backbone.layer2.0.bn1.bias - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,546 - mmcv - INFO - \r\n",
      "backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,546 - mmcv - INFO - \r\n",
      "backbone.layer2.0.bn2.weight - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,546 - mmcv - INFO - \r\n",
      "backbone.layer2.0.bn2.bias - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,546 - mmcv - INFO - \r\n",
      "backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,546 - mmcv - INFO - \r\n",
      "backbone.layer2.0.bn3.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,546 - mmcv - INFO - \r\n",
      "backbone.layer2.0.bn3.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,546 - mmcv - INFO - \r\n",
      "backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,546 - mmcv - INFO - \r\n",
      "backbone.layer2.0.downsample.1.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,546 - mmcv - INFO - \r\n",
      "backbone.layer2.0.downsample.1.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,546 - mmcv - INFO - \r\n",
      "backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,546 - mmcv - INFO - \r\n",
      "backbone.layer2.1.bn1.weight - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,546 - mmcv - INFO - \r\n",
      "backbone.layer2.1.bn1.bias - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,546 - mmcv - INFO - \r\n",
      "backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,547 - mmcv - INFO - \r\n",
      "backbone.layer2.1.bn2.weight - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,547 - mmcv - INFO - \r\n",
      "backbone.layer2.1.bn2.bias - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,547 - mmcv - INFO - \r\n",
      "backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,547 - mmcv - INFO - \r\n",
      "backbone.layer2.1.bn3.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,547 - mmcv - INFO - \r\n",
      "backbone.layer2.1.bn3.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,547 - mmcv - INFO - \r\n",
      "backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,547 - mmcv - INFO - \r\n",
      "backbone.layer2.2.bn1.weight - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,547 - mmcv - INFO - \r\n",
      "backbone.layer2.2.bn1.bias - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,547 - mmcv - INFO - \r\n",
      "backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,547 - mmcv - INFO - \r\n",
      "backbone.layer2.2.bn2.weight - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,547 - mmcv - INFO - \r\n",
      "backbone.layer2.2.bn2.bias - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,547 - mmcv - INFO - \r\n",
      "backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,548 - mmcv - INFO - \r\n",
      "backbone.layer2.2.bn3.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,548 - mmcv - INFO - \r\n",
      "backbone.layer2.2.bn3.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,548 - mmcv - INFO - \r\n",
      "backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,548 - mmcv - INFO - \r\n",
      "backbone.layer2.3.bn1.weight - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,548 - mmcv - INFO - \r\n",
      "backbone.layer2.3.bn1.bias - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,548 - mmcv - INFO - \r\n",
      "backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,548 - mmcv - INFO - \r\n",
      "backbone.layer2.3.bn2.weight - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,548 - mmcv - INFO - \r\n",
      "backbone.layer2.3.bn2.bias - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,548 - mmcv - INFO - \r\n",
      "backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,548 - mmcv - INFO - \r\n",
      "backbone.layer2.3.bn3.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,548 - mmcv - INFO - \r\n",
      "backbone.layer2.3.bn3.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,548 - mmcv - INFO - \r\n",
      "backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,548 - mmcv - INFO - \r\n",
      "backbone.layer3.0.bn1.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,549 - mmcv - INFO - \r\n",
      "backbone.layer3.0.bn1.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,549 - mmcv - INFO - \r\n",
      "backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,549 - mmcv - INFO - \r\n",
      "backbone.layer3.0.bn2.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,549 - mmcv - INFO - \r\n",
      "backbone.layer3.0.bn2.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,549 - mmcv - INFO - \r\n",
      "backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,549 - mmcv - INFO - \r\n",
      "backbone.layer3.0.bn3.weight - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,549 - mmcv - INFO - \r\n",
      "backbone.layer3.0.bn3.bias - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,549 - mmcv - INFO - \r\n",
      "backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,549 - mmcv - INFO - \r\n",
      "backbone.layer3.0.downsample.1.weight - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,549 - mmcv - INFO - \r\n",
      "backbone.layer3.0.downsample.1.bias - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,549 - mmcv - INFO - \r\n",
      "backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,549 - mmcv - INFO - \r\n",
      "backbone.layer3.1.bn1.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,550 - mmcv - INFO - \r\n",
      "backbone.layer3.1.bn1.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,550 - mmcv - INFO - \r\n",
      "backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,550 - mmcv - INFO - \r\n",
      "backbone.layer3.1.bn2.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,550 - mmcv - INFO - \r\n",
      "backbone.layer3.1.bn2.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,550 - mmcv - INFO - \r\n",
      "backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,550 - mmcv - INFO - \r\n",
      "backbone.layer3.1.bn3.weight - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,550 - mmcv - INFO - \r\n",
      "backbone.layer3.1.bn3.bias - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,550 - mmcv - INFO - \r\n",
      "backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,550 - mmcv - INFO - \r\n",
      "backbone.layer3.2.bn1.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,550 - mmcv - INFO - \r\n",
      "backbone.layer3.2.bn1.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,550 - mmcv - INFO - \r\n",
      "backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,550 - mmcv - INFO - \r\n",
      "backbone.layer3.2.bn2.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,551 - mmcv - INFO - \r\n",
      "backbone.layer3.2.bn2.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,551 - mmcv - INFO - \r\n",
      "backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,551 - mmcv - INFO - \r\n",
      "backbone.layer3.2.bn3.weight - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,551 - mmcv - INFO - \r\n",
      "backbone.layer3.2.bn3.bias - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,551 - mmcv - INFO - \r\n",
      "backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,551 - mmcv - INFO - \r\n",
      "backbone.layer3.3.bn1.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,551 - mmcv - INFO - \r\n",
      "backbone.layer3.3.bn1.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,551 - mmcv - INFO - \r\n",
      "backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,551 - mmcv - INFO - \r\n",
      "backbone.layer3.3.bn2.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,551 - mmcv - INFO - \r\n",
      "backbone.layer3.3.bn2.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,551 - mmcv - INFO - \r\n",
      "backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,551 - mmcv - INFO - \r\n",
      "backbone.layer3.3.bn3.weight - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,551 - mmcv - INFO - \r\n",
      "backbone.layer3.3.bn3.bias - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,552 - mmcv - INFO - \r\n",
      "backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,552 - mmcv - INFO - \r\n",
      "backbone.layer3.4.bn1.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,552 - mmcv - INFO - \r\n",
      "backbone.layer3.4.bn1.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,552 - mmcv - INFO - \r\n",
      "backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,552 - mmcv - INFO - \r\n",
      "backbone.layer3.4.bn2.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,552 - mmcv - INFO - \r\n",
      "backbone.layer3.4.bn2.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,552 - mmcv - INFO - \r\n",
      "backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,552 - mmcv - INFO - \r\n",
      "backbone.layer3.4.bn3.weight - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,552 - mmcv - INFO - \r\n",
      "backbone.layer3.4.bn3.bias - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,552 - mmcv - INFO - \r\n",
      "backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,552 - mmcv - INFO - \r\n",
      "backbone.layer3.5.bn1.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,552 - mmcv - INFO - \r\n",
      "backbone.layer3.5.bn1.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,553 - mmcv - INFO - \r\n",
      "backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,553 - mmcv - INFO - \r\n",
      "backbone.layer3.5.bn2.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,553 - mmcv - INFO - \r\n",
      "backbone.layer3.5.bn2.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,553 - mmcv - INFO - \r\n",
      "backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,553 - mmcv - INFO - \r\n",
      "backbone.layer3.5.bn3.weight - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,553 - mmcv - INFO - \r\n",
      "backbone.layer3.5.bn3.bias - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,553 - mmcv - INFO - \r\n",
      "backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,553 - mmcv - INFO - \r\n",
      "backbone.layer4.0.bn1.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,553 - mmcv - INFO - \r\n",
      "backbone.layer4.0.bn1.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,553 - mmcv - INFO - \r\n",
      "backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,553 - mmcv - INFO - \r\n",
      "backbone.layer4.0.bn2.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,553 - mmcv - INFO - \r\n",
      "backbone.layer4.0.bn2.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,554 - mmcv - INFO - \r\n",
      "backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,554 - mmcv - INFO - \r\n",
      "backbone.layer4.0.bn3.weight - torch.Size([2048]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,554 - mmcv - INFO - \r\n",
      "backbone.layer4.0.bn3.bias - torch.Size([2048]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,554 - mmcv - INFO - \r\n",
      "backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,554 - mmcv - INFO - \r\n",
      "backbone.layer4.0.downsample.1.weight - torch.Size([2048]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,554 - mmcv - INFO - \r\n",
      "backbone.layer4.0.downsample.1.bias - torch.Size([2048]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,554 - mmcv - INFO - \r\n",
      "backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,554 - mmcv - INFO - \r\n",
      "backbone.layer4.1.bn1.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,554 - mmcv - INFO - \r\n",
      "backbone.layer4.1.bn1.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,554 - mmcv - INFO - \r\n",
      "backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,554 - mmcv - INFO - \r\n",
      "backbone.layer4.1.bn2.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,554 - mmcv - INFO - \r\n",
      "backbone.layer4.1.bn2.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,554 - mmcv - INFO - \r\n",
      "backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,555 - mmcv - INFO - \r\n",
      "backbone.layer4.1.bn3.weight - torch.Size([2048]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,555 - mmcv - INFO - \r\n",
      "backbone.layer4.1.bn3.bias - torch.Size([2048]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,555 - mmcv - INFO - \r\n",
      "backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,555 - mmcv - INFO - \r\n",
      "backbone.layer4.2.bn1.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,555 - mmcv - INFO - \r\n",
      "backbone.layer4.2.bn1.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,555 - mmcv - INFO - \r\n",
      "backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,555 - mmcv - INFO - \r\n",
      "backbone.layer4.2.bn2.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,555 - mmcv - INFO - \r\n",
      "backbone.layer4.2.bn2.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,555 - mmcv - INFO - \r\n",
      "backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,555 - mmcv - INFO - \r\n",
      "backbone.layer4.2.bn3.weight - torch.Size([2048]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,555 - mmcv - INFO - \r\n",
      "backbone.layer4.2.bn3.bias - torch.Size([2048]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,555 - mmcv - INFO - \r\n",
      "neck.lateral_convs.0.conv.weight - torch.Size([256, 512, 1, 1]): \r\n",
      "XavierInit: gain=1, distribution=uniform, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,556 - mmcv - INFO - \r\n",
      "neck.lateral_convs.0.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of R3Det  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,556 - mmcv - INFO - \r\n",
      "neck.lateral_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): \r\n",
      "XavierInit: gain=1, distribution=uniform, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,556 - mmcv - INFO - \r\n",
      "neck.lateral_convs.1.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of R3Det  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,556 - mmcv - INFO - \r\n",
      "neck.lateral_convs.2.conv.weight - torch.Size([256, 2048, 1, 1]): \r\n",
      "XavierInit: gain=1, distribution=uniform, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,556 - mmcv - INFO - \r\n",
      "neck.lateral_convs.2.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of R3Det  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,556 - mmcv - INFO - \r\n",
      "neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "XavierInit: gain=1, distribution=uniform, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,556 - mmcv - INFO - \r\n",
      "neck.fpn_convs.0.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of R3Det  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,556 - mmcv - INFO - \r\n",
      "neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "XavierInit: gain=1, distribution=uniform, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,556 - mmcv - INFO - \r\n",
      "neck.fpn_convs.1.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of R3Det  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,556 - mmcv - INFO - \r\n",
      "neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "XavierInit: gain=1, distribution=uniform, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,556 - mmcv - INFO - \r\n",
      "neck.fpn_convs.2.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of R3Det  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,556 - mmcv - INFO - \r\n",
      "neck.fpn_convs.3.conv.weight - torch.Size([256, 2048, 3, 3]): \r\n",
      "XavierInit: gain=1, distribution=uniform, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,556 - mmcv - INFO - \r\n",
      "neck.fpn_convs.3.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of R3Det  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,557 - mmcv - INFO - \r\n",
      "neck.fpn_convs.4.conv.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "XavierInit: gain=1, distribution=uniform, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,557 - mmcv - INFO - \r\n",
      "neck.fpn_convs.4.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of R3Det  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,557 - mmcv - INFO - \r\n",
      "bbox_head.cls_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,557 - mmcv - INFO - \r\n",
      "bbox_head.cls_convs.0.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of R3Det  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,557 - mmcv - INFO - \r\n",
      "bbox_head.cls_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,557 - mmcv - INFO - \r\n",
      "bbox_head.cls_convs.1.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of R3Det  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,557 - mmcv - INFO - \r\n",
      "bbox_head.reg_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,557 - mmcv - INFO - \r\n",
      "bbox_head.reg_convs.0.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of R3Det  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,557 - mmcv - INFO - \r\n",
      "bbox_head.reg_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,557 - mmcv - INFO - \r\n",
      "bbox_head.reg_convs.1.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of R3Det  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,557 - mmcv - INFO - \r\n",
      "bbox_head.retina_cls.weight - torch.Size([9, 256, 3, 3]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=-4.59511985013459 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,558 - mmcv - INFO - \r\n",
      "bbox_head.retina_cls.bias - torch.Size([9]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=-4.59511985013459 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,558 - mmcv - INFO - \r\n",
      "bbox_head.retina_reg.weight - torch.Size([45, 256, 3, 3]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,558 - mmcv - INFO - \r\n",
      "bbox_head.retina_reg.bias - torch.Size([45]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,558 - mmcv - INFO - \r\n",
      "feat_refine_module.0.conv_5_1.weight - torch.Size([256, 256, 5, 1]): \r\n",
      "Initialized by user-defined `init_weights` in FeatureRefineModule  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,558 - mmcv - INFO - \r\n",
      "feat_refine_module.0.conv_5_1.bias - torch.Size([256]): \r\n",
      "Initialized by user-defined `init_weights` in FeatureRefineModule  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,558 - mmcv - INFO - \r\n",
      "feat_refine_module.0.conv_1_5.weight - torch.Size([256, 256, 1, 5]): \r\n",
      "Initialized by user-defined `init_weights` in FeatureRefineModule  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,558 - mmcv - INFO - \r\n",
      "feat_refine_module.0.conv_1_5.bias - torch.Size([256]): \r\n",
      "Initialized by user-defined `init_weights` in FeatureRefineModule  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,558 - mmcv - INFO - \r\n",
      "feat_refine_module.0.conv_1_1.weight - torch.Size([256, 256, 1, 1]): \r\n",
      "Initialized by user-defined `init_weights` in FeatureRefineModule  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,558 - mmcv - INFO - \r\n",
      "feat_refine_module.0.conv_1_1.bias - torch.Size([256]): \r\n",
      "Initialized by user-defined `init_weights` in FeatureRefineModule  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,558 - mmcv - INFO - \r\n",
      "refine_head.0.cls_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,558 - mmcv - INFO - \r\n",
      "refine_head.0.cls_convs.0.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of R3Det  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,558 - mmcv - INFO - \r\n",
      "refine_head.0.cls_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,559 - mmcv - INFO - \r\n",
      "refine_head.0.cls_convs.1.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of R3Det  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,559 - mmcv - INFO - \r\n",
      "refine_head.0.reg_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,559 - mmcv - INFO - \r\n",
      "refine_head.0.reg_convs.0.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of R3Det  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,559 - mmcv - INFO - \r\n",
      "refine_head.0.reg_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,559 - mmcv - INFO - \r\n",
      "refine_head.0.reg_convs.1.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of R3Det  \r\n",
      " \r\n",
      "2025-03-18 04:37:05,559 - mmcv - INFO - \r\n",
      "refine_head.0.retina_cls.weight - torch.Size([1, 256, 3, 3]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=-4.59511985013459 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,559 - mmcv - INFO - \r\n",
      "refine_head.0.retina_cls.bias - torch.Size([1]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=-4.59511985013459 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,559 - mmcv - INFO - \r\n",
      "refine_head.0.retina_reg.weight - torch.Size([5, 256, 3, 3]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:05,559 - mmcv - INFO - \r\n",
      "refine_head.0.retina_reg.bias - torch.Size([5]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 04:37:07,879 - mmrotate - INFO - Start running, host: root@927e49966433, work_dir: /kaggle/working/runs/r3det_train\r\n",
      "2025-03-18 04:37:07,880 - mmrotate - INFO - Hooks will be executed in the following order:\r\n",
      "before_run:\r\n",
      "(VERY_HIGH   ) StepLrUpdaterHook                  \r\n",
      "(NORMAL      ) CheckpointHook                     \r\n",
      "(LOW         ) EvalHook                           \r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "before_train_epoch:\r\n",
      "(VERY_HIGH   ) StepLrUpdaterHook                  \r\n",
      "(LOW         ) IterTimerHook                      \r\n",
      "(LOW         ) EvalHook                           \r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "before_train_iter:\r\n",
      "(VERY_HIGH   ) StepLrUpdaterHook                  \r\n",
      "(LOW         ) IterTimerHook                      \r\n",
      "(LOW         ) EvalHook                           \r\n",
      " -------------------- \r\n",
      "after_train_iter:\r\n",
      "(ABOVE_NORMAL) OptimizerHook                      \r\n",
      "(NORMAL      ) CheckpointHook                     \r\n",
      "(LOW         ) IterTimerHook                      \r\n",
      "(LOW         ) EvalHook                           \r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "after_train_epoch:\r\n",
      "(NORMAL      ) CheckpointHook                     \r\n",
      "(LOW         ) EvalHook                           \r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "before_val_epoch:\r\n",
      "(LOW         ) IterTimerHook                      \r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "before_val_iter:\r\n",
      "(LOW         ) IterTimerHook                      \r\n",
      " -------------------- \r\n",
      "after_val_iter:\r\n",
      "(LOW         ) IterTimerHook                      \r\n",
      " -------------------- \r\n",
      "after_val_epoch:\r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "after_run:\r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "2025-03-18 04:37:07,880 - mmrotate - INFO - workflow: [('train', 1)], max: 10 epochs\r\n",
      "2025-03-18 04:37:07,880 - mmrotate - INFO - Checkpoints will be saved to /kaggle/working/runs/r3det_train by HardDiskBackend.\r\n",
      "2025-03-18 04:38:20,442 - mmrotate - INFO - Epoch [1][100/928]\tlr: 3.317e-03, eta: 1:51:00, time: 0.726, data_time: 0.043, memory: 5681, s0.loss_cls: 1.0141, s0.loss_bbox: 1.8976, sr0.loss_cls: 1.0072, sr0.loss_bbox: 2.0874, loss: 6.0063, grad_norm: 28.8295\r\n",
      "2025-03-18 04:39:29,019 - mmrotate - INFO - Epoch [1][200/928]\tlr: 4.983e-03, eta: 1:46:47, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.8869, s0.loss_bbox: 1.7986, sr0.loss_cls: 0.9569, sr0.loss_bbox: 2.0703, loss: 5.7125, grad_norm: 18.4204\r\n",
      "2025-03-18 04:40:37,387 - mmrotate - INFO - Epoch [1][300/928]\tlr: 5.000e-03, eta: 1:44:31, time: 0.684, data_time: 0.019, memory: 5681, s0.loss_cls: 0.8947, s0.loss_bbox: 1.7301, sr0.loss_cls: 0.9347, sr0.loss_bbox: 1.8878, loss: 5.4473, grad_norm: 10.5648\r\n",
      "2025-03-18 04:41:45,745 - mmrotate - INFO - Epoch [1][400/928]\tlr: 5.000e-03, eta: 1:42:48, time: 0.684, data_time: 0.019, memory: 5681, s0.loss_cls: 0.8012, s0.loss_bbox: 1.3459, sr0.loss_cls: 0.8704, sr0.loss_bbox: 1.5881, loss: 4.6055, grad_norm: 9.0311\r\n",
      "2025-03-18 04:42:54,243 - mmrotate - INFO - Epoch [1][500/928]\tlr: 5.000e-03, eta: 1:41:22, time: 0.685, data_time: 0.019, memory: 5681, s0.loss_cls: 0.6932, s0.loss_bbox: 0.9890, sr0.loss_cls: 0.7738, sr0.loss_bbox: 1.1045, loss: 3.5605, grad_norm: 8.5271\r\n",
      "2025-03-18 04:44:02,664 - mmrotate - INFO - Epoch [1][600/928]\tlr: 5.000e-03, eta: 1:40:00, time: 0.684, data_time: 0.019, memory: 5681, s0.loss_cls: 0.6082, s0.loss_bbox: 0.9584, sr0.loss_cls: 0.7339, sr0.loss_bbox: 1.1379, loss: 3.4384, grad_norm: 8.4231\r\n",
      "2025-03-18 04:45:11,241 - mmrotate - INFO - Epoch [1][700/928]\tlr: 5.000e-03, eta: 1:38:44, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.4993, s0.loss_bbox: 0.7358, sr0.loss_cls: 0.6088, sr0.loss_bbox: 0.7785, loss: 2.6223, grad_norm: 6.7814\r\n",
      "2025-03-18 04:46:19,893 - mmrotate - INFO - Epoch [1][800/928]\tlr: 5.000e-03, eta: 1:37:31, time: 0.687, data_time: 0.020, memory: 5681, s0.loss_cls: 0.4666, s0.loss_bbox: 0.6894, sr0.loss_cls: 0.5484, sr0.loss_bbox: 0.7252, loss: 2.4296, grad_norm: 6.7555\r\n",
      "2025-03-18 04:47:28,346 - mmrotate - INFO - Epoch [1][900/928]\tlr: 5.000e-03, eta: 1:36:17, time: 0.685, data_time: 0.019, memory: 5681, s0.loss_cls: 0.4314, s0.loss_bbox: 0.6040, sr0.loss_cls: 0.5112, sr0.loss_bbox: 0.5838, loss: 2.1304, grad_norm: 6.9650\r\n",
      "2025-03-18 04:47:47,496 - mmrotate - INFO - Saving checkpoint at 1 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 11.2 task/s, elapsed: 41s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 04:48:37,198 - mmrotate - INFO - \r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "| class | gts  | dets  | recall | ap    |\r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "| ship  | 2147 | 31572 | 0.272  | 0.163 |\r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "| mAP   |      |       |        | 0.163 |\r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "2025-03-18 04:48:37,271 - mmrotate - INFO - Exp name: r3det_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 04:48:37,272 - mmrotate - INFO - Epoch(val) [1][464]\tmAP: 0.1635\r\n",
      "2025-03-18 04:49:48,289 - mmrotate - INFO - Epoch [2][100/928]\tlr: 5.000e-03, eta: 1:32:30, time: 0.710, data_time: 0.043, memory: 5681, s0.loss_cls: 0.3772, s0.loss_bbox: 0.5801, sr0.loss_cls: 0.4244, sr0.loss_bbox: 0.5417, loss: 1.9234, grad_norm: 6.3168\r\n",
      "2025-03-18 04:50:56,883 - mmrotate - INFO - Epoch [2][200/928]\tlr: 5.000e-03, eta: 1:31:32, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.3662, s0.loss_bbox: 0.5699, sr0.loss_cls: 0.4676, sr0.loss_bbox: 0.4772, loss: 1.8809, grad_norm: 6.7006\r\n",
      "2025-03-18 04:52:05,260 - mmrotate - INFO - Epoch [2][300/928]\tlr: 5.000e-03, eta: 1:30:31, time: 0.684, data_time: 0.019, memory: 5681, s0.loss_cls: 0.3369, s0.loss_bbox: 0.5362, sr0.loss_cls: 0.4018, sr0.loss_bbox: 0.4641, loss: 1.7391, grad_norm: 6.3711\r\n",
      "2025-03-18 04:53:13,747 - mmrotate - INFO - Epoch [2][400/928]\tlr: 5.000e-03, eta: 1:29:30, time: 0.685, data_time: 0.019, memory: 5681, s0.loss_cls: 0.3078, s0.loss_bbox: 0.4133, sr0.loss_cls: 0.3048, sr0.loss_bbox: 0.3832, loss: 1.4091, grad_norm: 5.6431\r\n",
      "2025-03-18 04:54:22,240 - mmrotate - INFO - Epoch [2][500/928]\tlr: 5.000e-03, eta: 1:28:28, time: 0.685, data_time: 0.020, memory: 5681, s0.loss_cls: 0.3408, s0.loss_bbox: 0.5124, sr0.loss_cls: 0.3480, sr0.loss_bbox: 0.4803, loss: 1.6816, grad_norm: 6.6591\r\n",
      "2025-03-18 04:55:30,729 - mmrotate - INFO - Epoch [2][600/928]\tlr: 5.000e-03, eta: 1:27:25, time: 0.685, data_time: 0.019, memory: 5681, s0.loss_cls: 0.2930, s0.loss_bbox: 0.3887, sr0.loss_cls: 0.2787, sr0.loss_bbox: 0.3683, loss: 1.3286, grad_norm: 5.6397\r\n",
      "2025-03-18 04:56:39,245 - mmrotate - INFO - Epoch [2][700/928]\tlr: 5.000e-03, eta: 1:26:21, time: 0.685, data_time: 0.020, memory: 5681, s0.loss_cls: 0.2868, s0.loss_bbox: 0.4297, sr0.loss_cls: 0.2904, sr0.loss_bbox: 0.3562, loss: 1.3630, grad_norm: 5.8373\r\n",
      "2025-03-18 04:57:47,712 - mmrotate - INFO - Epoch [2][800/928]\tlr: 5.000e-03, eta: 1:25:17, time: 0.685, data_time: 0.020, memory: 5681, s0.loss_cls: 0.2759, s0.loss_bbox: 0.4193, sr0.loss_cls: 0.2621, sr0.loss_bbox: 0.4020, loss: 1.3593, grad_norm: 5.6081\r\n",
      "2025-03-18 04:58:56,353 - mmrotate - INFO - Epoch [2][900/928]\tlr: 5.000e-03, eta: 1:24:12, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.2683, s0.loss_bbox: 0.3899, sr0.loss_cls: 0.2472, sr0.loss_bbox: 0.3671, loss: 1.2725, grad_norm: 5.5012\r\n",
      "2025-03-18 04:59:15,681 - mmrotate - INFO - Saving checkpoint at 2 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 11.6 task/s, elapsed: 40s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 05:00:04,301 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 4112 | 0.470  | 0.386 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.386 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 05:00:04,367 - mmrotate - INFO - Exp name: r3det_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 05:00:04,368 - mmrotate - INFO - Epoch(val) [2][464]\tmAP: 0.3856\r\n",
      "2025-03-18 05:01:15,412 - mmrotate - INFO - Epoch [3][100/928]\tlr: 5.000e-03, eta: 1:21:47, time: 0.710, data_time: 0.043, memory: 5681, s0.loss_cls: 0.2298, s0.loss_bbox: 0.3489, sr0.loss_cls: 0.2133, sr0.loss_bbox: 0.3449, loss: 1.1368, grad_norm: 4.7215\r\n",
      "2025-03-18 05:02:23,971 - mmrotate - INFO - Epoch [3][200/928]\tlr: 5.000e-03, eta: 1:20:45, time: 0.686, data_time: 0.019, memory: 5681, s0.loss_cls: 0.2488, s0.loss_bbox: 0.3564, sr0.loss_cls: 0.2281, sr0.loss_bbox: 0.3331, loss: 1.1664, grad_norm: 5.6968\r\n",
      "2025-03-18 05:03:32,439 - mmrotate - INFO - Epoch [3][300/928]\tlr: 5.000e-03, eta: 1:19:43, time: 0.685, data_time: 0.019, memory: 5681, s0.loss_cls: 0.2377, s0.loss_bbox: 0.2995, sr0.loss_cls: 0.1943, sr0.loss_bbox: 0.3142, loss: 1.0457, grad_norm: 5.0092\r\n",
      "2025-03-18 05:04:41,081 - mmrotate - INFO - Epoch [3][400/928]\tlr: 5.000e-03, eta: 1:18:40, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.2242, s0.loss_bbox: 0.3018, sr0.loss_cls: 0.1841, sr0.loss_bbox: 0.3095, loss: 1.0196, grad_norm: 4.9029\r\n",
      "2025-03-18 05:05:49,497 - mmrotate - INFO - Epoch [3][500/928]\tlr: 5.000e-03, eta: 1:17:37, time: 0.684, data_time: 0.020, memory: 5681, s0.loss_cls: 0.2181, s0.loss_bbox: 0.3339, sr0.loss_cls: 0.1976, sr0.loss_bbox: 0.3318, loss: 1.0814, grad_norm: 5.2014\r\n",
      "2025-03-18 05:06:58,166 - mmrotate - INFO - Epoch [3][600/928]\tlr: 5.000e-03, eta: 1:16:33, time: 0.687, data_time: 0.020, memory: 5681, s0.loss_cls: 0.2145, s0.loss_bbox: 0.3558, sr0.loss_cls: 0.1878, sr0.loss_bbox: 0.3324, loss: 1.0906, grad_norm: 5.2073\r\n",
      "2025-03-18 05:08:06,790 - mmrotate - INFO - Epoch [3][700/928]\tlr: 5.000e-03, eta: 1:15:29, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.2255, s0.loss_bbox: 0.4026, sr0.loss_cls: 0.1923, sr0.loss_bbox: 0.3514, loss: 1.1717, grad_norm: 5.3532\r\n",
      "2025-03-18 05:09:15,562 - mmrotate - INFO - Epoch [3][800/928]\tlr: 5.000e-03, eta: 1:14:25, time: 0.688, data_time: 0.020, memory: 5681, s0.loss_cls: 0.2130, s0.loss_bbox: 0.3336, sr0.loss_cls: 0.1748, sr0.loss_bbox: 0.3266, loss: 1.0481, grad_norm: 5.0468\r\n",
      "2025-03-18 05:10:24,185 - mmrotate - INFO - Epoch [3][900/928]\tlr: 5.000e-03, eta: 1:13:21, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.2133, s0.loss_bbox: 0.3032, sr0.loss_cls: 0.1692, sr0.loss_bbox: 0.2885, loss: 0.9742, grad_norm: 4.8962\r\n",
      "2025-03-18 05:10:43,463 - mmrotate - INFO - Saving checkpoint at 3 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 11.6 task/s, elapsed: 40s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 05:11:31,445 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 9040 | 0.590  | 0.487 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.487 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 05:11:31,514 - mmrotate - INFO - Exp name: r3det_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 05:11:31,515 - mmrotate - INFO - Epoch(val) [3][464]\tmAP: 0.4872\r\n",
      "2025-03-18 05:12:42,554 - mmrotate - INFO - Epoch [4][100/928]\tlr: 5.000e-03, eta: 1:11:20, time: 0.710, data_time: 0.044, memory: 5681, s0.loss_cls: 0.1856, s0.loss_bbox: 0.2663, sr0.loss_cls: 0.1463, sr0.loss_bbox: 0.2986, loss: 0.8968, grad_norm: 4.4217\r\n",
      "2025-03-18 05:13:51,157 - mmrotate - INFO - Epoch [4][200/928]\tlr: 5.000e-03, eta: 1:10:17, time: 0.686, data_time: 0.019, memory: 5681, s0.loss_cls: 0.2165, s0.loss_bbox: 0.3703, sr0.loss_cls: 0.1872, sr0.loss_bbox: 0.3245, loss: 1.0986, grad_norm: 5.9163\r\n",
      "2025-03-18 05:15:00,023 - mmrotate - INFO - Epoch [4][300/928]\tlr: 5.000e-03, eta: 1:09:14, time: 0.689, data_time: 0.021, memory: 5681, s0.loss_cls: 0.2043, s0.loss_bbox: 0.3300, sr0.loss_cls: 0.1744, sr0.loss_bbox: 0.3157, loss: 1.0244, grad_norm: 4.7084\r\n",
      "2025-03-18 05:16:08,587 - mmrotate - INFO - Epoch [4][400/928]\tlr: 5.000e-03, eta: 1:08:10, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1860, s0.loss_bbox: 0.2611, sr0.loss_cls: 0.1657, sr0.loss_bbox: 0.2933, loss: 0.9060, grad_norm: 4.8648\r\n",
      "2025-03-18 05:17:17,091 - mmrotate - INFO - Epoch [4][500/928]\tlr: 5.000e-03, eta: 1:07:05, time: 0.685, data_time: 0.019, memory: 5681, s0.loss_cls: 0.2014, s0.loss_bbox: 0.3385, sr0.loss_cls: 0.1672, sr0.loss_bbox: 0.3105, loss: 1.0176, grad_norm: 5.3203\r\n",
      "2025-03-18 05:18:25,723 - mmrotate - INFO - Epoch [4][600/928]\tlr: 5.000e-03, eta: 1:06:01, time: 0.686, data_time: 0.019, memory: 5681, s0.loss_cls: 0.1805, s0.loss_bbox: 0.2649, sr0.loss_cls: 0.1432, sr0.loss_bbox: 0.2815, loss: 0.8700, grad_norm: 4.2990\r\n",
      "2025-03-18 05:19:34,393 - mmrotate - INFO - Epoch [4][700/928]\tlr: 5.000e-03, eta: 1:04:56, time: 0.687, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1768, s0.loss_bbox: 0.2703, sr0.loss_cls: 0.1346, sr0.loss_bbox: 0.2775, loss: 0.8593, grad_norm: 4.2230\r\n",
      "2025-03-18 05:20:43,110 - mmrotate - INFO - Epoch [4][800/928]\tlr: 5.000e-03, eta: 1:03:51, time: 0.687, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1954, s0.loss_bbox: 0.3655, sr0.loss_cls: 0.1652, sr0.loss_bbox: 0.3614, loss: 1.0875, grad_norm: 5.3865\r\n",
      "2025-03-18 05:21:51,739 - mmrotate - INFO - Epoch [4][900/928]\tlr: 5.000e-03, eta: 1:02:46, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1760, s0.loss_bbox: 0.2403, sr0.loss_cls: 0.1341, sr0.loss_bbox: 0.2565, loss: 0.8068, grad_norm: 4.2422\r\n",
      "2025-03-18 05:22:11,031 - mmrotate - INFO - Saving checkpoint at 4 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 11.5 task/s, elapsed: 40s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 05:22:59,509 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 7268 | 0.654  | 0.575 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.575 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 05:22:59,580 - mmrotate - INFO - Exp name: r3det_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 05:22:59,580 - mmrotate - INFO - Epoch(val) [4][464]\tmAP: 0.5745\r\n",
      "2025-03-18 05:24:10,651 - mmrotate - INFO - Epoch [5][100/928]\tlr: 5.000e-03, eta: 1:00:58, time: 0.711, data_time: 0.043, memory: 5681, s0.loss_cls: 0.1757, s0.loss_bbox: 0.2706, sr0.loss_cls: 0.1404, sr0.loss_bbox: 0.2768, loss: 0.8634, grad_norm: 4.7516\r\n",
      "2025-03-18 05:25:19,208 - mmrotate - INFO - Epoch [5][200/928]\tlr: 5.000e-03, eta: 0:59:53, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1679, s0.loss_bbox: 0.2229, sr0.loss_cls: 0.1255, sr0.loss_bbox: 0.2455, loss: 0.7617, grad_norm: 4.3473\r\n",
      "2025-03-18 05:26:27,819 - mmrotate - INFO - Epoch [5][300/928]\tlr: 5.000e-03, eta: 0:58:49, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.2191, s0.loss_bbox: 0.3621, sr0.loss_cls: 0.1559, sr0.loss_bbox: 0.3043, loss: 1.0415, grad_norm: 5.3435\r\n",
      "2025-03-18 05:27:36,449 - mmrotate - INFO - Epoch [5][400/928]\tlr: 5.000e-03, eta: 0:57:44, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1718, s0.loss_bbox: 0.2298, sr0.loss_cls: 0.1290, sr0.loss_bbox: 0.2542, loss: 0.7849, grad_norm: 3.9679\r\n",
      "2025-03-18 05:28:45,106 - mmrotate - INFO - Epoch [5][500/928]\tlr: 5.000e-03, eta: 0:56:39, time: 0.687, data_time: 0.021, memory: 5681, s0.loss_cls: 0.1469, s0.loss_bbox: 0.2353, sr0.loss_cls: 0.1093, sr0.loss_bbox: 0.2574, loss: 0.7490, grad_norm: 3.9953\r\n",
      "2025-03-18 05:29:53,609 - mmrotate - INFO - Epoch [5][600/928]\tlr: 5.000e-03, eta: 0:55:33, time: 0.685, data_time: 0.019, memory: 5681, s0.loss_cls: 0.1856, s0.loss_bbox: 0.3138, sr0.loss_cls: 0.1485, sr0.loss_bbox: 0.3143, loss: 0.9623, grad_norm: 5.3905\r\n",
      "2025-03-18 05:31:02,085 - mmrotate - INFO - Epoch [5][700/928]\tlr: 5.000e-03, eta: 0:54:28, time: 0.685, data_time: 0.019, memory: 5681, s0.loss_cls: 0.1597, s0.loss_bbox: 0.2785, sr0.loss_cls: 0.1234, sr0.loss_bbox: 0.2795, loss: 0.8412, grad_norm: 4.4532\r\n",
      "2025-03-18 05:32:10,594 - mmrotate - INFO - Epoch [5][800/928]\tlr: 5.000e-03, eta: 0:53:22, time: 0.685, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1664, s0.loss_bbox: 0.2399, sr0.loss_cls: 0.1274, sr0.loss_bbox: 0.2760, loss: 0.8097, grad_norm: 4.1504\r\n",
      "2025-03-18 05:33:19,243 - mmrotate - INFO - Epoch [5][900/928]\tlr: 5.000e-03, eta: 0:52:16, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1767, s0.loss_bbox: 0.2835, sr0.loss_cls: 0.1327, sr0.loss_bbox: 0.2965, loss: 0.8895, grad_norm: 4.5365\r\n",
      "2025-03-18 05:33:38,595 - mmrotate - INFO - Saving checkpoint at 5 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 11.5 task/s, elapsed: 40s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 05:34:27,604 - mmrotate - INFO - \r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "| class | gts  | dets  | recall | ap    |\r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "| ship  | 2147 | 10790 | 0.623  | 0.510 |\r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "| mAP   |      |       |        | 0.510 |\r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "2025-03-18 05:34:27,707 - mmrotate - INFO - Exp name: r3det_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 05:34:27,707 - mmrotate - INFO - Epoch(val) [5][464]\tmAP: 0.5098\r\n",
      "2025-03-18 05:35:38,712 - mmrotate - INFO - Epoch [6][100/928]\tlr: 5.000e-03, eta: 0:50:36, time: 0.710, data_time: 0.044, memory: 5681, s0.loss_cls: 0.1791, s0.loss_bbox: 0.2545, sr0.loss_cls: 0.1265, sr0.loss_bbox: 0.2642, loss: 0.8243, grad_norm: 4.3998\r\n",
      "2025-03-18 05:36:47,252 - mmrotate - INFO - Epoch [6][200/928]\tlr: 5.000e-03, eta: 0:49:31, time: 0.685, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1643, s0.loss_bbox: 0.2213, sr0.loss_cls: 0.1192, sr0.loss_bbox: 0.2439, loss: 0.7487, grad_norm: 4.1784\r\n",
      "2025-03-18 05:37:55,797 - mmrotate - INFO - Epoch [6][300/928]\tlr: 5.000e-03, eta: 0:48:25, time: 0.685, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1690, s0.loss_bbox: 0.2531, sr0.loss_cls: 0.1202, sr0.loss_bbox: 0.2655, loss: 0.8078, grad_norm: 4.5354\r\n",
      "2025-03-18 05:39:04,299 - mmrotate - INFO - Epoch [6][400/928]\tlr: 5.000e-03, eta: 0:47:19, time: 0.685, data_time: 0.019, memory: 5681, s0.loss_cls: 0.1476, s0.loss_bbox: 0.2690, sr0.loss_cls: 0.1203, sr0.loss_bbox: 0.3027, loss: 0.8396, grad_norm: 4.4918\r\n",
      "2025-03-18 05:40:12,746 - mmrotate - INFO - Epoch [6][500/928]\tlr: 5.000e-03, eta: 0:46:14, time: 0.684, data_time: 0.019, memory: 5681, s0.loss_cls: 0.1475, s0.loss_bbox: 0.2399, sr0.loss_cls: 0.1157, sr0.loss_bbox: 0.2612, loss: 0.7643, grad_norm: 4.0971\r\n",
      "2025-03-18 05:41:21,384 - mmrotate - INFO - Epoch [6][600/928]\tlr: 5.000e-03, eta: 0:45:08, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1647, s0.loss_bbox: 0.2788, sr0.loss_cls: 0.1270, sr0.loss_bbox: 0.2865, loss: 0.8570, grad_norm: 4.9176\r\n",
      "2025-03-18 05:42:29,945 - mmrotate - INFO - Epoch [6][700/928]\tlr: 5.000e-03, eta: 0:44:02, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1654, s0.loss_bbox: 0.2606, sr0.loss_cls: 0.1218, sr0.loss_bbox: 0.2933, loss: 0.8412, grad_norm: 4.6285\r\n",
      "2025-03-18 05:43:38,491 - mmrotate - INFO - Epoch [6][800/928]\tlr: 5.000e-03, eta: 0:42:56, time: 0.685, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1441, s0.loss_bbox: 0.2320, sr0.loss_cls: 0.1124, sr0.loss_bbox: 0.2533, loss: 0.7418, grad_norm: 3.9652\r\n",
      "2025-03-18 05:44:46,822 - mmrotate - INFO - Epoch [6][900/928]\tlr: 5.000e-03, eta: 0:41:50, time: 0.683, data_time: 0.019, memory: 5681, s0.loss_cls: 0.1575, s0.loss_bbox: 0.2708, sr0.loss_cls: 0.1218, sr0.loss_bbox: 0.2869, loss: 0.8370, grad_norm: 4.4400\r\n",
      "2025-03-18 05:45:06,082 - mmrotate - INFO - Saving checkpoint at 6 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 11.4 task/s, elapsed: 41s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 05:45:55,121 - mmrotate - INFO - \r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "| class | gts  | dets  | recall | ap    |\r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "| ship  | 2147 | 36249 | 0.714  | 0.617 |\r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "| mAP   |      |       |        | 0.617 |\r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "2025-03-18 05:45:55,195 - mmrotate - INFO - Exp name: r3det_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 05:45:55,195 - mmrotate - INFO - Epoch(val) [6][464]\tmAP: 0.6173\r\n",
      "2025-03-18 05:47:06,334 - mmrotate - INFO - Epoch [7][100/928]\tlr: 5.000e-03, eta: 0:40:14, time: 0.711, data_time: 0.044, memory: 5681, s0.loss_cls: 0.1634, s0.loss_bbox: 0.2487, sr0.loss_cls: 0.1152, sr0.loss_bbox: 0.2846, loss: 0.8118, grad_norm: 4.4406\r\n",
      "2025-03-18 05:48:14,837 - mmrotate - INFO - Epoch [7][200/928]\tlr: 5.000e-03, eta: 0:39:08, time: 0.685, data_time: 0.019, memory: 5681, s0.loss_cls: 0.1376, s0.loss_bbox: 0.2198, sr0.loss_cls: 0.1067, sr0.loss_bbox: 0.2376, loss: 0.7016, grad_norm: 4.0419\r\n",
      "2025-03-18 05:49:23,273 - mmrotate - INFO - Epoch [7][300/928]\tlr: 5.000e-03, eta: 0:38:02, time: 0.684, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1346, s0.loss_bbox: 0.2294, sr0.loss_cls: 0.1020, sr0.loss_bbox: 0.2386, loss: 0.7046, grad_norm: 4.1978\r\n",
      "2025-03-18 05:50:31,860 - mmrotate - INFO - Epoch [7][400/928]\tlr: 5.000e-03, eta: 0:36:57, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1607, s0.loss_bbox: 0.2615, sr0.loss_cls: 0.1255, sr0.loss_bbox: 0.2735, loss: 0.8212, grad_norm: 4.7138\r\n",
      "2025-03-18 05:51:40,406 - mmrotate - INFO - Epoch [7][500/928]\tlr: 5.000e-03, eta: 0:35:50, time: 0.685, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1426, s0.loss_bbox: 0.2200, sr0.loss_cls: 0.1148, sr0.loss_bbox: 0.2471, loss: 0.7246, grad_norm: 3.9743\r\n",
      "2025-03-18 05:52:48,907 - mmrotate - INFO - Epoch [7][600/928]\tlr: 5.000e-03, eta: 0:34:44, time: 0.685, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1908, s0.loss_bbox: 0.2588, sr0.loss_cls: 0.1339, sr0.loss_bbox: 0.2723, loss: 0.8557, grad_norm: 4.6869\r\n",
      "2025-03-18 05:53:57,433 - mmrotate - INFO - Epoch [7][700/928]\tlr: 5.000e-03, eta: 0:33:38, time: 0.685, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1439, s0.loss_bbox: 0.2375, sr0.loss_cls: 0.1122, sr0.loss_bbox: 0.2596, loss: 0.7532, grad_norm: 4.2072\r\n",
      "2025-03-18 05:55:05,924 - mmrotate - INFO - Epoch [7][800/928]\tlr: 5.000e-03, eta: 0:32:32, time: 0.685, data_time: 0.021, memory: 5681, s0.loss_cls: 0.1280, s0.loss_bbox: 0.2221, sr0.loss_cls: 0.1032, sr0.loss_bbox: 0.2603, loss: 0.7137, grad_norm: 3.9236\r\n",
      "2025-03-18 05:56:14,553 - mmrotate - INFO - Epoch [7][900/928]\tlr: 5.000e-03, eta: 0:31:25, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1283, s0.loss_bbox: 0.1930, sr0.loss_cls: 0.0968, sr0.loss_bbox: 0.2340, loss: 0.6521, grad_norm: 3.5787\r\n",
      "2025-03-18 05:56:33,828 - mmrotate - INFO - Saving checkpoint at 7 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 11.5 task/s, elapsed: 40s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 05:57:22,119 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 7105 | 0.659  | 0.581 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.581 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 05:57:22,190 - mmrotate - INFO - Exp name: r3det_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 05:57:22,191 - mmrotate - INFO - Epoch(val) [7][464]\tmAP: 0.5812\r\n",
      "2025-03-18 05:58:33,045 - mmrotate - INFO - Epoch [8][100/928]\tlr: 5.000e-03, eta: 0:29:53, time: 0.708, data_time: 0.044, memory: 5681, s0.loss_cls: 0.1230, s0.loss_bbox: 0.2098, sr0.loss_cls: 0.0971, sr0.loss_bbox: 0.2754, loss: 0.7053, grad_norm: 3.8588\r\n",
      "2025-03-18 05:59:41,497 - mmrotate - INFO - Epoch [8][200/928]\tlr: 5.000e-03, eta: 0:28:47, time: 0.685, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1498, s0.loss_bbox: 0.2290, sr0.loss_cls: 0.1051, sr0.loss_bbox: 0.2700, loss: 0.7539, grad_norm: 3.9324\r\n",
      "2025-03-18 06:00:49,912 - mmrotate - INFO - Epoch [8][300/928]\tlr: 5.000e-03, eta: 0:27:41, time: 0.684, data_time: 0.019, memory: 5681, s0.loss_cls: 0.1407, s0.loss_bbox: 0.1925, sr0.loss_cls: 0.0977, sr0.loss_bbox: 0.2272, loss: 0.6581, grad_norm: 3.9897\r\n",
      "2025-03-18 06:01:58,562 - mmrotate - INFO - Epoch [8][400/928]\tlr: 5.000e-03, eta: 0:26:35, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1249, s0.loss_bbox: 0.1845, sr0.loss_cls: 0.0976, sr0.loss_bbox: 0.2220, loss: 0.6289, grad_norm: 3.7310\r\n",
      "2025-03-18 06:03:07,164 - mmrotate - INFO - Epoch [8][500/928]\tlr: 5.000e-03, eta: 0:25:28, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1305, s0.loss_bbox: 0.1905, sr0.loss_cls: 0.0962, sr0.loss_bbox: 0.2437, loss: 0.6608, grad_norm: 3.7297\r\n",
      "2025-03-18 06:04:15,650 - mmrotate - INFO - Epoch [8][600/928]\tlr: 5.000e-03, eta: 0:24:22, time: 0.685, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1349, s0.loss_bbox: 0.2258, sr0.loss_cls: 0.1008, sr0.loss_bbox: 0.2608, loss: 0.7223, grad_norm: 4.3916\r\n",
      "2025-03-18 06:05:24,170 - mmrotate - INFO - Epoch [8][700/928]\tlr: 5.000e-03, eta: 0:23:15, time: 0.685, data_time: 0.020, memory: 5681, s0.loss_cls: 0.1380, s0.loss_bbox: 0.2422, sr0.loss_cls: 0.1052, sr0.loss_bbox: 0.2688, loss: 0.7542, grad_norm: 4.1804\r\n",
      "2025-03-18 06:06:32,411 - mmrotate - INFO - Epoch [8][800/928]\tlr: 5.000e-03, eta: 0:22:09, time: 0.682, data_time: 0.019, memory: 5681, s0.loss_cls: 0.1182, s0.loss_bbox: 0.2036, sr0.loss_cls: 0.0936, sr0.loss_bbox: 0.2467, loss: 0.6621, grad_norm: 3.6725\r\n",
      "2025-03-18 06:07:41,035 - mmrotate - INFO - Epoch [8][900/928]\tlr: 5.000e-03, eta: 0:21:02, time: 0.686, data_time: 0.021, memory: 5681, s0.loss_cls: 0.1317, s0.loss_bbox: 0.1981, sr0.loss_cls: 0.0994, sr0.loss_bbox: 0.2229, loss: 0.6520, grad_norm: 4.1677\r\n",
      "2025-03-18 06:08:00,244 - mmrotate - INFO - Saving checkpoint at 8 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 11.6 task/s, elapsed: 40s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 06:08:48,647 - mmrotate - INFO - \r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "| class | gts  | dets  | recall | ap    |\r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "| ship  | 2147 | 10115 | 0.688  | 0.598 |\r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "| mAP   |      |       |        | 0.598 |\r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "2025-03-18 06:08:48,720 - mmrotate - INFO - Exp name: r3det_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 06:08:48,720 - mmrotate - INFO - Epoch(val) [8][464]\tmAP: 0.5977\r\n",
      "2025-03-18 06:09:59,625 - mmrotate - INFO - Epoch [9][100/928]\tlr: 5.000e-04, eta: 0:19:33, time: 0.709, data_time: 0.043, memory: 5681, s0.loss_cls: 0.1234, s0.loss_bbox: 0.1938, sr0.loss_cls: 0.0967, sr0.loss_bbox: 0.2221, loss: 0.6360, grad_norm: 3.6364\r\n",
      "2025-03-18 06:11:07,931 - mmrotate - INFO - Epoch [9][200/928]\tlr: 5.000e-04, eta: 0:18:26, time: 0.683, data_time: 0.019, memory: 5681, s0.loss_cls: 0.0999, s0.loss_bbox: 0.1766, sr0.loss_cls: 0.0777, sr0.loss_bbox: 0.1971, loss: 0.5513, grad_norm: 3.1900\r\n",
      "2025-03-18 06:12:16,366 - mmrotate - INFO - Epoch [9][300/928]\tlr: 5.000e-04, eta: 0:17:20, time: 0.684, data_time: 0.019, memory: 5681, s0.loss_cls: 0.1026, s0.loss_bbox: 0.1547, sr0.loss_cls: 0.0746, sr0.loss_bbox: 0.1908, loss: 0.5228, grad_norm: 3.1016\r\n",
      "2025-03-18 06:13:24,791 - mmrotate - INFO - Epoch [9][400/928]\tlr: 5.000e-04, eta: 0:16:13, time: 0.684, data_time: 0.019, memory: 5681, s0.loss_cls: 0.0993, s0.loss_bbox: 0.1506, sr0.loss_cls: 0.0743, sr0.loss_bbox: 0.1813, loss: 0.5054, grad_norm: 2.9741\r\n",
      "2025-03-18 06:14:33,108 - mmrotate - INFO - Epoch [9][500/928]\tlr: 5.000e-04, eta: 0:15:07, time: 0.683, data_time: 0.019, memory: 5681, s0.loss_cls: 0.0905, s0.loss_bbox: 0.1376, sr0.loss_cls: 0.0701, sr0.loss_bbox: 0.1646, loss: 0.4628, grad_norm: 2.8219\r\n",
      "2025-03-18 06:15:41,582 - mmrotate - INFO - Epoch [9][600/928]\tlr: 5.000e-04, eta: 0:14:00, time: 0.685, data_time: 0.020, memory: 5681, s0.loss_cls: 0.0919, s0.loss_bbox: 0.1234, sr0.loss_cls: 0.0721, sr0.loss_bbox: 0.1507, loss: 0.4381, grad_norm: 2.9564\r\n",
      "2025-03-18 06:16:50,185 - mmrotate - INFO - Epoch [9][700/928]\tlr: 5.000e-04, eta: 0:12:53, time: 0.686, data_time: 0.020, memory: 5681, s0.loss_cls: 0.0929, s0.loss_bbox: 0.1483, sr0.loss_cls: 0.0731, sr0.loss_bbox: 0.1764, loss: 0.4907, grad_norm: 3.2219\r\n",
      "2025-03-18 06:17:58,620 - mmrotate - INFO - Epoch [9][800/928]\tlr: 5.000e-04, eta: 0:11:47, time: 0.684, data_time: 0.020, memory: 5681, s0.loss_cls: 0.0895, s0.loss_bbox: 0.1373, sr0.loss_cls: 0.0701, sr0.loss_bbox: 0.1669, loss: 0.4639, grad_norm: 3.2096\r\n",
      "2025-03-18 06:19:07,099 - mmrotate - INFO - Epoch [9][900/928]\tlr: 5.000e-04, eta: 0:10:40, time: 0.685, data_time: 0.020, memory: 5681, s0.loss_cls: 0.0947, s0.loss_bbox: 0.1321, sr0.loss_cls: 0.0714, sr0.loss_bbox: 0.1630, loss: 0.4612, grad_norm: 3.0815\r\n",
      "2025-03-18 06:19:26,363 - mmrotate - INFO - Saving checkpoint at 9 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 11.6 task/s, elapsed: 40s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 06:20:14,711 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 8405 | 0.758  | 0.682 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.682 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 06:20:14,780 - mmrotate - INFO - Exp name: r3det_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 06:20:14,780 - mmrotate - INFO - Epoch(val) [9][464]\tmAP: 0.6821\r\n",
      "2025-03-18 06:21:25,585 - mmrotate - INFO - Epoch [10][100/928]\tlr: 5.000e-04, eta: 0:09:13, time: 0.708, data_time: 0.043, memory: 5681, s0.loss_cls: 0.0934, s0.loss_bbox: 0.1394, sr0.loss_cls: 0.0718, sr0.loss_bbox: 0.1704, loss: 0.4751, grad_norm: 3.1539\r\n",
      "2025-03-18 06:22:34,099 - mmrotate - INFO - Epoch [10][200/928]\tlr: 5.000e-04, eta: 0:08:06, time: 0.685, data_time: 0.019, memory: 5681, s0.loss_cls: 0.0924, s0.loss_bbox: 0.1414, sr0.loss_cls: 0.0717, sr0.loss_bbox: 0.1657, loss: 0.4713, grad_norm: 2.9830\r\n",
      "2025-03-18 06:23:42,537 - mmrotate - INFO - Epoch [10][300/928]\tlr: 5.000e-04, eta: 0:06:59, time: 0.684, data_time: 0.019, memory: 5681, s0.loss_cls: 0.0889, s0.loss_bbox: 0.1321, sr0.loss_cls: 0.0698, sr0.loss_bbox: 0.1701, loss: 0.4609, grad_norm: 3.2510\r\n",
      "2025-03-18 06:24:51,105 - mmrotate - INFO - Epoch [10][400/928]\tlr: 5.000e-04, eta: 0:05:52, time: 0.686, data_time: 0.019, memory: 5681, s0.loss_cls: 0.1025, s0.loss_bbox: 0.1636, sr0.loss_cls: 0.0801, sr0.loss_bbox: 0.1915, loss: 0.5377, grad_norm: 3.2312\r\n",
      "2025-03-18 06:25:59,582 - mmrotate - INFO - Epoch [10][500/928]\tlr: 5.000e-04, eta: 0:04:46, time: 0.685, data_time: 0.020, memory: 5681, s0.loss_cls: 0.0897, s0.loss_bbox: 0.1452, sr0.loss_cls: 0.0689, sr0.loss_bbox: 0.1844, loss: 0.4882, grad_norm: 3.0122\r\n",
      "2025-03-18 06:27:07,964 - mmrotate - INFO - Epoch [10][600/928]\tlr: 5.000e-04, eta: 0:03:39, time: 0.684, data_time: 0.020, memory: 5681, s0.loss_cls: 0.0834, s0.loss_bbox: 0.1216, sr0.loss_cls: 0.0613, sr0.loss_bbox: 0.1618, loss: 0.4281, grad_norm: 2.7801\r\n",
      "2025-03-18 06:28:16,400 - mmrotate - INFO - Epoch [10][700/928]\tlr: 5.000e-04, eta: 0:02:32, time: 0.684, data_time: 0.020, memory: 5681, s0.loss_cls: 0.0817, s0.loss_bbox: 0.1235, sr0.loss_cls: 0.0667, sr0.loss_bbox: 0.1705, loss: 0.4424, grad_norm: 2.8186\r\n",
      "2025-03-18 06:29:24,885 - mmrotate - INFO - Epoch [10][800/928]\tlr: 5.000e-04, eta: 0:01:25, time: 0.685, data_time: 0.019, memory: 5681, s0.loss_cls: 0.0971, s0.loss_bbox: 0.1412, sr0.loss_cls: 0.0697, sr0.loss_bbox: 0.1645, loss: 0.4726, grad_norm: 2.9520\r\n",
      "2025-03-18 06:30:33,549 - mmrotate - INFO - Epoch [10][900/928]\tlr: 5.000e-04, eta: 0:00:18, time: 0.687, data_time: 0.019, memory: 5681, s0.loss_cls: 0.0860, s0.loss_bbox: 0.1194, sr0.loss_cls: 0.0686, sr0.loss_bbox: 0.1723, loss: 0.4463, grad_norm: 3.1275\r\n",
      "2025-03-18 06:30:52,728 - mmrotate - INFO - Saving checkpoint at 10 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 11.6 task/s, elapsed: 40s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 06:31:41,109 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 8434 | 0.759  | 0.688 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.688 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 06:31:41,179 - mmrotate - INFO - Exp name: r3det_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 06:31:41,179 - mmrotate - INFO - Epoch(val) [10][464]\tmAP: 0.6881\r\n",
      "Training completed.\n"
     ]
    }
   ],
   "source": [
    "# Step 8: Train the Model\n",
    "%cd /kaggle/working/mmrotate\n",
    "!mkdir -p /kaggle/working/runs/r3det_train\n",
    "!python tools/train.py \\\n",
    "    configs/r3det/r3det_r50_fpn_1x_sccos.py \\\n",
    "    --work-dir /kaggle/working/runs/r3det_train \\\n",
    "    --gpus 1\n",
    "print(\"Training completed.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3a6a8efc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T06:31:44.328140Z",
     "iopub.status.busy": "2025-03-18T06:31:44.327782Z",
     "iopub.status.idle": "2025-03-18T06:32:41.469841Z",
     "shell.execute_reply": "2025-03-18T06:32:41.468844Z"
    },
    "papermill": {
     "duration": 57.442908,
     "end_time": "2025-03-18T06:32:41.471339",
     "exception": false,
     "start_time": "2025-03-18T06:31:44.028431",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/working/mmrotate\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "load checkpoint from local path: /kaggle/working/runs/r3det_train/latest.pth\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 11.2 task/s, elapsed: 41s, ETA:     0s\r\n",
      "writing results to /kaggle/working/runs/r3det_test_results.pkl\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 1737 | 7593 | 0.873  | 0.793 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.793 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "{'mAP': 0.792712390422821}\r\n",
      "Testing completed. Results saved to /kaggle/working/runs/r3det_test_results.pkl\n"
     ]
    }
   ],
   "source": [
    "# Step 9: Test the Model\n",
    "%cd /kaggle/working/mmrotate\n",
    "!python tools/test.py \\\n",
    "    configs/r3det/r3det_r50_fpn_1x_sccos.py \\\n",
    "    /kaggle/working/runs/r3det_train/latest.pth \\\n",
    "    --eval mAP \\\n",
    "    --out /kaggle/working/runs/r3det_test_results.pkl\n",
    "print(\"Testing completed. Results saved to /kaggle/working/runs/r3det_test_results.pkl\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 6771261,
     "sourceId": 10895847,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30919,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7386.327155,
   "end_time": "2025-03-18T06:32:42.472876",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-18T04:29:36.145721",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
