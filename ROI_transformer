{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fda7c528",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T10:41:58.317051Z",
     "iopub.status.busy": "2025-03-18T10:41:58.316696Z",
     "iopub.status.idle": "2025-03-18T10:42:02.353192Z",
     "shell.execute_reply": "2025-03-18T10:42:02.352076Z"
    },
    "papermill": {
     "duration": 4.042368,
     "end_time": "2025-03-18T10:42:02.354778",
     "exception": false,
     "start_time": "2025-03-18T10:41:58.312410",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nvcc: NVIDIA (R) Cuda compiler driver\r\n",
      "Copyright (c) 2005-2023 NVIDIA Corporation\r\n",
      "Built on Tue_Aug_15_22:02:13_PDT_2023\r\n",
      "Cuda compilation tools, release 12.2, V12.2.140\r\n",
      "Build cuda_12.2.r12.2/compiler.33191640_0\r\n",
      "PyTorch: 2.5.1+cu121 CUDA Available: True CUDA Version: 12.1\r\n"
     ]
    }
   ],
   "source": [
    "!nvcc --version\n",
    "!python -c \"import torch; print('PyTorch:', torch.__version__, 'CUDA Available:', torch.cuda.is_available(), 'CUDA Version:', torch.version.cuda)\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "32a639f1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T10:42:02.362303Z",
     "iopub.status.busy": "2025-03-18T10:42:02.362038Z",
     "iopub.status.idle": "2025-03-18T10:42:53.735901Z",
     "shell.execute_reply": "2025-03-18T10:42:53.734786Z"
    },
    "papermill": {
     "duration": 51.379796,
     "end_time": "2025-03-18T10:42:53.738070",
     "exception": false,
     "start_time": "2025-03-18T10:42:02.358274",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33mWARNING: Skipping mmcv as it is not installed.\u001b[0m\u001b[33m\r\n",
      "\u001b[0m\u001b[33mWARNING: Skipping mmcv-full as it is not installed.\u001b[0m\u001b[33m\r\n",
      "\u001b[0m\u001b[33mWARNING: Skipping mmdet as it is not installed.\u001b[0m\u001b[33m\r\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "# Step 2: Uninstall Conflicting Packages\n",
    "!pip uninstall -y mmcv mmcv-full mmdet torch torchvision tensorflow tensorboard -q"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "dac5b47e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T10:42:53.745711Z",
     "iopub.status.busy": "2025-03-18T10:42:53.745449Z",
     "iopub.status.idle": "2025-03-18T10:45:07.012301Z",
     "shell.execute_reply": "2025-03-18T10:45:07.011109Z"
    },
    "papermill": {
     "duration": 133.272624,
     "end_time": "2025-03-18T10:45:07.014156",
     "exception": false,
     "start_time": "2025-03-18T10:42:53.741532",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 GB\u001b[0m \u001b[31m435.0 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.2/24.2 MB\u001b[0m \u001b[31m66.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "pytorch-lightning 2.5.0.post0 requires torch>=2.1.0, but you have torch 1.13.1+cu116 which is incompatible.\r\n",
      "torchaudio 2.5.1+cu121 requires torch==2.5.1, but you have torch 1.13.1+cu116 which is incompatible.\r\n",
      "torchmetrics 1.6.1 requires torch>=2.0.0, but you have torch 1.13.1+cu116 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m46.0/46.0 MB\u001b[0m \u001b[31m32.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m46.8/46.8 kB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m256.2/256.2 kB\u001b[0m \u001b[31m17.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.5/1.5 MB\u001b[0m \u001b[31m52.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m259.5/259.5 kB\u001b[0m \u001b[31m16.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m57.0/57.0 kB\u001b[0m \u001b[31m4.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m50.1/50.1 kB\u001b[0m \u001b[31m3.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m89.7/89.7 kB\u001b[0m \u001b[31m6.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m449.6/449.6 kB\u001b[0m \u001b[31m26.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m52.7/52.7 kB\u001b[0m \u001b[31m3.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m311.5/311.5 kB\u001b[0m \u001b[31m22.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.8/62.8 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m239.4/239.4 kB\u001b[0m \u001b[31m15.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m506.5/506.5 kB\u001b[0m \u001b[31m32.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m77.1/77.1 kB\u001b[0m \u001b[31m5.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m144.2/144.2 kB\u001b[0m \u001b[31m11.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m953.1/953.1 kB\u001b[0m \u001b[31m45.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m99.5/99.5 kB\u001b[0m \u001b[31m7.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Building wheel for oss2 (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Building wheel for aliyun-python-sdk-core (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Building wheel for crcmod (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "dopamine-rl 4.1.0 requires tensorflow>=2.2.0, which is not installed.\r\n",
      "tensorflow-decision-forests 1.10.0 requires tensorflow==2.17.0, which is not installed.\r\n",
      "datasets 3.3.1 requires requests>=2.32.2, but you have requests 2.28.2 which is incompatible.\r\n",
      "datasets 3.3.1 requires tqdm>=4.66.3, but you have tqdm 4.65.2 which is incompatible.\r\n",
      "featuretools 1.31.0 requires tqdm>=4.66.3, but you have tqdm 4.65.2 which is incompatible.\r\n",
      "gcsfs 2024.10.0 requires fsspec==2024.10.0, but you have fsspec 2024.12.0 which is incompatible.\r\n",
      "google-cloud-bigtable 2.27.0 requires google-api-core[grpc]<3.0.0dev,>=2.16.0, but you have google-api-core 1.34.1 which is incompatible.\r\n",
      "google-colab 1.0.0 requires notebook==6.5.5, but you have notebook 6.5.4 which is incompatible.\r\n",
      "google-colab 1.0.0 requires pandas==2.2.2, but you have pandas 2.2.3 which is incompatible.\r\n",
      "google-colab 1.0.0 requires requests==2.32.3, but you have requests 2.28.2 which is incompatible.\r\n",
      "jupyterlab-server 2.27.3 requires requests>=2.31, but you have requests 2.28.2 which is incompatible.\r\n",
      "langchain 0.3.12 requires async-timeout<5.0.0,>=4.0.0; python_version < \"3.11\", but you have async-timeout 5.0.1 which is incompatible.\r\n",
      "pandas-gbq 0.25.0 requires google-api-core<3.0.0dev,>=2.10.2, but you have google-api-core 1.34.1 which is incompatible.\r\n",
      "plotnine 0.14.4 requires matplotlib>=3.8.0, but you have matplotlib 3.7.5 which is incompatible.\r\n",
      "pymc 5.19.1 requires rich>=13.7.1, but you have rich 13.4.2 which is incompatible.\r\n",
      "pytensor 2.26.4 requires filelock>=3.15, but you have filelock 3.14.0 which is incompatible.\r\n",
      "pytorch-lightning 2.5.0.post0 requires torch>=2.1.0, but you have torch 1.13.1+cu116 which is incompatible.\r\n",
      "sphinx 8.1.3 requires requests>=2.30.0, but you have requests 2.28.2 which is incompatible.\r\n",
      "torchmetrics 1.6.1 requires torch>=2.0.0, but you have torch 1.13.1+cu116 which is incompatible.\r\n",
      "yfinance 0.2.50 requires requests>=2.31, but you have requests 2.28.2 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m452.7/452.7 kB\u001b[0m \u001b[31m18.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install torch==1.13.1+cu116 torchvision==0.14.1+cu116 -f https://download.pytorch.org/whl/torch_stable.html -q\n",
    "!pip install mmcv-full==1.7.1 -f https://download.openmmlab.com/mmcv/dist/cu116/torch1.13.0/index.html -q\n",
    "!pip install mmdet==2.28.2 -q\n",
    "!pip install -U openmim -q\n",
    "!mim install \"mmengine>=0.7.0\" -q\n",
    "!pip install xmltodict -q  # For dataset conversion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8bda5f31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T10:45:07.088898Z",
     "iopub.status.busy": "2025-03-18T10:45:07.088625Z",
     "iopub.status.idle": "2025-03-18T10:45:08.589550Z",
     "shell.execute_reply": "2025-03-18T10:45:08.588504Z"
    },
    "papermill": {
     "duration": 1.53967,
     "end_time": "2025-03-18T10:45:08.591098",
     "exception": false,
     "start_time": "2025-03-18T10:45:07.051428",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nvcc: NVIDIA (R) Cuda compiler driver\r\n",
      "Copyright (c) 2005-2023 NVIDIA Corporation\r\n",
      "Built on Tue_Aug_15_22:02:13_PDT_2023\r\n",
      "Cuda compilation tools, release 12.2, V12.2.140\r\n",
      "Build cuda_12.2.r12.2/compiler.33191640_0\r\n",
      "PyTorch: 1.13.1+cu116 CUDA Available: True CUDA Version: 11.6\r\n"
     ]
    }
   ],
   "source": [
    "!nvcc --version\n",
    "!python -c \"import torch; print('PyTorch:', torch.__version__, 'CUDA Available:', torch.cuda.is_available(), 'CUDA Version:', torch.version.cuda)\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "267e3835",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T10:45:08.667156Z",
     "iopub.status.busy": "2025-03-18T10:45:08.666847Z",
     "iopub.status.idle": "2025-03-18T10:45:22.775922Z",
     "shell.execute_reply": "2025-03-18T10:45:22.775028Z"
    },
    "papermill": {
     "duration": 14.148068,
     "end_time": "2025-03-18T10:45:22.777523",
     "exception": false,
     "start_time": "2025-03-18T10:45:08.629455",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cloning into '/kaggle/working/mmrotate'...\r\n",
      "remote: Enumerating objects: 3897, done.\u001b[K\r\n",
      "remote: Counting objects: 100% (1242/1242), done.\u001b[K\r\n",
      "remote: Compressing objects: 100% (376/376), done.\u001b[K\r\n",
      "remote: Total 3897 (delta 972), reused 866 (delta 866), pack-reused 2655 (from 2)\u001b[K\r\n",
      "Receiving objects: 100% (3897/3897), 25.30 MiB | 12.48 MiB/s, done.\r\n",
      "Resolving deltas: 100% (2395/2395), done.\r\n",
      "/kaggle/working/mmrotate\n",
      "Obtaining file:///kaggle/working/mmrotate\r\n",
      "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "Collecting e2cnn (from mmrotate==0.3.4)\r\n",
      "  Downloading e2cnn-0.2.3-py3-none-any.whl.metadata (15 kB)\r\n",
      "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (3.7.5)\r\n",
      "Requirement already satisfied: mmcv-full in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (1.7.1)\r\n",
      "Requirement already satisfied: mmdet<3.0.0,>=2.25.1 in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (2.28.2)\r\n",
      "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (1.26.4)\r\n",
      "Requirement already satisfied: pycocotools in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (2.0.8)\r\n",
      "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (1.17.0)\r\n",
      "Requirement already satisfied: terminaltables in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (3.1.10)\r\n",
      "Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (1.13.1+cu116)\r\n",
      "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from mmdet<3.0.0,>=2.25.1->mmrotate==0.3.4) (1.13.1)\r\n",
      "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from e2cnn->mmrotate==0.3.4) (1.13.1)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (1.3.1)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (4.55.3)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (1.4.7)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (24.2)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (11.0.0)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (3.2.0)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (2.9.0.post0)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy->mmrotate==0.3.4) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy->mmrotate==0.3.4) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy->mmrotate==0.3.4) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy->mmrotate==0.3.4) (2025.0.1)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy->mmrotate==0.3.4) (2022.0.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy->mmrotate==0.3.4) (2.4.1)\r\n",
      "Requirement already satisfied: addict in /usr/local/lib/python3.10/dist-packages (from mmcv-full->mmrotate==0.3.4) (2.4.0)\r\n",
      "Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from mmcv-full->mmrotate==0.3.4) (6.0.2)\r\n",
      "Requirement already satisfied: yapf in /usr/local/lib/python3.10/dist-packages (from mmcv-full->mmrotate==0.3.4) (0.43.0)\r\n",
      "Requirement already satisfied: opencv-python>=3 in /usr/local/lib/python3.10/dist-packages (from mmcv-full->mmrotate==0.3.4) (4.10.0.84)\r\n",
      "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from torch->mmrotate==0.3.4) (4.12.2)\r\n",
      "Requirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy->mmrotate==0.3.4) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy->mmrotate==0.3.4) (2022.0.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy->mmrotate==0.3.4) (1.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy->mmrotate==0.3.4) (2024.2.0)\r\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->e2cnn->mmrotate==0.3.4) (1.3.0)\r\n",
      "Requirement already satisfied: platformdirs>=3.5.1 in /usr/local/lib/python3.10/dist-packages (from yapf->mmcv-full->mmrotate==0.3.4) (4.3.6)\r\n",
      "Requirement already satisfied: tomli>=2.0.1 in /usr/local/lib/python3.10/dist-packages (from yapf->mmcv-full->mmrotate==0.3.4) (2.2.1)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy->mmrotate==0.3.4) (2024.2.0)\r\n",
      "Downloading e2cnn-0.2.3-py3-none-any.whl (225 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m225.3/225.3 kB\u001b[0m \u001b[31m11.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: e2cnn, mmrotate\r\n",
      "  Running setup.py develop for mmrotate\r\n",
      "Successfully installed e2cnn-0.2.3 mmrotate-0.3.4\r\n"
     ]
    }
   ],
   "source": [
    "# Step 4: Clone and Install MMRotate 0.3.4\n",
    "!git clone https://github.com/open-mmlab/mmrotate.git /kaggle/working/mmrotate\n",
    "%cd /kaggle/working/mmrotate\n",
    "# !git checkout v0.3.4  # Ensure exact version\n",
    "!pip install -r requirements/build.txt -q\n",
    "!pip install -v -e . -q"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ee579c23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T10:45:22.854982Z",
     "iopub.status.busy": "2025-03-18T10:45:22.854696Z",
     "iopub.status.idle": "2025-03-18T10:45:24.240679Z",
     "shell.execute_reply": "2025-03-18T10:45:24.239585Z"
    },
    "papermill": {
     "duration": 1.426582,
     "end_time": "2025-03-18T10:45:24.242342",
     "exception": false,
     "start_time": "2025-03-18T10:45:22.815760",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mmcv-full                          1.7.1\r\n",
      "mmdet                              2.28.2\r\n",
      "mmengine                           0.10.7\r\n",
      "mmrotate                           0.3.4                /kaggle/working/mmrotate\r\n",
      "pytorch-ignite                     0.5.1\r\n",
      "pytorch-lightning                  2.5.0.post0\r\n",
      "torch                              1.13.1+cu116\r\n",
      "torchaudio                         2.5.1+cu121\r\n",
      "torchinfo                          1.8.0\r\n",
      "torchmetrics                       1.6.1\r\n",
      "torchsummary                       1.5.1\r\n",
      "torchtune                          0.5.0\r\n",
      "torchvision                        0.14.1+cu116\r\n"
     ]
    }
   ],
   "source": [
    "# Step 5: Verify Installations\n",
    "!pip list | grep -E 'torch|mmcv|mmdet|mmengine|mmrotate'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b651a874",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T10:45:24.319301Z",
     "iopub.status.busy": "2025-03-18T10:45:24.318939Z",
     "iopub.status.idle": "2025-03-18T10:45:24.333564Z",
     "shell.execute_reply": "2025-03-18T10:45:24.332721Z"
    },
    "papermill": {
     "duration": 0.054245,
     "end_time": "2025-03-18T10:45:24.334893",
     "exception": false,
     "start_time": "2025-03-18T10:45:24.280648",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Step 6: Prepare Dataset (SCCOS to DOTA format)\n",
    "import os\n",
    "import shutil\n",
    "import random\n",
    "import xmltodict\n",
    "import tqdm\n",
    "import math\n",
    "\n",
    "dataset_path = \"/kaggle/input/sccos-dataset/\"\n",
    "working_dir = \"/kaggle/working/sccos_dota\"\n",
    "train_images_dir = os.path.join(working_dir, \"train/images\")\n",
    "train_labels_dir = os.path.join(working_dir, \"train/labels\")\n",
    "val_images_dir = os.path.join(working_dir, \"val/images\")\n",
    "val_labels_dir = os.path.join(working_dir, \"val/labels\")\n",
    "test_images_dir = os.path.join(working_dir, \"test/images\")\n",
    "test_labels_dir = os.path.join(working_dir, \"test/labels\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9c50c531",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T10:45:24.410121Z",
     "iopub.status.busy": "2025-03-18T10:45:24.409866Z",
     "iopub.status.idle": "2025-03-18T10:47:54.260777Z",
     "shell.execute_reply": "2025-03-18T10:47:54.259769Z"
    },
    "papermill": {
     "duration": 149.890172,
     "end_time": "2025-03-18T10:47:54.262123",
     "exception": false,
     "start_time": "2025-03-18T10:45:24.371951",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset split: Train=3711, Val=464, Test=464\n",
      "Converting train set to DOTA format...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 3711/3711 [00:01<00:00, 2062.19it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Converting val set to DOTA format...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 464/464 [00:00<00:00, 2008.19it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Converting test set to DOTA format...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 464/464 [00:00<00:00, 2286.56it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset conversion to DOTA format complete.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# Clean and recreate directories\n",
    "if os.path.exists(working_dir):\n",
    "    shutil.rmtree(working_dir)\n",
    "for dir_path in [train_images_dir, train_labels_dir, val_images_dir, val_labels_dir, test_images_dir, test_labels_dir]:\n",
    "    os.makedirs(dir_path, exist_ok=True)\n",
    "\n",
    "# Source paths\n",
    "train_img_dir = os.path.join(dataset_path, \"train/images\")\n",
    "train_ann_dir = os.path.join(dataset_path, \"train/annotations\")\n",
    "test_img_dir = os.path.join(dataset_path, \"test/images\")\n",
    "test_ann_dir = os.path.join(dataset_path, \"test/annotations\")\n",
    "\n",
    "# Get all files and split\n",
    "train_files = [f for f in os.listdir(train_img_dir) if f.endswith('.png')]\n",
    "test_files = [f for f in os.listdir(test_img_dir) if f.endswith('.png')]\n",
    "random.seed(42)\n",
    "random.shuffle(train_files)\n",
    "random.shuffle(test_files)\n",
    "test_size = len(test_files)\n",
    "val_size = test_size // 2\n",
    "val_files = test_files[:val_size]\n",
    "test_files = test_files[val_size:]\n",
    "\n",
    "# Copy files\n",
    "def copy_files(file_list, src_img_dir, src_ann_dir, dst_img_dir, dst_ann_dir):\n",
    "    for img_file in file_list:\n",
    "        shutil.copy(os.path.join(src_img_dir, img_file), os.path.join(dst_img_dir, img_file))\n",
    "        ann_file = img_file.replace('.png', '.xml')\n",
    "        if os.path.exists(os.path.join(src_ann_dir, ann_file)):\n",
    "            shutil.copy(os.path.join(src_ann_dir, ann_file), os.path.join(dst_ann_dir, ann_file))\n",
    "\n",
    "copy_files(train_files, train_img_dir, train_ann_dir, train_images_dir, train_labels_dir)\n",
    "copy_files(val_files, test_img_dir, test_ann_dir, val_images_dir, val_labels_dir)\n",
    "copy_files(test_files, test_img_dir, test_ann_dir, test_images_dir, test_labels_dir)\n",
    "print(f\"Dataset split: Train={len(train_files)}, Val={len(val_files)}, Test={len(test_files)}\")\n",
    "\n",
    "# Convert XML to DOTA format\n",
    "def convert_robndbox_to_corners(cx, cy, w, h, angle):\n",
    "    angle = float(angle)\n",
    "    cx, cy, w, h = float(cx), float(cy), float(w), float(h)\n",
    "    cos_a = math.cos(angle)\n",
    "    sin_a = math.sin(angle)\n",
    "    dx, dy = w / 2, h / 2\n",
    "    corners = [(-dx, -dy), (dx, -dy), (dx, dy), (-dx, dy)]\n",
    "    rotated_corners = [(cx + x * cos_a - y * sin_a, cy + x * sin_a + y * cos_a) for x, y in corners]\n",
    "    return rotated_corners\n",
    "\n",
    "def convert_xml_to_dota(xml_path, output_label_dir):\n",
    "    with open(xml_path, 'r') as f:\n",
    "        xml_data = xmltodict.parse(f.read())\n",
    "    objects = xml_data['annotation'].get('object', [])\n",
    "    if not isinstance(objects, list):\n",
    "        objects = [objects] if objects else []\n",
    "    txt_lines = []\n",
    "    for obj in objects:\n",
    "        if obj and 'robndbox' in obj:\n",
    "            robndbox = obj['robndbox']\n",
    "            try:\n",
    "                cx, cy, w, h, angle = robndbox['cx'], robndbox['cy'], robndbox['w'], robndbox['h'], robndbox['angle']\n",
    "                (x1, y1), (x2, y2), (x3, y3), (x4, y4) = convert_robndbox_to_corners(cx, cy, w, h, angle)\n",
    "                class_name = \"ship\"\n",
    "                difficulty = 0\n",
    "                txt_lines.append(f\"{x1:.2f} {y1:.2f} {x2:.2f} {y2:.2f} {x3:.2f} {y3:.2f} {x4:.2f} {y4:.2f} {class_name} {difficulty}\")\n",
    "            except (KeyError, ValueError) as e:\n",
    "                print(f\"Invalid robndbox data in {xml_path}: {e}\")\n",
    "                continue\n",
    "    txt_filename = os.path.splitext(os.path.basename(xml_path))[0] + \".txt\"\n",
    "    txt_path = os.path.join(output_label_dir, txt_filename)\n",
    "    if txt_lines:\n",
    "        with open(txt_path, 'w') as f:\n",
    "            f.write(\"\\n\".join(txt_lines))\n",
    "    os.remove(xml_path)\n",
    "\n",
    "for split, label_dir in [(\"train\", train_labels_dir), (\"val\", val_labels_dir), (\"test\", test_labels_dir)]:\n",
    "    print(f\"Converting {split} set to DOTA format...\")\n",
    "    for xml_file in tqdm.tqdm(os.listdir(label_dir)):\n",
    "        if xml_file.endswith(\".xml\"):\n",
    "            convert_xml_to_dota(os.path.join(label_dir, xml_file), label_dir)\n",
    "print(\"Dataset conversion to DOTA format complete.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "ea4f626a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T10:47:54.341554Z",
     "iopub.status.busy": "2025-03-18T10:47:54.341256Z",
     "iopub.status.idle": "2025-03-18T10:49:38.637396Z",
     "shell.execute_reply": "2025-03-18T10:49:38.636396Z"
    },
    "papermill": {
     "duration": 104.376305,
     "end_time": "2025-03-18T10:49:38.677595",
     "exception": false,
     "start_time": "2025-03-18T10:47:54.301290",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m190.2/190.2 kB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validating training images...\n",
      "Empty file detected: /kaggle/working/sccos_dota/train/images/2284.png\n",
      "Removed bad image: /kaggle/working/sccos_dota/train/images/2284.png\n",
      "Removed corresponding label: /kaggle/working/sccos_dota/train/labels/2284.txt\n",
      "Found and handled 1 bad files.\n"
     ]
    }
   ],
   "source": [
    "# NEW: Fix YAPF compatibility issue\n",
    "!pip install yapf==0.32.0 -q  # Pin to a version compatible with MMCV 1.7.1\n",
    "\n",
    "# NEW: Validate training images\n",
    "import os\n",
    "import cv2\n",
    "import mmcv\n",
    "\n",
    "def validate_images(image_dir, label_dir):\n",
    "    bad_files = []\n",
    "    for img_file in os.listdir(image_dir):\n",
    "        if not img_file.endswith('.png'):\n",
    "            continue\n",
    "        img_path = os.path.join(image_dir, img_file)\n",
    "        # Check if file is empty\n",
    "        if os.path.getsize(img_path) == 0:\n",
    "            bad_files.append(img_file)\n",
    "            print(f\"Empty file detected: {img_path}\")\n",
    "            continue\n",
    "        # Try loading with mmcv (mimics pipeline behavior)\n",
    "        try:\n",
    "            img = mmcv.imread(img_path)\n",
    "            if img is None:\n",
    "                raise ValueError(\"Image loaded as None\")\n",
    "        except Exception as e:\n",
    "            bad_files.append(img_file)\n",
    "            print(f\"Corrupt or unreadable file: {img_path} - Error: {e}\")\n",
    "    \n",
    "    # Remove bad files and their labels\n",
    "    for bad_file in bad_files:\n",
    "        img_path = os.path.join(image_dir, bad_file)\n",
    "        label_file = bad_file.replace('.png', '.txt')\n",
    "        label_path = os.path.join(label_dir, label_file)\n",
    "        if os.path.exists(img_path):\n",
    "            os.remove(img_path)\n",
    "            print(f\"Removed bad image: {img_path}\")\n",
    "        if os.path.exists(label_path):\n",
    "            os.remove(label_path)\n",
    "            print(f\"Removed corresponding label: {label_path}\")\n",
    "    \n",
    "    if bad_files:\n",
    "        print(f\"Found and handled {len(bad_files)} bad files.\")\n",
    "    else:\n",
    "        print(\"All images validated successfully.\")\n",
    "\n",
    "# Validate training set\n",
    "train_images_dir = \"/kaggle/working/sccos_dota/train/images\"\n",
    "train_labels_dir = \"/kaggle/working/sccos_dota/train/labels\"\n",
    "print(\"Validating training images...\")\n",
    "validate_images(train_images_dir, train_labels_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c234af9d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T10:49:38.757311Z",
     "iopub.status.busy": "2025-03-18T10:49:38.756879Z",
     "iopub.status.idle": "2025-03-18T10:49:38.763838Z",
     "shell.execute_reply": "2025-03-18T10:49:38.763156Z"
    },
    "papermill": {
     "duration": 0.048215,
     "end_time": "2025-03-18T10:49:38.765100",
     "exception": false,
     "start_time": "2025-03-18T10:49:38.716885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RoI Transformer configuration saved to /kaggle/working/mmrotate/configs/roi_trans/roi_trans_r50_fpn_1x_sccos.py\n"
     ]
    }
   ],
   "source": [
    "# Step 7: Create Config File for RoI Transformer\n",
    "config_content = \"\"\"\n",
    "_base_ = [\n",
    "    '../_base_/datasets/dotav1.py', '../_base_/schedules/schedule_1x.py',\n",
    "    '../_base_/default_runtime.py'\n",
    "]\n",
    "\n",
    "angle_version = 'le90'  # Use [-90, 90) range for oriented bounding boxes\n",
    "dataset_type = 'DOTADataset'\n",
    "data_root = '/kaggle/working/sccos_dota/'\n",
    "classes = ('ship',)  # Single class\n",
    "img_norm_cfg = dict(mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\n",
    "\n",
    "train_pipeline = [\n",
    "    dict(type='LoadImageFromFile'),\n",
    "    dict(type='LoadAnnotations', with_bbox=True),\n",
    "    dict(type='RResize', img_scale=(1024, 1024)),\n",
    "    dict(\n",
    "        type='RRandomFlip',\n",
    "        flip_ratio=[0.25, 0.25, 0.25],\n",
    "        direction=['horizontal', 'vertical', 'diagonal'],\n",
    "        version=angle_version),\n",
    "    dict(type='Normalize', **img_norm_cfg),\n",
    "    dict(type='Pad', size_divisor=32),\n",
    "    dict(type='DefaultFormatBundle'),\n",
    "    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n",
    "]\n",
    "test_pipeline = [\n",
    "    dict(type='LoadImageFromFile'),\n",
    "    dict(type='MultiScaleFlipAug', img_scale=(1024, 1024), flip=False,\n",
    "         transforms=[\n",
    "             dict(type='RResize'),\n",
    "             dict(type='Normalize', **img_norm_cfg),\n",
    "             dict(type='Pad', size_divisor=32),\n",
    "             dict(type='DefaultFormatBundle'),\n",
    "             dict(type='Collect', keys=['img'])\n",
    "         ])\n",
    "]\n",
    "\n",
    "data = dict(\n",
    "    samples_per_gpu=4,\n",
    "    workers_per_gpu=2,\n",
    "    train=dict(\n",
    "        type=dataset_type,\n",
    "        ann_file=data_root + 'train/labels/',\n",
    "        img_prefix=data_root + 'train/images/',\n",
    "        pipeline=train_pipeline,\n",
    "        classes=classes,\n",
    "        version=angle_version),\n",
    "    val=dict(\n",
    "        type=dataset_type,\n",
    "        ann_file=data_root + 'val/labels/',\n",
    "        img_prefix=data_root + 'val/images/',\n",
    "        pipeline=test_pipeline,\n",
    "        classes=classes,\n",
    "        version=angle_version),\n",
    "    test=dict(\n",
    "        type=dataset_type,\n",
    "        ann_file=data_root + 'test/labels/',\n",
    "        img_prefix=data_root + 'test/images/',\n",
    "        pipeline=test_pipeline,\n",
    "        classes=classes,\n",
    "        version=angle_version))\n",
    "\n",
    "evaluation = dict(interval=1, metric='mAP')\n",
    "optimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0001)\n",
    "optimizer_config = dict(grad_clip=None)\n",
    "lr_config = dict(\n",
    "    policy='step',\n",
    "    warmup='linear',\n",
    "    warmup_iters=500,\n",
    "    warmup_ratio=0.001,\n",
    "    step=[8, 11])\n",
    "runner = dict(type='EpochBasedRunner', max_epochs=10)\n",
    "checkpoint_config = dict(interval=1)\n",
    "log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\n",
    "\n",
    "model = dict(\n",
    "    type='RoITransformer',\n",
    "    backbone=dict(\n",
    "        type='ResNet',\n",
    "        depth=50,\n",
    "        num_stages=4,\n",
    "        out_indices=(0, 1, 2, 3),\n",
    "        frozen_stages=1,\n",
    "        norm_cfg=dict(type='BN', requires_grad=True),\n",
    "        norm_eval=True,\n",
    "        style='pytorch',\n",
    "        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n",
    "    neck=dict(\n",
    "        type='FPN',\n",
    "        in_channels=[256, 512, 1024, 2048],\n",
    "        out_channels=256,\n",
    "        num_outs=5),\n",
    "    rpn_head=dict(\n",
    "        type='RotatedRPNHead',\n",
    "        in_channels=256,\n",
    "        feat_channels=256,\n",
    "        version=angle_version,\n",
    "        anchor_generator=dict(\n",
    "            type='AnchorGenerator',\n",
    "            scales=[8],\n",
    "            ratios=[0.5, 1.0, 2.0],\n",
    "            strides=[4, 8, 16, 32, 64]),\n",
    "        bbox_coder=dict(\n",
    "            type='DeltaXYWHBBoxCoder',\n",
    "            target_means=[0.0, 0.0, 0.0, 0.0],\n",
    "            target_stds=[1.0, 1.0, 1.0, 1.0]),\n",
    "        loss_cls=dict(type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n",
    "        loss_bbox=dict(type='SmoothL1Loss', beta=1.0 / 9.0, loss_weight=1.0)),\n",
    "    roi_head=dict(\n",
    "        type='RoITransRoIHead',\n",
    "        version=angle_version,\n",
    "        num_stages=2,\n",
    "        stage_loss_weights=[1, 1],\n",
    "        bbox_roi_extractor=[\n",
    "            dict(\n",
    "                type='SingleRoIExtractor',\n",
    "                roi_layer=dict(\n",
    "                    type='RoIAlign', output_size=7, sampling_ratio=0),\n",
    "                out_channels=256,\n",
    "                featmap_strides=[4, 8, 16, 32]),\n",
    "            dict(\n",
    "                type='RotatedSingleRoIExtractor',\n",
    "                roi_layer=dict(\n",
    "                    type='RoIAlignRotated',\n",
    "                    out_size=7,\n",
    "                    sample_num=2,\n",
    "                    clockwise=True),\n",
    "                out_channels=256,\n",
    "                featmap_strides=[4, 8, 16, 32]),\n",
    "        ],\n",
    "        bbox_head=[\n",
    "            dict(\n",
    "                type='RotatedShared2FCBBoxHead',\n",
    "                in_channels=256,\n",
    "                fc_out_channels=1024,\n",
    "                roi_feat_size=7,\n",
    "                num_classes=1,  # Single class: ship\n",
    "                bbox_coder=dict(\n",
    "                    type='DeltaXYWHAHBBoxCoder',\n",
    "                    angle_range=angle_version,\n",
    "                    norm_factor=2,\n",
    "                    edge_swap=True,\n",
    "                    target_means=[0.0, 0.0, 0.0, 0.0, 0.0],\n",
    "                    target_stds=[0.1, 0.1, 0.2, 0.2, 1]),\n",
    "                reg_class_agnostic=True,\n",
    "                loss_cls=dict(type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n",
    "                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0)),\n",
    "            dict(\n",
    "                type='RotatedShared2FCBBoxHead',\n",
    "                in_channels=256,\n",
    "                fc_out_channels=1024,\n",
    "                roi_feat_size=7,\n",
    "                num_classes=1,  # Single class: ship\n",
    "                bbox_coder=dict(\n",
    "                    type='DeltaXYWHAOBBoxCoder',\n",
    "                    angle_range=angle_version,\n",
    "                    norm_factor=None,\n",
    "                    edge_swap=True,\n",
    "                    proj_xy=True,\n",
    "                    target_means=[0.0, 0.0, 0.0, 0.0, 0.0],\n",
    "                    target_stds=[0.05, 0.05, 0.1, 0.1, 0.5]),\n",
    "                reg_class_agnostic=False,\n",
    "                loss_cls=dict(type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n",
    "                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n",
    "        ]),\n",
    "    train_cfg=dict(\n",
    "        rpn=dict(\n",
    "            assigner=dict(\n",
    "                type='MaxIoUAssigner',\n",
    "                pos_iou_thr=0.7,\n",
    "                neg_iou_thr=0.3,\n",
    "                min_pos_iou=0.3,\n",
    "                match_low_quality=True,\n",
    "                ignore_iof_thr=-1),\n",
    "            sampler=dict(\n",
    "                type='RandomSampler',\n",
    "                num=256,\n",
    "                pos_fraction=0.5,\n",
    "                neg_pos_ub=-1,\n",
    "                add_gt_as_proposals=False),\n",
    "            allowed_border=0,\n",
    "            pos_weight=-1,\n",
    "            debug=False),\n",
    "        rpn_proposal=dict(\n",
    "            nms_pre=2000,\n",
    "            max_per_img=2000,\n",
    "            nms=dict(type='nms', iou_threshold=0.7),\n",
    "            min_bbox_size=0),\n",
    "        rcnn=[\n",
    "            dict(\n",
    "                assigner=dict(\n",
    "                    type='MaxIoUAssigner',\n",
    "                    pos_iou_thr=0.5,\n",
    "                    neg_iou_thr=0.5,\n",
    "                    min_pos_iou=0.5,\n",
    "                    match_low_quality=False,\n",
    "                    ignore_iof_thr=-1,\n",
    "                    iou_calculator=dict(type='BboxOverlaps2D')),\n",
    "                sampler=dict(\n",
    "                    type='RandomSampler',\n",
    "                    num=512,\n",
    "                    pos_fraction=0.25,\n",
    "                    neg_pos_ub=-1,\n",
    "                    add_gt_as_proposals=True),\n",
    "                pos_weight=-1,\n",
    "                debug=False),\n",
    "            dict(\n",
    "                assigner=dict(\n",
    "                    type='MaxIoUAssigner',\n",
    "                    pos_iou_thr=0.5,\n",
    "                    neg_iou_thr=0.5,\n",
    "                    min_pos_iou=0.5,\n",
    "                    match_low_quality=False,\n",
    "                    ignore_iof_thr=-1,\n",
    "                    iou_calculator=dict(type='RBboxOverlaps2D')),\n",
    "                sampler=dict(\n",
    "                    type='RRandomSampler',\n",
    "                    num=512,\n",
    "                    pos_fraction=0.25,\n",
    "                    neg_pos_ub=-1,\n",
    "                    add_gt_as_proposals=True),\n",
    "                pos_weight=-1,\n",
    "                debug=False)\n",
    "        ]),\n",
    "    test_cfg=dict(\n",
    "        rpn=dict(\n",
    "            nms_pre=2000,\n",
    "            max_per_img=2000,\n",
    "            nms=dict(type='nms', iou_threshold=0.7),\n",
    "            min_bbox_size=0),\n",
    "        rcnn=dict(\n",
    "            nms_pre=2000,\n",
    "            min_bbox_size=0,\n",
    "            score_thr=0.05,\n",
    "            nms=dict(type=angle_version, iou_thr=0.1),\n",
    "            max_per_img=2000))\n",
    ")\n",
    "\"\"\"\n",
    "\n",
    "config_path = \"/kaggle/working/mmrotate/configs/roi_trans/roi_trans_r50_fpn_1x_sccos.py\"\n",
    "with open(config_path, 'w') as f:\n",
    "    f.write(config_content)\n",
    "print(f\"RoI Transformer configuration saved to {config_path}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "899d0080",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T10:49:38.843750Z",
     "iopub.status.busy": "2025-03-18T10:49:38.843531Z",
     "iopub.status.idle": "2025-03-18T12:49:10.190078Z",
     "shell.execute_reply": "2025-03-18T12:49:10.188942Z"
    },
    "papermill": {
     "duration": 7171.387603,
     "end_time": "2025-03-18T12:49:10.191801",
     "exception": false,
     "start_time": "2025-03-18T10:49:38.804198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/working/mmrotate\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/kaggle/working/mmrotate/mmrotate/utils/setup_env.py:38: UserWarning: Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.\r\n",
      "  warnings.warn(\r\n",
      "/kaggle/working/mmrotate/mmrotate/utils/setup_env.py:48: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.\r\n",
      "  warnings.warn(\r\n",
      "2025-03-18 10:49:46,627 - mmrotate - INFO - Environment info:\r\n",
      "------------------------------------------------------------\r\n",
      "sys.platform: linux\r\n",
      "Python: 3.10.12 (main, Nov  6 2024, 20:22:13) [GCC 11.4.0]\r\n",
      "CUDA available: True\r\n",
      "GPU 0: Tesla P100-PCIE-16GB\r\n",
      "CUDA_HOME: /usr/local/cuda\r\n",
      "NVCC: Cuda compilation tools, release 12.2, V12.2.140\r\n",
      "GCC: x86_64-linux-gnu-gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\r\n",
      "PyTorch: 1.13.1+cu116\r\n",
      "PyTorch compiling details: PyTorch built with:\r\n",
      "  - GCC 9.3\r\n",
      "  - C++ Version: 201402\r\n",
      "  - Intel(R) oneAPI Math Kernel Library Version 2025.0.1-Product Build 20241031 for Intel(R) 64 architecture applications\r\n",
      "  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\r\n",
      "  - OpenMP 201511 (a.k.a. OpenMP 4.5)\r\n",
      "  - LAPACK is enabled (usually provided by MKL)\r\n",
      "  - NNPACK is enabled\r\n",
      "  - CPU capability usage: AVX2\r\n",
      "  - CUDA Runtime 11.6\r\n",
      "  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\r\n",
      "  - CuDNN 8.3.2  (built against CUDA 11.5)\r\n",
      "  - Magma 2.6.1\r\n",
      "  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \r\n",
      "\r\n",
      "TorchVision: 0.14.1+cu116\r\n",
      "OpenCV: 4.10.0\r\n",
      "MMCV: 1.7.1\r\n",
      "MMCV Compiler: GCC 9.3\r\n",
      "MMCV CUDA Compiler: 11.6\r\n",
      "MMRotate: 0.3.4+b030f38\r\n",
      "------------------------------------------------------------\r\n",
      "\r\n",
      "2025-03-18 10:49:46,871 - mmrotate - INFO - Distributed training: False\r\n",
      "2025-03-18 10:49:47,241 - mmrotate - INFO - Config:\r\n",
      "dataset_type = 'DOTADataset'\r\n",
      "data_root = '/kaggle/working/sccos_dota/'\r\n",
      "img_norm_cfg = dict(\r\n",
      "    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\r\n",
      "train_pipeline = [\r\n",
      "    dict(type='LoadImageFromFile'),\r\n",
      "    dict(type='LoadAnnotations', with_bbox=True),\r\n",
      "    dict(type='RResize', img_scale=(1024, 1024)),\r\n",
      "    dict(\r\n",
      "        type='RRandomFlip',\r\n",
      "        flip_ratio=[0.25, 0.25, 0.25],\r\n",
      "        direction=['horizontal', 'vertical', 'diagonal'],\r\n",
      "        version='le90'),\r\n",
      "    dict(\r\n",
      "        type='Normalize',\r\n",
      "        mean=[123.675, 116.28, 103.53],\r\n",
      "        std=[58.395, 57.12, 57.375],\r\n",
      "        to_rgb=True),\r\n",
      "    dict(type='Pad', size_divisor=32),\r\n",
      "    dict(type='DefaultFormatBundle'),\r\n",
      "    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\r\n",
      "]\r\n",
      "test_pipeline = [\r\n",
      "    dict(type='LoadImageFromFile'),\r\n",
      "    dict(\r\n",
      "        type='MultiScaleFlipAug',\r\n",
      "        img_scale=(1024, 1024),\r\n",
      "        flip=False,\r\n",
      "        transforms=[\r\n",
      "            dict(type='RResize'),\r\n",
      "            dict(\r\n",
      "                type='Normalize',\r\n",
      "                mean=[123.675, 116.28, 103.53],\r\n",
      "                std=[58.395, 57.12, 57.375],\r\n",
      "                to_rgb=True),\r\n",
      "            dict(type='Pad', size_divisor=32),\r\n",
      "            dict(type='DefaultFormatBundle'),\r\n",
      "            dict(type='Collect', keys=['img'])\r\n",
      "        ])\r\n",
      "]\r\n",
      "data = dict(\r\n",
      "    samples_per_gpu=4,\r\n",
      "    workers_per_gpu=2,\r\n",
      "    train=dict(\r\n",
      "        type='DOTADataset',\r\n",
      "        ann_file='/kaggle/working/sccos_dota/train/labels/',\r\n",
      "        img_prefix='/kaggle/working/sccos_dota/train/images/',\r\n",
      "        pipeline=[\r\n",
      "            dict(type='LoadImageFromFile'),\r\n",
      "            dict(type='LoadAnnotations', with_bbox=True),\r\n",
      "            dict(type='RResize', img_scale=(1024, 1024)),\r\n",
      "            dict(\r\n",
      "                type='RRandomFlip',\r\n",
      "                flip_ratio=[0.25, 0.25, 0.25],\r\n",
      "                direction=['horizontal', 'vertical', 'diagonal'],\r\n",
      "                version='le90'),\r\n",
      "            dict(\r\n",
      "                type='Normalize',\r\n",
      "                mean=[123.675, 116.28, 103.53],\r\n",
      "                std=[58.395, 57.12, 57.375],\r\n",
      "                to_rgb=True),\r\n",
      "            dict(type='Pad', size_divisor=32),\r\n",
      "            dict(type='DefaultFormatBundle'),\r\n",
      "            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\r\n",
      "        ],\r\n",
      "        classes=('ship', ),\r\n",
      "        version='le90'),\r\n",
      "    val=dict(\r\n",
      "        type='DOTADataset',\r\n",
      "        ann_file='/kaggle/working/sccos_dota/val/labels/',\r\n",
      "        img_prefix='/kaggle/working/sccos_dota/val/images/',\r\n",
      "        pipeline=[\r\n",
      "            dict(type='LoadImageFromFile'),\r\n",
      "            dict(\r\n",
      "                type='MultiScaleFlipAug',\r\n",
      "                img_scale=(1024, 1024),\r\n",
      "                flip=False,\r\n",
      "                transforms=[\r\n",
      "                    dict(type='RResize'),\r\n",
      "                    dict(\r\n",
      "                        type='Normalize',\r\n",
      "                        mean=[123.675, 116.28, 103.53],\r\n",
      "                        std=[58.395, 57.12, 57.375],\r\n",
      "                        to_rgb=True),\r\n",
      "                    dict(type='Pad', size_divisor=32),\r\n",
      "                    dict(type='DefaultFormatBundle'),\r\n",
      "                    dict(type='Collect', keys=['img'])\r\n",
      "                ])\r\n",
      "        ],\r\n",
      "        classes=('ship', ),\r\n",
      "        version='le90'),\r\n",
      "    test=dict(\r\n",
      "        type='DOTADataset',\r\n",
      "        ann_file='/kaggle/working/sccos_dota/test/labels/',\r\n",
      "        img_prefix='/kaggle/working/sccos_dota/test/images/',\r\n",
      "        pipeline=[\r\n",
      "            dict(type='LoadImageFromFile'),\r\n",
      "            dict(\r\n",
      "                type='MultiScaleFlipAug',\r\n",
      "                img_scale=(1024, 1024),\r\n",
      "                flip=False,\r\n",
      "                transforms=[\r\n",
      "                    dict(type='RResize'),\r\n",
      "                    dict(\r\n",
      "                        type='Normalize',\r\n",
      "                        mean=[123.675, 116.28, 103.53],\r\n",
      "                        std=[58.395, 57.12, 57.375],\r\n",
      "                        to_rgb=True),\r\n",
      "                    dict(type='Pad', size_divisor=32),\r\n",
      "                    dict(type='DefaultFormatBundle'),\r\n",
      "                    dict(type='Collect', keys=['img'])\r\n",
      "                ])\r\n",
      "        ],\r\n",
      "        classes=('ship', ),\r\n",
      "        version='le90'))\r\n",
      "evaluation = dict(interval=1, metric='mAP')\r\n",
      "optimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0001)\r\n",
      "optimizer_config = dict(grad_clip=None)\r\n",
      "lr_config = dict(\r\n",
      "    policy='step',\r\n",
      "    warmup='linear',\r\n",
      "    warmup_iters=500,\r\n",
      "    warmup_ratio=0.001,\r\n",
      "    step=[8, 11])\r\n",
      "runner = dict(type='EpochBasedRunner', max_epochs=10)\r\n",
      "checkpoint_config = dict(interval=1)\r\n",
      "log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\r\n",
      "dist_params = dict(backend='nccl')\r\n",
      "log_level = 'INFO'\r\n",
      "load_from = None\r\n",
      "resume_from = None\r\n",
      "workflow = [('train', 1)]\r\n",
      "opencv_num_threads = 0\r\n",
      "mp_start_method = 'fork'\r\n",
      "angle_version = 'le90'\r\n",
      "classes = ('ship', )\r\n",
      "model = dict(\r\n",
      "    type='RoITransformer',\r\n",
      "    backbone=dict(\r\n",
      "        type='ResNet',\r\n",
      "        depth=50,\r\n",
      "        num_stages=4,\r\n",
      "        out_indices=(0, 1, 2, 3),\r\n",
      "        frozen_stages=1,\r\n",
      "        norm_cfg=dict(type='BN', requires_grad=True),\r\n",
      "        norm_eval=True,\r\n",
      "        style='pytorch',\r\n",
      "        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\r\n",
      "    neck=dict(\r\n",
      "        type='FPN',\r\n",
      "        in_channels=[256, 512, 1024, 2048],\r\n",
      "        out_channels=256,\r\n",
      "        num_outs=5),\r\n",
      "    rpn_head=dict(\r\n",
      "        type='RotatedRPNHead',\r\n",
      "        in_channels=256,\r\n",
      "        feat_channels=256,\r\n",
      "        version='le90',\r\n",
      "        anchor_generator=dict(\r\n",
      "            type='AnchorGenerator',\r\n",
      "            scales=[8],\r\n",
      "            ratios=[0.5, 1.0, 2.0],\r\n",
      "            strides=[4, 8, 16, 32, 64]),\r\n",
      "        bbox_coder=dict(\r\n",
      "            type='DeltaXYWHBBoxCoder',\r\n",
      "            target_means=[0.0, 0.0, 0.0, 0.0],\r\n",
      "            target_stds=[1.0, 1.0, 1.0, 1.0]),\r\n",
      "        loss_cls=dict(\r\n",
      "            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\r\n",
      "        loss_bbox=dict(\r\n",
      "            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\r\n",
      "    roi_head=dict(\r\n",
      "        type='RoITransRoIHead',\r\n",
      "        version='le90',\r\n",
      "        num_stages=2,\r\n",
      "        stage_loss_weights=[1, 1],\r\n",
      "        bbox_roi_extractor=[\r\n",
      "            dict(\r\n",
      "                type='SingleRoIExtractor',\r\n",
      "                roi_layer=dict(\r\n",
      "                    type='RoIAlign', output_size=7, sampling_ratio=0),\r\n",
      "                out_channels=256,\r\n",
      "                featmap_strides=[4, 8, 16, 32]),\r\n",
      "            dict(\r\n",
      "                type='RotatedSingleRoIExtractor',\r\n",
      "                roi_layer=dict(\r\n",
      "                    type='RoIAlignRotated',\r\n",
      "                    out_size=7,\r\n",
      "                    sample_num=2,\r\n",
      "                    clockwise=True),\r\n",
      "                out_channels=256,\r\n",
      "                featmap_strides=[4, 8, 16, 32])\r\n",
      "        ],\r\n",
      "        bbox_head=[\r\n",
      "            dict(\r\n",
      "                type='RotatedShared2FCBBoxHead',\r\n",
      "                in_channels=256,\r\n",
      "                fc_out_channels=1024,\r\n",
      "                roi_feat_size=7,\r\n",
      "                num_classes=1,\r\n",
      "                bbox_coder=dict(\r\n",
      "                    type='DeltaXYWHAHBBoxCoder',\r\n",
      "                    angle_range='le90',\r\n",
      "                    norm_factor=2,\r\n",
      "                    edge_swap=True,\r\n",
      "                    target_means=[0.0, 0.0, 0.0, 0.0, 0.0],\r\n",
      "                    target_stds=[0.1, 0.1, 0.2, 0.2, 1]),\r\n",
      "                reg_class_agnostic=True,\r\n",
      "                loss_cls=dict(\r\n",
      "                    type='CrossEntropyLoss',\r\n",
      "                    use_sigmoid=False,\r\n",
      "                    loss_weight=1.0),\r\n",
      "                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\r\n",
      "                               loss_weight=1.0)),\r\n",
      "            dict(\r\n",
      "                type='RotatedShared2FCBBoxHead',\r\n",
      "                in_channels=256,\r\n",
      "                fc_out_channels=1024,\r\n",
      "                roi_feat_size=7,\r\n",
      "                num_classes=1,\r\n",
      "                bbox_coder=dict(\r\n",
      "                    type='DeltaXYWHAOBBoxCoder',\r\n",
      "                    angle_range='le90',\r\n",
      "                    norm_factor=None,\r\n",
      "                    edge_swap=True,\r\n",
      "                    proj_xy=True,\r\n",
      "                    target_means=[0.0, 0.0, 0.0, 0.0, 0.0],\r\n",
      "                    target_stds=[0.05, 0.05, 0.1, 0.1, 0.5]),\r\n",
      "                reg_class_agnostic=False,\r\n",
      "                loss_cls=dict(\r\n",
      "                    type='CrossEntropyLoss',\r\n",
      "                    use_sigmoid=False,\r\n",
      "                    loss_weight=1.0),\r\n",
      "                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\r\n",
      "        ]),\r\n",
      "    train_cfg=dict(\r\n",
      "        rpn=dict(\r\n",
      "            assigner=dict(\r\n",
      "                type='MaxIoUAssigner',\r\n",
      "                pos_iou_thr=0.7,\r\n",
      "                neg_iou_thr=0.3,\r\n",
      "                min_pos_iou=0.3,\r\n",
      "                match_low_quality=True,\r\n",
      "                ignore_iof_thr=-1),\r\n",
      "            sampler=dict(\r\n",
      "                type='RandomSampler',\r\n",
      "                num=256,\r\n",
      "                pos_fraction=0.5,\r\n",
      "                neg_pos_ub=-1,\r\n",
      "                add_gt_as_proposals=False),\r\n",
      "            allowed_border=0,\r\n",
      "            pos_weight=-1,\r\n",
      "            debug=False),\r\n",
      "        rpn_proposal=dict(\r\n",
      "            nms_pre=2000,\r\n",
      "            max_per_img=2000,\r\n",
      "            nms=dict(type='nms', iou_threshold=0.7),\r\n",
      "            min_bbox_size=0),\r\n",
      "        rcnn=[\r\n",
      "            dict(\r\n",
      "                assigner=dict(\r\n",
      "                    type='MaxIoUAssigner',\r\n",
      "                    pos_iou_thr=0.5,\r\n",
      "                    neg_iou_thr=0.5,\r\n",
      "                    min_pos_iou=0.5,\r\n",
      "                    match_low_quality=False,\r\n",
      "                    ignore_iof_thr=-1,\r\n",
      "                    iou_calculator=dict(type='BboxOverlaps2D')),\r\n",
      "                sampler=dict(\r\n",
      "                    type='RandomSampler',\r\n",
      "                    num=512,\r\n",
      "                    pos_fraction=0.25,\r\n",
      "                    neg_pos_ub=-1,\r\n",
      "                    add_gt_as_proposals=True),\r\n",
      "                pos_weight=-1,\r\n",
      "                debug=False),\r\n",
      "            dict(\r\n",
      "                assigner=dict(\r\n",
      "                    type='MaxIoUAssigner',\r\n",
      "                    pos_iou_thr=0.5,\r\n",
      "                    neg_iou_thr=0.5,\r\n",
      "                    min_pos_iou=0.5,\r\n",
      "                    match_low_quality=False,\r\n",
      "                    ignore_iof_thr=-1,\r\n",
      "                    iou_calculator=dict(type='RBboxOverlaps2D')),\r\n",
      "                sampler=dict(\r\n",
      "                    type='RRandomSampler',\r\n",
      "                    num=512,\r\n",
      "                    pos_fraction=0.25,\r\n",
      "                    neg_pos_ub=-1,\r\n",
      "                    add_gt_as_proposals=True),\r\n",
      "                pos_weight=-1,\r\n",
      "                debug=False)\r\n",
      "        ]),\r\n",
      "    test_cfg=dict(\r\n",
      "        rpn=dict(\r\n",
      "            nms_pre=2000,\r\n",
      "            max_per_img=2000,\r\n",
      "            nms=dict(type='nms', iou_threshold=0.7),\r\n",
      "            min_bbox_size=0),\r\n",
      "        rcnn=dict(\r\n",
      "            nms_pre=2000,\r\n",
      "            min_bbox_size=0,\r\n",
      "            score_thr=0.05,\r\n",
      "            nms=dict(type='le90', iou_thr=0.1),\r\n",
      "            max_per_img=2000)))\r\n",
      "work_dir = '/kaggle/working/runs/roi_trans_train'\r\n",
      "auto_resume = False\r\n",
      "gpu_ids = range(0, 1)\r\n",
      "\r\n",
      "2025-03-18 10:49:47,244 - mmrotate - INFO - Set random seed to 1426441492, deterministic: False\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmdet/models/dense_heads/anchor_head.py:116: UserWarning: DeprecationWarning: `num_anchors` is deprecated, for consistency or also use `num_base_priors` instead\r\n",
      "  warnings.warn('DeprecationWarning: `num_anchors` is deprecated, '\r\n",
      "2025-03-18 10:49:47,810 - mmcv - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'torchvision://resnet50'}\r\n",
      "2025-03-18 10:49:47,811 - mmcv - INFO - load model from: torchvision://resnet50\r\n",
      "2025-03-18 10:49:47,811 - mmcv - INFO - load checkpoint from torchvision path: torchvision://resnet50\r\n",
      "Downloading: \"https://download.pytorch.org/models/resnet50-0676ba61.pth\" to /root/.cache/torch/hub/checkpoints/resnet50-0676ba61.pth\r\n",
      "100%|███████████████████████████████████████| 97.8M/97.8M [00:00<00:00, 347MB/s]\r\n",
      "2025-03-18 10:49:48,247 - mmcv - WARNING - The model and loaded state dict do not match exactly\r\n",
      "\r\n",
      "unexpected key in source state_dict: fc.weight, fc.bias\r\n",
      "\r\n",
      "2025-03-18 10:49:48,269 - mmcv - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}\r\n",
      "2025-03-18 10:49:48,293 - mmcv - INFO - initialize RotatedRPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}\r\n",
      "2025-03-18 10:49:48,298 - mmcv - INFO - initialize RotatedShared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]\r\n",
      "2025-03-18 10:49:48,484 - mmcv - INFO - initialize RotatedShared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]\r\n",
      "2025-03-18 10:49:48,677 - mmcv - INFO - \r\n",
      "backbone.conv1.weight - torch.Size([64, 3, 7, 7]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,677 - mmcv - INFO - \r\n",
      "backbone.bn1.weight - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,678 - mmcv - INFO - \r\n",
      "backbone.bn1.bias - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,678 - mmcv - INFO - \r\n",
      "backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,678 - mmcv - INFO - \r\n",
      "backbone.layer1.0.bn1.weight - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,678 - mmcv - INFO - \r\n",
      "backbone.layer1.0.bn1.bias - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,678 - mmcv - INFO - \r\n",
      "backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,678 - mmcv - INFO - \r\n",
      "backbone.layer1.0.bn2.weight - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,678 - mmcv - INFO - \r\n",
      "backbone.layer1.0.bn2.bias - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,678 - mmcv - INFO - \r\n",
      "backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,678 - mmcv - INFO - \r\n",
      "backbone.layer1.0.bn3.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,678 - mmcv - INFO - \r\n",
      "backbone.layer1.0.bn3.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,678 - mmcv - INFO - \r\n",
      "backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,679 - mmcv - INFO - \r\n",
      "backbone.layer1.0.downsample.1.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,679 - mmcv - INFO - \r\n",
      "backbone.layer1.0.downsample.1.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,679 - mmcv - INFO - \r\n",
      "backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,679 - mmcv - INFO - \r\n",
      "backbone.layer1.1.bn1.weight - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,679 - mmcv - INFO - \r\n",
      "backbone.layer1.1.bn1.bias - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,679 - mmcv - INFO - \r\n",
      "backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,679 - mmcv - INFO - \r\n",
      "backbone.layer1.1.bn2.weight - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,679 - mmcv - INFO - \r\n",
      "backbone.layer1.1.bn2.bias - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,679 - mmcv - INFO - \r\n",
      "backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,679 - mmcv - INFO - \r\n",
      "backbone.layer1.1.bn3.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,679 - mmcv - INFO - \r\n",
      "backbone.layer1.1.bn3.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,679 - mmcv - INFO - \r\n",
      "backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,680 - mmcv - INFO - \r\n",
      "backbone.layer1.2.bn1.weight - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,680 - mmcv - INFO - \r\n",
      "backbone.layer1.2.bn1.bias - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,680 - mmcv - INFO - \r\n",
      "backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,680 - mmcv - INFO - \r\n",
      "backbone.layer1.2.bn2.weight - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,680 - mmcv - INFO - \r\n",
      "backbone.layer1.2.bn2.bias - torch.Size([64]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,680 - mmcv - INFO - \r\n",
      "backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,680 - mmcv - INFO - \r\n",
      "backbone.layer1.2.bn3.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,680 - mmcv - INFO - \r\n",
      "backbone.layer1.2.bn3.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,680 - mmcv - INFO - \r\n",
      "backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,680 - mmcv - INFO - \r\n",
      "backbone.layer2.0.bn1.weight - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,680 - mmcv - INFO - \r\n",
      "backbone.layer2.0.bn1.bias - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,680 - mmcv - INFO - \r\n",
      "backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,681 - mmcv - INFO - \r\n",
      "backbone.layer2.0.bn2.weight - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,681 - mmcv - INFO - \r\n",
      "backbone.layer2.0.bn2.bias - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,681 - mmcv - INFO - \r\n",
      "backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,681 - mmcv - INFO - \r\n",
      "backbone.layer2.0.bn3.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,681 - mmcv - INFO - \r\n",
      "backbone.layer2.0.bn3.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,681 - mmcv - INFO - \r\n",
      "backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,681 - mmcv - INFO - \r\n",
      "backbone.layer2.0.downsample.1.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,681 - mmcv - INFO - \r\n",
      "backbone.layer2.0.downsample.1.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,681 - mmcv - INFO - \r\n",
      "backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,681 - mmcv - INFO - \r\n",
      "backbone.layer2.1.bn1.weight - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,681 - mmcv - INFO - \r\n",
      "backbone.layer2.1.bn1.bias - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,682 - mmcv - INFO - \r\n",
      "backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,682 - mmcv - INFO - \r\n",
      "backbone.layer2.1.bn2.weight - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,682 - mmcv - INFO - \r\n",
      "backbone.layer2.1.bn2.bias - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,682 - mmcv - INFO - \r\n",
      "backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,682 - mmcv - INFO - \r\n",
      "backbone.layer2.1.bn3.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,682 - mmcv - INFO - \r\n",
      "backbone.layer2.1.bn3.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,682 - mmcv - INFO - \r\n",
      "backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,682 - mmcv - INFO - \r\n",
      "backbone.layer2.2.bn1.weight - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,682 - mmcv - INFO - \r\n",
      "backbone.layer2.2.bn1.bias - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,682 - mmcv - INFO - \r\n",
      "backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,686 - mmcv - INFO - \r\n",
      "backbone.layer2.2.bn2.weight - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,686 - mmcv - INFO - \r\n",
      "backbone.layer2.2.bn2.bias - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,686 - mmcv - INFO - \r\n",
      "backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,686 - mmcv - INFO - \r\n",
      "backbone.layer2.2.bn3.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,686 - mmcv - INFO - \r\n",
      "backbone.layer2.2.bn3.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,686 - mmcv - INFO - \r\n",
      "backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,687 - mmcv - INFO - \r\n",
      "backbone.layer2.3.bn1.weight - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,687 - mmcv - INFO - \r\n",
      "backbone.layer2.3.bn1.bias - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,687 - mmcv - INFO - \r\n",
      "backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,687 - mmcv - INFO - \r\n",
      "backbone.layer2.3.bn2.weight - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,687 - mmcv - INFO - \r\n",
      "backbone.layer2.3.bn2.bias - torch.Size([128]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,687 - mmcv - INFO - \r\n",
      "backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,687 - mmcv - INFO - \r\n",
      "backbone.layer2.3.bn3.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,687 - mmcv - INFO - \r\n",
      "backbone.layer2.3.bn3.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,687 - mmcv - INFO - \r\n",
      "backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,687 - mmcv - INFO - \r\n",
      "backbone.layer3.0.bn1.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,688 - mmcv - INFO - \r\n",
      "backbone.layer3.0.bn1.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,688 - mmcv - INFO - \r\n",
      "backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,688 - mmcv - INFO - \r\n",
      "backbone.layer3.0.bn2.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,688 - mmcv - INFO - \r\n",
      "backbone.layer3.0.bn2.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,688 - mmcv - INFO - \r\n",
      "backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,688 - mmcv - INFO - \r\n",
      "backbone.layer3.0.bn3.weight - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,688 - mmcv - INFO - \r\n",
      "backbone.layer3.0.bn3.bias - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,688 - mmcv - INFO - \r\n",
      "backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,688 - mmcv - INFO - \r\n",
      "backbone.layer3.0.downsample.1.weight - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,688 - mmcv - INFO - \r\n",
      "backbone.layer3.0.downsample.1.bias - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,689 - mmcv - INFO - \r\n",
      "backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,689 - mmcv - INFO - \r\n",
      "backbone.layer3.1.bn1.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,689 - mmcv - INFO - \r\n",
      "backbone.layer3.1.bn1.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,689 - mmcv - INFO - \r\n",
      "backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,689 - mmcv - INFO - \r\n",
      "backbone.layer3.1.bn2.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,689 - mmcv - INFO - \r\n",
      "backbone.layer3.1.bn2.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,689 - mmcv - INFO - \r\n",
      "backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,689 - mmcv - INFO - \r\n",
      "backbone.layer3.1.bn3.weight - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,689 - mmcv - INFO - \r\n",
      "backbone.layer3.1.bn3.bias - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,689 - mmcv - INFO - \r\n",
      "backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,690 - mmcv - INFO - \r\n",
      "backbone.layer3.2.bn1.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,690 - mmcv - INFO - \r\n",
      "backbone.layer3.2.bn1.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,690 - mmcv - INFO - \r\n",
      "backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,690 - mmcv - INFO - \r\n",
      "backbone.layer3.2.bn2.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,690 - mmcv - INFO - \r\n",
      "backbone.layer3.2.bn2.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,690 - mmcv - INFO - \r\n",
      "backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,690 - mmcv - INFO - \r\n",
      "backbone.layer3.2.bn3.weight - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,690 - mmcv - INFO - \r\n",
      "backbone.layer3.2.bn3.bias - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,690 - mmcv - INFO - \r\n",
      "backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,690 - mmcv - INFO - \r\n",
      "backbone.layer3.3.bn1.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,690 - mmcv - INFO - \r\n",
      "backbone.layer3.3.bn1.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,690 - mmcv - INFO - \r\n",
      "backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,691 - mmcv - INFO - \r\n",
      "backbone.layer3.3.bn2.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,691 - mmcv - INFO - \r\n",
      "backbone.layer3.3.bn2.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,691 - mmcv - INFO - \r\n",
      "backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,691 - mmcv - INFO - \r\n",
      "backbone.layer3.3.bn3.weight - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,691 - mmcv - INFO - \r\n",
      "backbone.layer3.3.bn3.bias - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,691 - mmcv - INFO - \r\n",
      "backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,691 - mmcv - INFO - \r\n",
      "backbone.layer3.4.bn1.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,691 - mmcv - INFO - \r\n",
      "backbone.layer3.4.bn1.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,691 - mmcv - INFO - \r\n",
      "backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,691 - mmcv - INFO - \r\n",
      "backbone.layer3.4.bn2.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,691 - mmcv - INFO - \r\n",
      "backbone.layer3.4.bn2.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,691 - mmcv - INFO - \r\n",
      "backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,691 - mmcv - INFO - \r\n",
      "backbone.layer3.4.bn3.weight - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,692 - mmcv - INFO - \r\n",
      "backbone.layer3.4.bn3.bias - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,692 - mmcv - INFO - \r\n",
      "backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,692 - mmcv - INFO - \r\n",
      "backbone.layer3.5.bn1.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,692 - mmcv - INFO - \r\n",
      "backbone.layer3.5.bn1.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,692 - mmcv - INFO - \r\n",
      "backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,692 - mmcv - INFO - \r\n",
      "backbone.layer3.5.bn2.weight - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,692 - mmcv - INFO - \r\n",
      "backbone.layer3.5.bn2.bias - torch.Size([256]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,692 - mmcv - INFO - \r\n",
      "backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,692 - mmcv - INFO - \r\n",
      "backbone.layer3.5.bn3.weight - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,692 - mmcv - INFO - \r\n",
      "backbone.layer3.5.bn3.bias - torch.Size([1024]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,693 - mmcv - INFO - \r\n",
      "backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,693 - mmcv - INFO - \r\n",
      "backbone.layer4.0.bn1.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,693 - mmcv - INFO - \r\n",
      "backbone.layer4.0.bn1.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,693 - mmcv - INFO - \r\n",
      "backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,693 - mmcv - INFO - \r\n",
      "backbone.layer4.0.bn2.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,693 - mmcv - INFO - \r\n",
      "backbone.layer4.0.bn2.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,693 - mmcv - INFO - \r\n",
      "backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,693 - mmcv - INFO - \r\n",
      "backbone.layer4.0.bn3.weight - torch.Size([2048]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,693 - mmcv - INFO - \r\n",
      "backbone.layer4.0.bn3.bias - torch.Size([2048]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,693 - mmcv - INFO - \r\n",
      "backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,694 - mmcv - INFO - \r\n",
      "backbone.layer4.0.downsample.1.weight - torch.Size([2048]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,694 - mmcv - INFO - \r\n",
      "backbone.layer4.0.downsample.1.bias - torch.Size([2048]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,694 - mmcv - INFO - \r\n",
      "backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,694 - mmcv - INFO - \r\n",
      "backbone.layer4.1.bn1.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,694 - mmcv - INFO - \r\n",
      "backbone.layer4.1.bn1.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,694 - mmcv - INFO - \r\n",
      "backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,694 - mmcv - INFO - \r\n",
      "backbone.layer4.1.bn2.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,694 - mmcv - INFO - \r\n",
      "backbone.layer4.1.bn2.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,694 - mmcv - INFO - \r\n",
      "backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,694 - mmcv - INFO - \r\n",
      "backbone.layer4.1.bn3.weight - torch.Size([2048]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,694 - mmcv - INFO - \r\n",
      "backbone.layer4.1.bn3.bias - torch.Size([2048]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,694 - mmcv - INFO - \r\n",
      "backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,694 - mmcv - INFO - \r\n",
      "backbone.layer4.2.bn1.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,694 - mmcv - INFO - \r\n",
      "backbone.layer4.2.bn1.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,694 - mmcv - INFO - \r\n",
      "backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,694 - mmcv - INFO - \r\n",
      "backbone.layer4.2.bn2.weight - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,694 - mmcv - INFO - \r\n",
      "backbone.layer4.2.bn2.bias - torch.Size([512]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,694 - mmcv - INFO - \r\n",
      "backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,695 - mmcv - INFO - \r\n",
      "backbone.layer4.2.bn3.weight - torch.Size([2048]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,695 - mmcv - INFO - \r\n",
      "backbone.layer4.2.bn3.bias - torch.Size([2048]): \r\n",
      "PretrainedInit: load from torchvision://resnet50 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,695 - mmcv - INFO - \r\n",
      "neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): \r\n",
      "XavierInit: gain=1, distribution=uniform, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,695 - mmcv - INFO - \r\n",
      "neck.lateral_convs.0.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of RoITransformer  \r\n",
      " \r\n",
      "2025-03-18 10:49:48,695 - mmcv - INFO - \r\n",
      "neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): \r\n",
      "XavierInit: gain=1, distribution=uniform, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,695 - mmcv - INFO - \r\n",
      "neck.lateral_convs.1.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of RoITransformer  \r\n",
      " \r\n",
      "2025-03-18 10:49:48,695 - mmcv - INFO - \r\n",
      "neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): \r\n",
      "XavierInit: gain=1, distribution=uniform, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,695 - mmcv - INFO - \r\n",
      "neck.lateral_convs.2.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of RoITransformer  \r\n",
      " \r\n",
      "2025-03-18 10:49:48,695 - mmcv - INFO - \r\n",
      "neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): \r\n",
      "XavierInit: gain=1, distribution=uniform, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,695 - mmcv - INFO - \r\n",
      "neck.lateral_convs.3.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of RoITransformer  \r\n",
      " \r\n",
      "2025-03-18 10:49:48,695 - mmcv - INFO - \r\n",
      "neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "XavierInit: gain=1, distribution=uniform, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,695 - mmcv - INFO - \r\n",
      "neck.fpn_convs.0.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of RoITransformer  \r\n",
      " \r\n",
      "2025-03-18 10:49:48,695 - mmcv - INFO - \r\n",
      "neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "XavierInit: gain=1, distribution=uniform, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,695 - mmcv - INFO - \r\n",
      "neck.fpn_convs.1.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of RoITransformer  \r\n",
      " \r\n",
      "2025-03-18 10:49:48,695 - mmcv - INFO - \r\n",
      "neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "XavierInit: gain=1, distribution=uniform, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,695 - mmcv - INFO - \r\n",
      "neck.fpn_convs.2.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of RoITransformer  \r\n",
      " \r\n",
      "2025-03-18 10:49:48,695 - mmcv - INFO - \r\n",
      "neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "XavierInit: gain=1, distribution=uniform, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,696 - mmcv - INFO - \r\n",
      "neck.fpn_convs.3.conv.bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of RoITransformer  \r\n",
      " \r\n",
      "2025-03-18 10:49:48,696 - mmcv - INFO - \r\n",
      "rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,696 - mmcv - INFO - \r\n",
      "rpn_head.rpn_conv.bias - torch.Size([256]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,696 - mmcv - INFO - \r\n",
      "rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,696 - mmcv - INFO - \r\n",
      "rpn_head.rpn_cls.bias - torch.Size([3]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,696 - mmcv - INFO - \r\n",
      "rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,696 - mmcv - INFO - \r\n",
      "rpn_head.rpn_reg.bias - torch.Size([12]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,696 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.0.fc_cls.weight - torch.Size([2, 1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,696 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.0.fc_cls.bias - torch.Size([2]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,696 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.0.fc_reg.weight - torch.Size([5, 1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,696 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.0.fc_reg.bias - torch.Size([5]): \r\n",
      "NormalInit: mean=0, std=0.001, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,696 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,696 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,696 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,696 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,696 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.1.fc_cls.weight - torch.Size([2, 1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,697 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.1.fc_cls.bias - torch.Size([2]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,697 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.1.fc_reg.weight - torch.Size([5, 1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,697 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.1.fc_reg.bias - torch.Size([5]): \r\n",
      "NormalInit: mean=0, std=0.001, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,697 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,697 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,697 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:48,697 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 10:49:50,953 - mmrotate - INFO - Start running, host: root@19367120d7a1, work_dir: /kaggle/working/runs/roi_trans_train\r\n",
      "2025-03-18 10:49:50,953 - mmrotate - INFO - Hooks will be executed in the following order:\r\n",
      "before_run:\r\n",
      "(VERY_HIGH   ) StepLrUpdaterHook                  \r\n",
      "(NORMAL      ) CheckpointHook                     \r\n",
      "(LOW         ) EvalHook                           \r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "before_train_epoch:\r\n",
      "(VERY_HIGH   ) StepLrUpdaterHook                  \r\n",
      "(LOW         ) IterTimerHook                      \r\n",
      "(LOW         ) EvalHook                           \r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "before_train_iter:\r\n",
      "(VERY_HIGH   ) StepLrUpdaterHook                  \r\n",
      "(LOW         ) IterTimerHook                      \r\n",
      "(LOW         ) EvalHook                           \r\n",
      " -------------------- \r\n",
      "after_train_iter:\r\n",
      "(ABOVE_NORMAL) OptimizerHook                      \r\n",
      "(NORMAL      ) CheckpointHook                     \r\n",
      "(LOW         ) IterTimerHook                      \r\n",
      "(LOW         ) EvalHook                           \r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "after_train_epoch:\r\n",
      "(NORMAL      ) CheckpointHook                     \r\n",
      "(LOW         ) EvalHook                           \r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "before_val_epoch:\r\n",
      "(LOW         ) IterTimerHook                      \r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "before_val_iter:\r\n",
      "(LOW         ) IterTimerHook                      \r\n",
      " -------------------- \r\n",
      "after_val_iter:\r\n",
      "(LOW         ) IterTimerHook                      \r\n",
      " -------------------- \r\n",
      "after_val_epoch:\r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "after_run:\r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "2025-03-18 10:49:50,954 - mmrotate - INFO - workflow: [('train', 1)], max: 10 epochs\r\n",
      "2025-03-18 10:49:50,954 - mmrotate - INFO - Checkpoints will be saved to /kaggle/working/runs/roi_trans_train by HardDiskBackend.\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmdet/models/dense_heads/anchor_head.py:123: UserWarning: DeprecationWarning: anchor_generator is deprecated, please use \"prior_generator\" instead\r\n",
      "  warnings.warn('DeprecationWarning: anchor_generator is deprecated, '\r\n",
      "2025-03-18 10:51:05,716 - mmrotate - INFO - Epoch [1][100/928]\tlr: 9.940e-04, eta: 1:54:08, time: 0.746, data_time: 0.044, memory: 7055, loss_rpn_cls: 0.4615, loss_rpn_bbox: 0.0445, s0.loss_cls: 0.1647, s0.acc: 94.6655, s0.loss_bbox: 0.1446, s1.loss_cls: 0.0928, s1.acc: 97.7290, s1.loss_bbox: 0.0088, loss: 0.9169\r\n",
      "2025-03-18 10:52:18,177 - mmrotate - INFO - Epoch [1][200/928]\tlr: 1.993e-03, eta: 1:51:16, time: 0.725, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.1025, loss_rpn_bbox: 0.0302, s0.loss_cls: 0.1205, s0.acc: 96.0942, s0.loss_bbox: 0.2260, s1.loss_cls: 0.0348, s1.acc: 99.2158, s1.loss_bbox: 0.0106, loss: 0.5246\r\n",
      "2025-03-18 10:53:29,739 - mmrotate - INFO - Epoch [1][300/928]\tlr: 2.992e-03, eta: 1:49:04, time: 0.716, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0993, loss_rpn_bbox: 0.0342, s0.loss_cls: 0.1503, s0.acc: 95.2954, s0.loss_bbox: 0.2127, s1.loss_cls: 0.0501, s1.acc: 98.8872, s1.loss_bbox: 0.0219, loss: 0.5685\r\n",
      "2025-03-18 10:54:40,467 - mmrotate - INFO - Epoch [1][400/928]\tlr: 3.991e-03, eta: 1:47:03, time: 0.707, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0738, loss_rpn_bbox: 0.0327, s0.loss_cls: 0.1518, s0.acc: 94.6821, s0.loss_bbox: 0.1969, s1.loss_cls: 0.0508, s1.acc: 98.6714, s1.loss_bbox: 0.0370, loss: 0.5429\r\n",
      "2025-03-18 10:55:50,988 - mmrotate - INFO - Epoch [1][500/928]\tlr: 4.990e-03, eta: 1:45:19, time: 0.705, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0549, loss_rpn_bbox: 0.0317, s0.loss_cls: 0.1505, s0.acc: 94.7358, s0.loss_bbox: 0.1905, s1.loss_cls: 0.0448, s1.acc: 98.7500, s1.loss_bbox: 0.0437, loss: 0.5161\r\n",
      "2025-03-18 10:57:01,665 - mmrotate - INFO - Epoch [1][600/928]\tlr: 5.000e-03, eta: 1:43:48, time: 0.707, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0438, loss_rpn_bbox: 0.0310, s0.loss_cls: 0.1296, s0.acc: 95.2769, s0.loss_bbox: 0.1761, s1.loss_cls: 0.0417, s1.acc: 98.7783, s1.loss_bbox: 0.0482, loss: 0.4702\r\n",
      "2025-03-18 10:58:12,400 - mmrotate - INFO - Epoch [1][700/928]\tlr: 5.000e-03, eta: 1:42:24, time: 0.707, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0364, loss_rpn_bbox: 0.0279, s0.loss_cls: 0.1358, s0.acc: 94.9961, s0.loss_bbox: 0.2111, s1.loss_cls: 0.0381, s1.acc: 98.8286, s1.loss_bbox: 0.0480, loss: 0.4974\r\n",
      "2025-03-18 10:59:23,032 - mmrotate - INFO - Epoch [1][800/928]\tlr: 5.000e-03, eta: 1:41:02, time: 0.706, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0303, loss_rpn_bbox: 0.0282, s0.loss_cls: 0.1231, s0.acc: 95.2017, s0.loss_bbox: 0.1923, s1.loss_cls: 0.0366, s1.acc: 98.7651, s1.loss_bbox: 0.0550, loss: 0.4655\r\n",
      "2025-03-18 11:00:33,202 - mmrotate - INFO - Epoch [1][900/928]\tlr: 5.000e-03, eta: 1:39:38, time: 0.702, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0340, loss_rpn_bbox: 0.0274, s0.loss_cls: 0.1215, s0.acc: 95.3550, s0.loss_bbox: 0.1715, s1.loss_cls: 0.0409, s1.acc: 98.6250, s1.loss_bbox: 0.0589, loss: 0.4542\r\n",
      "2025-03-18 11:00:52,881 - mmrotate - INFO - Saving checkpoint at 1 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 9.6 task/s, elapsed: 48s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 11:01:49,932 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 5144 | 0.489  | 0.354 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.354 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 11:01:50,023 - mmrotate - INFO - Exp name: roi_trans_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 11:01:50,023 - mmrotate - INFO - Epoch(val) [1][464]\tmAP: 0.3542\r\n",
      "2025-03-18 11:03:03,211 - mmrotate - INFO - Epoch [2][100/928]\tlr: 5.000e-03, eta: 1:35:40, time: 0.730, data_time: 0.045, memory: 7055, loss_rpn_cls: 0.0364, loss_rpn_bbox: 0.0259, s0.loss_cls: 0.1214, s0.acc: 95.3701, s0.loss_bbox: 0.1745, s1.loss_cls: 0.0429, s1.acc: 98.6055, s1.loss_bbox: 0.0622, loss: 0.4632\r\n",
      "2025-03-18 11:04:13,938 - mmrotate - INFO - Epoch [2][200/928]\tlr: 5.000e-03, eta: 1:34:39, time: 0.707, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0263, loss_rpn_bbox: 0.0222, s0.loss_cls: 0.1137, s0.acc: 95.6201, s0.loss_bbox: 0.1684, s1.loss_cls: 0.0376, s1.acc: 98.6992, s1.loss_bbox: 0.0634, loss: 0.4317\r\n",
      "2025-03-18 11:05:24,545 - mmrotate - INFO - Epoch [2][300/928]\tlr: 5.000e-03, eta: 1:33:35, time: 0.706, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0282, loss_rpn_bbox: 0.0222, s0.loss_cls: 0.1152, s0.acc: 95.5317, s0.loss_bbox: 0.1861, s1.loss_cls: 0.0386, s1.acc: 98.6685, s1.loss_bbox: 0.0649, loss: 0.4552\r\n",
      "2025-03-18 11:06:35,338 - mmrotate - INFO - Epoch [2][400/928]\tlr: 5.000e-03, eta: 1:32:32, time: 0.708, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0255, loss_rpn_bbox: 0.0215, s0.loss_cls: 0.1120, s0.acc: 95.7568, s0.loss_bbox: 0.1494, s1.loss_cls: 0.0407, s1.acc: 98.6006, s1.loss_bbox: 0.0658, loss: 0.4148\r\n",
      "2025-03-18 11:07:46,079 - mmrotate - INFO - Epoch [2][500/928]\tlr: 5.000e-03, eta: 1:31:27, time: 0.707, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0212, loss_rpn_bbox: 0.0208, s0.loss_cls: 0.1062, s0.acc: 95.8335, s0.loss_bbox: 0.1641, s1.loss_cls: 0.0383, s1.acc: 98.6172, s1.loss_bbox: 0.0679, loss: 0.4187\r\n",
      "2025-03-18 11:08:56,783 - mmrotate - INFO - Epoch [2][600/928]\tlr: 5.000e-03, eta: 1:30:21, time: 0.707, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0277, loss_rpn_bbox: 0.0195, s0.loss_cls: 0.1131, s0.acc: 95.7202, s0.loss_bbox: 0.1509, s1.loss_cls: 0.0375, s1.acc: 98.6343, s1.loss_bbox: 0.0611, loss: 0.4099\r\n",
      "2025-03-18 11:10:07,429 - mmrotate - INFO - Epoch [2][700/928]\tlr: 5.000e-03, eta: 1:29:15, time: 0.706, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0257, loss_rpn_bbox: 0.0205, s0.loss_cls: 0.1127, s0.acc: 95.7061, s0.loss_bbox: 0.1822, s1.loss_cls: 0.0408, s1.acc: 98.5278, s1.loss_bbox: 0.0736, loss: 0.4555\r\n",
      "2025-03-18 11:11:18,137 - mmrotate - INFO - Epoch [2][800/928]\tlr: 5.000e-03, eta: 1:28:08, time: 0.707, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0207, loss_rpn_bbox: 0.0219, s0.loss_cls: 0.0966, s0.acc: 96.1519, s0.loss_bbox: 0.1391, s1.loss_cls: 0.0383, s1.acc: 98.5537, s1.loss_bbox: 0.0749, loss: 0.3915\r\n",
      "2025-03-18 11:12:28,903 - mmrotate - INFO - Epoch [2][900/928]\tlr: 5.000e-03, eta: 1:27:01, time: 0.708, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0216, loss_rpn_bbox: 0.0220, s0.loss_cls: 0.1028, s0.acc: 95.9263, s0.loss_bbox: 0.1584, s1.loss_cls: 0.0418, s1.acc: 98.4565, s1.loss_bbox: 0.0750, loss: 0.4216\r\n",
      "2025-03-18 11:12:48,916 - mmrotate - INFO - Saving checkpoint at 2 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 9.4 task/s, elapsed: 49s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 11:13:46,629 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 2942 | 0.626  | 0.559 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.559 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 11:13:46,698 - mmrotate - INFO - Exp name: roi_trans_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 11:13:46,698 - mmrotate - INFO - Epoch(val) [2][464]\tmAP: 0.5595\r\n",
      "2025-03-18 11:15:00,235 - mmrotate - INFO - Epoch [3][100/928]\tlr: 5.000e-03, eta: 1:24:30, time: 0.734, data_time: 0.044, memory: 7055, loss_rpn_cls: 0.0218, loss_rpn_bbox: 0.0217, s0.loss_cls: 0.1037, s0.acc: 95.9409, s0.loss_bbox: 0.1539, s1.loss_cls: 0.0402, s1.acc: 98.5288, s1.loss_bbox: 0.0738, loss: 0.4150\r\n",
      "2025-03-18 11:16:10,949 - mmrotate - INFO - Epoch [3][200/928]\tlr: 5.000e-03, eta: 1:23:26, time: 0.707, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0153, loss_rpn_bbox: 0.0190, s0.loss_cls: 0.0982, s0.acc: 96.1055, s0.loss_bbox: 0.1526, s1.loss_cls: 0.0389, s1.acc: 98.5425, s1.loss_bbox: 0.0768, loss: 0.4007\r\n",
      "2025-03-18 11:17:21,575 - mmrotate - INFO - Epoch [3][300/928]\tlr: 5.000e-03, eta: 1:22:21, time: 0.706, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0182, loss_rpn_bbox: 0.0188, s0.loss_cls: 0.1051, s0.acc: 95.8911, s0.loss_bbox: 0.1665, s1.loss_cls: 0.0419, s1.acc: 98.4136, s1.loss_bbox: 0.0815, loss: 0.4320\r\n",
      "2025-03-18 11:18:32,289 - mmrotate - INFO - Epoch [3][400/928]\tlr: 5.000e-03, eta: 1:21:16, time: 0.707, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0229, loss_rpn_bbox: 0.0168, s0.loss_cls: 0.0986, s0.acc: 96.2373, s0.loss_bbox: 0.1522, s1.loss_cls: 0.0394, s1.acc: 98.5732, s1.loss_bbox: 0.0702, loss: 0.4002\r\n",
      "2025-03-18 11:19:42,960 - mmrotate - INFO - Epoch [3][500/928]\tlr: 5.000e-03, eta: 1:20:10, time: 0.707, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0232, loss_rpn_bbox: 0.0223, s0.loss_cls: 0.1047, s0.acc: 95.9033, s0.loss_bbox: 0.1878, s1.loss_cls: 0.0406, s1.acc: 98.5073, s1.loss_bbox: 0.0727, loss: 0.4513\r\n",
      "2025-03-18 11:20:53,952 - mmrotate - INFO - Epoch [3][600/928]\tlr: 5.000e-03, eta: 1:19:05, time: 0.710, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0164, loss_rpn_bbox: 0.0164, s0.loss_cls: 0.0962, s0.acc: 96.2441, s0.loss_bbox: 0.1558, s1.loss_cls: 0.0377, s1.acc: 98.5410, s1.loss_bbox: 0.0747, loss: 0.3971\r\n",
      "2025-03-18 11:22:05,153 - mmrotate - INFO - Epoch [3][700/928]\tlr: 5.000e-03, eta: 1:18:00, time: 0.712, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0183, loss_rpn_bbox: 0.0176, s0.loss_cls: 0.0985, s0.acc: 96.1440, s0.loss_bbox: 0.1513, s1.loss_cls: 0.0359, s1.acc: 98.6860, s1.loss_bbox: 0.0678, loss: 0.3894\r\n",
      "2025-03-18 11:23:16,147 - mmrotate - INFO - Epoch [3][800/928]\tlr: 5.000e-03, eta: 1:16:54, time: 0.710, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0169, loss_rpn_bbox: 0.0187, s0.loss_cls: 0.0956, s0.acc: 96.2656, s0.loss_bbox: 0.1535, s1.loss_cls: 0.0377, s1.acc: 98.5645, s1.loss_bbox: 0.0756, loss: 0.3979\r\n",
      "2025-03-18 11:24:26,875 - mmrotate - INFO - Epoch [3][900/928]\tlr: 5.000e-03, eta: 1:15:46, time: 0.707, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0181, loss_rpn_bbox: 0.0169, s0.loss_cls: 0.0935, s0.acc: 96.4048, s0.loss_bbox: 0.1413, s1.loss_cls: 0.0397, s1.acc: 98.5391, s1.loss_bbox: 0.0749, loss: 0.3845\r\n",
      "2025-03-18 11:24:46,638 - mmrotate - INFO - Saving checkpoint at 3 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 9.5 task/s, elapsed: 49s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 11:25:44,293 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 2210 | 0.619  | 0.584 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.584 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 11:25:44,367 - mmrotate - INFO - Exp name: roi_trans_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 11:25:44,368 - mmrotate - INFO - Epoch(val) [3][464]\tmAP: 0.5835\r\n",
      "2025-03-18 11:26:58,116 - mmrotate - INFO - Epoch [4][100/928]\tlr: 5.000e-03, eta: 1:13:43, time: 0.736, data_time: 0.046, memory: 7055, loss_rpn_cls: 0.0161, loss_rpn_bbox: 0.0183, s0.loss_cls: 0.0892, s0.acc: 96.4878, s0.loss_bbox: 0.1362, s1.loss_cls: 0.0379, s1.acc: 98.5869, s1.loss_bbox: 0.0727, loss: 0.3704\r\n",
      "2025-03-18 11:28:08,980 - mmrotate - INFO - Epoch [4][200/928]\tlr: 5.000e-03, eta: 1:12:37, time: 0.709, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0131, loss_rpn_bbox: 0.0145, s0.loss_cls: 0.0854, s0.acc: 96.6567, s0.loss_bbox: 0.1230, s1.loss_cls: 0.0368, s1.acc: 98.5957, s1.loss_bbox: 0.0701, loss: 0.3429\r\n",
      "2025-03-18 11:29:19,304 - mmrotate - INFO - Epoch [4][300/928]\tlr: 5.000e-03, eta: 1:11:30, time: 0.703, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0160, loss_rpn_bbox: 0.0174, s0.loss_cls: 0.0848, s0.acc: 96.5713, s0.loss_bbox: 0.1149, s1.loss_cls: 0.0379, s1.acc: 98.5498, s1.loss_bbox: 0.0769, loss: 0.3480\r\n",
      "2025-03-18 11:30:30,158 - mmrotate - INFO - Epoch [4][400/928]\tlr: 5.000e-03, eta: 1:10:24, time: 0.709, data_time: 0.023, memory: 7055, loss_rpn_cls: 0.0175, loss_rpn_bbox: 0.0177, s0.loss_cls: 0.0936, s0.acc: 96.2739, s0.loss_bbox: 0.1611, s1.loss_cls: 0.0383, s1.acc: 98.5215, s1.loss_bbox: 0.0726, loss: 0.4007\r\n",
      "2025-03-18 11:31:41,249 - mmrotate - INFO - Epoch [4][500/928]\tlr: 5.000e-03, eta: 1:09:18, time: 0.711, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0140, loss_rpn_bbox: 0.0160, s0.loss_cls: 0.0865, s0.acc: 96.6201, s0.loss_bbox: 0.1406, s1.loss_cls: 0.0370, s1.acc: 98.6045, s1.loss_bbox: 0.0708, loss: 0.3648\r\n",
      "2025-03-18 11:32:51,889 - mmrotate - INFO - Epoch [4][600/928]\tlr: 5.000e-03, eta: 1:08:11, time: 0.706, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0173, loss_rpn_bbox: 0.0213, s0.loss_cls: 0.1032, s0.acc: 95.8584, s0.loss_bbox: 0.1914, s1.loss_cls: 0.0427, s1.acc: 98.3213, s1.loss_bbox: 0.0821, loss: 0.4579\r\n",
      "2025-03-18 11:34:02,495 - mmrotate - INFO - Epoch [4][700/928]\tlr: 5.000e-03, eta: 1:07:03, time: 0.706, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0159, loss_rpn_bbox: 0.0177, s0.loss_cls: 0.0894, s0.acc: 96.4453, s0.loss_bbox: 0.1238, s1.loss_cls: 0.0425, s1.acc: 98.3628, s1.loss_bbox: 0.0852, loss: 0.3744\r\n",
      "2025-03-18 11:35:13,056 - mmrotate - INFO - Epoch [4][800/928]\tlr: 5.000e-03, eta: 1:05:56, time: 0.706, data_time: 0.023, memory: 7055, loss_rpn_cls: 0.0161, loss_rpn_bbox: 0.0159, s0.loss_cls: 0.0918, s0.acc: 96.4575, s0.loss_bbox: 0.1525, s1.loss_cls: 0.0384, s1.acc: 98.5039, s1.loss_bbox: 0.0772, loss: 0.3919\r\n",
      "2025-03-18 11:36:23,432 - mmrotate - INFO - Epoch [4][900/928]\tlr: 5.000e-03, eta: 1:04:48, time: 0.704, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0120, loss_rpn_bbox: 0.0135, s0.loss_cls: 0.0887, s0.acc: 96.5527, s0.loss_bbox: 0.1199, s1.loss_cls: 0.0388, s1.acc: 98.4995, s1.loss_bbox: 0.0815, loss: 0.3544\r\n",
      "2025-03-18 11:36:43,243 - mmrotate - INFO - Saving checkpoint at 4 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 9.6 task/s, elapsed: 48s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 11:37:40,555 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 3541 | 0.728  | 0.659 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.659 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 11:37:40,628 - mmrotate - INFO - Exp name: roi_trans_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 11:37:40,629 - mmrotate - INFO - Epoch(val) [4][464]\tmAP: 0.6587\r\n",
      "2025-03-18 11:38:53,836 - mmrotate - INFO - Epoch [5][100/928]\tlr: 5.000e-03, eta: 1:02:56, time: 0.730, data_time: 0.045, memory: 7055, loss_rpn_cls: 0.0147, loss_rpn_bbox: 0.0145, s0.loss_cls: 0.0858, s0.acc: 96.5669, s0.loss_bbox: 0.1318, s1.loss_cls: 0.0392, s1.acc: 98.4961, s1.loss_bbox: 0.0788, loss: 0.3649\r\n",
      "2025-03-18 11:40:04,516 - mmrotate - INFO - Epoch [5][200/928]\tlr: 5.000e-03, eta: 1:01:49, time: 0.707, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0126, loss_rpn_bbox: 0.0143, s0.loss_cls: 0.0787, s0.acc: 96.8662, s0.loss_bbox: 0.1316, s1.loss_cls: 0.0336, s1.acc: 98.7222, s1.loss_bbox: 0.0659, loss: 0.3367\r\n",
      "2025-03-18 11:41:15,342 - mmrotate - INFO - Epoch [5][300/928]\tlr: 5.000e-03, eta: 1:00:42, time: 0.708, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0117, loss_rpn_bbox: 0.0148, s0.loss_cls: 0.0837, s0.acc: 96.6924, s0.loss_bbox: 0.1162, s1.loss_cls: 0.0400, s1.acc: 98.4897, s1.loss_bbox: 0.0784, loss: 0.3449\r\n",
      "2025-03-18 11:42:26,109 - mmrotate - INFO - Epoch [5][400/928]\tlr: 5.000e-03, eta: 0:59:35, time: 0.708, data_time: 0.023, memory: 7055, loss_rpn_cls: 0.0127, loss_rpn_bbox: 0.0146, s0.loss_cls: 0.0806, s0.acc: 96.8428, s0.loss_bbox: 0.1206, s1.loss_cls: 0.0364, s1.acc: 98.5918, s1.loss_bbox: 0.0740, loss: 0.3390\r\n",
      "2025-03-18 11:43:36,763 - mmrotate - INFO - Epoch [5][500/928]\tlr: 5.000e-03, eta: 0:58:28, time: 0.707, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0118, loss_rpn_bbox: 0.0160, s0.loss_cls: 0.0824, s0.acc: 96.6631, s0.loss_bbox: 0.1185, s1.loss_cls: 0.0382, s1.acc: 98.4624, s1.loss_bbox: 0.0810, loss: 0.3478\r\n",
      "2025-03-18 11:44:47,392 - mmrotate - INFO - Epoch [5][600/928]\tlr: 5.000e-03, eta: 0:57:20, time: 0.706, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0124, loss_rpn_bbox: 0.0173, s0.loss_cls: 0.0860, s0.acc: 96.5347, s0.loss_bbox: 0.1338, s1.loss_cls: 0.0406, s1.acc: 98.4097, s1.loss_bbox: 0.0873, loss: 0.3775\r\n",
      "2025-03-18 11:45:58,109 - mmrotate - INFO - Epoch [5][700/928]\tlr: 5.000e-03, eta: 0:56:12, time: 0.707, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0128, loss_rpn_bbox: 0.0133, s0.loss_cls: 0.0704, s0.acc: 97.2490, s0.loss_bbox: 0.0980, s1.loss_cls: 0.0343, s1.acc: 98.6528, s1.loss_bbox: 0.0728, loss: 0.3015\r\n",
      "2025-03-18 11:47:08,913 - mmrotate - INFO - Epoch [5][800/928]\tlr: 5.000e-03, eta: 0:55:05, time: 0.708, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0099, loss_rpn_bbox: 0.0132, s0.loss_cls: 0.0745, s0.acc: 97.0244, s0.loss_bbox: 0.1144, s1.loss_cls: 0.0356, s1.acc: 98.5991, s1.loss_bbox: 0.0720, loss: 0.3195\r\n",
      "2025-03-18 11:48:20,163 - mmrotate - INFO - Epoch [5][900/928]\tlr: 5.000e-03, eta: 0:53:57, time: 0.713, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0148, loss_rpn_bbox: 0.0160, s0.loss_cls: 0.0782, s0.acc: 96.8672, s0.loss_bbox: 0.1168, s1.loss_cls: 0.0384, s1.acc: 98.4668, s1.loss_bbox: 0.0797, loss: 0.3439\r\n",
      "2025-03-18 11:48:39,944 - mmrotate - INFO - Saving checkpoint at 5 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 9.6 task/s, elapsed: 49s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 11:49:36,940 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 3931 | 0.758  | 0.668 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.668 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 11:49:37,011 - mmrotate - INFO - Exp name: roi_trans_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 11:49:37,011 - mmrotate - INFO - Epoch(val) [5][464]\tmAP: 0.6679\r\n",
      "2025-03-18 11:50:50,632 - mmrotate - INFO - Epoch [6][100/928]\tlr: 5.000e-03, eta: 0:52:14, time: 0.735, data_time: 0.045, memory: 7055, loss_rpn_cls: 0.0092, loss_rpn_bbox: 0.0143, s0.loss_cls: 0.0755, s0.acc: 96.9736, s0.loss_bbox: 0.1267, s1.loss_cls: 0.0352, s1.acc: 98.6143, s1.loss_bbox: 0.0735, loss: 0.3344\r\n",
      "2025-03-18 11:52:01,478 - mmrotate - INFO - Epoch [6][200/928]\tlr: 5.000e-03, eta: 0:51:07, time: 0.708, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0093, loss_rpn_bbox: 0.0137, s0.loss_cls: 0.0727, s0.acc: 96.9883, s0.loss_bbox: 0.1070, s1.loss_cls: 0.0350, s1.acc: 98.6011, s1.loss_bbox: 0.0735, loss: 0.3112\r\n",
      "2025-03-18 11:53:12,265 - mmrotate - INFO - Epoch [6][300/928]\tlr: 5.000e-03, eta: 0:49:59, time: 0.708, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0106, loss_rpn_bbox: 0.0143, s0.loss_cls: 0.0717, s0.acc: 97.1304, s0.loss_bbox: 0.0856, s1.loss_cls: 0.0347, s1.acc: 98.6504, s1.loss_bbox: 0.0734, loss: 0.2903\r\n",
      "2025-03-18 11:54:22,851 - mmrotate - INFO - Epoch [6][400/928]\tlr: 5.000e-03, eta: 0:48:51, time: 0.706, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0132, loss_rpn_bbox: 0.0172, s0.loss_cls: 0.0852, s0.acc: 96.6006, s0.loss_bbox: 0.1404, s1.loss_cls: 0.0440, s1.acc: 98.3228, s1.loss_bbox: 0.0846, loss: 0.3847\r\n",
      "2025-03-18 11:55:33,327 - mmrotate - INFO - Epoch [6][500/928]\tlr: 5.000e-03, eta: 0:47:43, time: 0.705, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0153, loss_rpn_bbox: 0.0145, s0.loss_cls: 0.0815, s0.acc: 96.7349, s0.loss_bbox: 0.1340, s1.loss_cls: 0.0426, s1.acc: 98.3296, s1.loss_bbox: 0.0839, loss: 0.3719\r\n",
      "2025-03-18 11:56:43,913 - mmrotate - INFO - Epoch [6][600/928]\tlr: 5.000e-03, eta: 0:46:35, time: 0.706, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0099, loss_rpn_bbox: 0.0142, s0.loss_cls: 0.0773, s0.acc: 96.9468, s0.loss_bbox: 0.1068, s1.loss_cls: 0.0371, s1.acc: 98.5166, s1.loss_bbox: 0.0792, loss: 0.3245\r\n",
      "2025-03-18 11:57:55,233 - mmrotate - INFO - Epoch [6][700/928]\tlr: 5.000e-03, eta: 0:45:27, time: 0.713, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0098, loss_rpn_bbox: 0.0132, s0.loss_cls: 0.0760, s0.acc: 96.9858, s0.loss_bbox: 0.1003, s1.loss_cls: 0.0385, s1.acc: 98.5015, s1.loss_bbox: 0.0827, loss: 0.3205\r\n",
      "2025-03-18 11:59:05,603 - mmrotate - INFO - Epoch [6][800/928]\tlr: 5.000e-03, eta: 0:44:19, time: 0.704, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0108, loss_rpn_bbox: 0.0128, s0.loss_cls: 0.0754, s0.acc: 96.9727, s0.loss_bbox: 0.1030, s1.loss_cls: 0.0372, s1.acc: 98.5522, s1.loss_bbox: 0.0764, loss: 0.3156\r\n",
      "2025-03-18 12:00:16,715 - mmrotate - INFO - Epoch [6][900/928]\tlr: 5.000e-03, eta: 0:43:11, time: 0.711, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0104, loss_rpn_bbox: 0.0137, s0.loss_cls: 0.0734, s0.acc: 97.0967, s0.loss_bbox: 0.1332, s1.loss_cls: 0.0368, s1.acc: 98.5386, s1.loss_bbox: 0.0765, loss: 0.3440\r\n",
      "2025-03-18 12:00:36,343 - mmrotate - INFO - Saving checkpoint at 6 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 9.6 task/s, elapsed: 48s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 12:01:33,259 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 4045 | 0.754  | 0.669 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.669 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 12:01:33,362 - mmrotate - INFO - Exp name: roi_trans_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 12:01:33,362 - mmrotate - INFO - Epoch(val) [6][464]\tmAP: 0.6688\r\n",
      "2025-03-18 12:02:46,767 - mmrotate - INFO - Epoch [7][100/928]\tlr: 5.000e-03, eta: 0:41:32, time: 0.732, data_time: 0.045, memory: 7055, loss_rpn_cls: 0.0087, loss_rpn_bbox: 0.0135, s0.loss_cls: 0.0789, s0.acc: 96.8447, s0.loss_bbox: 0.1095, s1.loss_cls: 0.0397, s1.acc: 98.4346, s1.loss_bbox: 0.0814, loss: 0.3318\r\n",
      "2025-03-18 12:03:57,161 - mmrotate - INFO - Epoch [7][200/928]\tlr: 5.000e-03, eta: 0:40:24, time: 0.704, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0110, loss_rpn_bbox: 0.0150, s0.loss_cls: 0.0804, s0.acc: 96.7769, s0.loss_bbox: 0.1013, s1.loss_cls: 0.0401, s1.acc: 98.3940, s1.loss_bbox: 0.0844, loss: 0.3322\r\n",
      "2025-03-18 12:05:07,678 - mmrotate - INFO - Epoch [7][300/928]\tlr: 5.000e-03, eta: 0:39:16, time: 0.705, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0078, loss_rpn_bbox: 0.0119, s0.loss_cls: 0.0720, s0.acc: 97.1304, s0.loss_bbox: 0.1128, s1.loss_cls: 0.0369, s1.acc: 98.6045, s1.loss_bbox: 0.0749, loss: 0.3163\r\n",
      "2025-03-18 12:06:18,257 - mmrotate - INFO - Epoch [7][400/928]\tlr: 5.000e-03, eta: 0:38:08, time: 0.706, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0095, loss_rpn_bbox: 0.0133, s0.loss_cls: 0.0724, s0.acc: 97.1694, s0.loss_bbox: 0.1291, s1.loss_cls: 0.0365, s1.acc: 98.5684, s1.loss_bbox: 0.0795, loss: 0.3404\r\n",
      "2025-03-18 12:07:29,605 - mmrotate - INFO - Epoch [7][500/928]\tlr: 5.000e-03, eta: 0:37:00, time: 0.713, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0130, loss_rpn_bbox: 0.0154, s0.loss_cls: 0.0766, s0.acc: 96.9668, s0.loss_bbox: 0.1122, s1.loss_cls: 0.0359, s1.acc: 98.5742, s1.loss_bbox: 0.0758, loss: 0.3290\r\n",
      "2025-03-18 12:08:40,525 - mmrotate - INFO - Epoch [7][600/928]\tlr: 5.000e-03, eta: 0:35:52, time: 0.709, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0130, loss_rpn_bbox: 0.0136, s0.loss_cls: 0.0741, s0.acc: 97.0635, s0.loss_bbox: 0.1038, s1.loss_cls: 0.0373, s1.acc: 98.5229, s1.loss_bbox: 0.0820, loss: 0.3238\r\n",
      "2025-03-18 12:09:51,122 - mmrotate - INFO - Epoch [7][700/928]\tlr: 5.000e-03, eta: 0:34:43, time: 0.706, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0103, loss_rpn_bbox: 0.0134, s0.loss_cls: 0.0725, s0.acc: 97.0552, s0.loss_bbox: 0.1111, s1.loss_cls: 0.0375, s1.acc: 98.5293, s1.loss_bbox: 0.0798, loss: 0.3245\r\n",
      "2025-03-18 12:11:01,590 - mmrotate - INFO - Epoch [7][800/928]\tlr: 5.000e-03, eta: 0:33:35, time: 0.705, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0109, loss_rpn_bbox: 0.0136, s0.loss_cls: 0.0743, s0.acc: 97.0181, s0.loss_bbox: 0.1118, s1.loss_cls: 0.0391, s1.acc: 98.4336, s1.loss_bbox: 0.0793, loss: 0.3291\r\n",
      "2025-03-18 12:12:11,732 - mmrotate - INFO - Epoch [7][900/928]\tlr: 5.000e-03, eta: 0:32:26, time: 0.701, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0132, loss_rpn_bbox: 0.0138, s0.loss_cls: 0.0736, s0.acc: 97.1128, s0.loss_bbox: 0.0967, s1.loss_cls: 0.0370, s1.acc: 98.5264, s1.loss_bbox: 0.0750, loss: 0.3092\r\n",
      "2025-03-18 12:12:31,404 - mmrotate - INFO - Saving checkpoint at 7 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 9.6 task/s, elapsed: 48s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 12:13:28,058 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 4793 | 0.816  | 0.730 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.730 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 12:13:28,134 - mmrotate - INFO - Exp name: roi_trans_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 12:13:28,134 - mmrotate - INFO - Epoch(val) [7][464]\tmAP: 0.7303\r\n",
      "2025-03-18 12:14:40,832 - mmrotate - INFO - Epoch [8][100/928]\tlr: 5.000e-03, eta: 0:30:51, time: 0.725, data_time: 0.045, memory: 7055, loss_rpn_cls: 0.0103, loss_rpn_bbox: 0.0130, s0.loss_cls: 0.0711, s0.acc: 97.1353, s0.loss_bbox: 0.0964, s1.loss_cls: 0.0379, s1.acc: 98.4736, s1.loss_bbox: 0.0794, loss: 0.3081\r\n",
      "2025-03-18 12:15:51,328 - mmrotate - INFO - Epoch [8][200/928]\tlr: 5.000e-03, eta: 0:29:42, time: 0.705, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0092, loss_rpn_bbox: 0.0125, s0.loss_cls: 0.0718, s0.acc: 97.1221, s0.loss_bbox: 0.0951, s1.loss_cls: 0.0380, s1.acc: 98.4907, s1.loss_bbox: 0.0845, loss: 0.3111\r\n",
      "2025-03-18 12:17:02,117 - mmrotate - INFO - Epoch [8][300/928]\tlr: 5.000e-03, eta: 0:28:34, time: 0.708, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0072, loss_rpn_bbox: 0.0121, s0.loss_cls: 0.0610, s0.acc: 97.5635, s0.loss_bbox: 0.0848, s1.loss_cls: 0.0341, s1.acc: 98.6460, s1.loss_bbox: 0.0734, loss: 0.2726\r\n",
      "2025-03-18 12:18:12,645 - mmrotate - INFO - Epoch [8][400/928]\tlr: 5.000e-03, eta: 0:27:25, time: 0.705, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0121, loss_rpn_bbox: 0.0136, s0.loss_cls: 0.0740, s0.acc: 97.0967, s0.loss_bbox: 0.1402, s1.loss_cls: 0.0391, s1.acc: 98.4663, s1.loss_bbox: 0.0785, loss: 0.3575\r\n",
      "2025-03-18 12:19:23,560 - mmrotate - INFO - Epoch [8][500/928]\tlr: 5.000e-03, eta: 0:26:17, time: 0.709, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0092, loss_rpn_bbox: 0.0135, s0.loss_cls: 0.0702, s0.acc: 97.1553, s0.loss_bbox: 0.0987, s1.loss_cls: 0.0390, s1.acc: 98.4561, s1.loss_bbox: 0.0827, loss: 0.3133\r\n",
      "2025-03-18 12:20:34,666 - mmrotate - INFO - Epoch [8][600/928]\tlr: 5.000e-03, eta: 0:25:09, time: 0.711, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0085, loss_rpn_bbox: 0.0112, s0.loss_cls: 0.0696, s0.acc: 97.2212, s0.loss_bbox: 0.1130, s1.loss_cls: 0.0376, s1.acc: 98.5044, s1.loss_bbox: 0.0799, loss: 0.3199\r\n",
      "2025-03-18 12:21:45,542 - mmrotate - INFO - Epoch [8][700/928]\tlr: 5.000e-03, eta: 0:24:00, time: 0.709, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0133, loss_rpn_bbox: 0.0151, s0.loss_cls: 0.0708, s0.acc: 97.1011, s0.loss_bbox: 0.1132, s1.loss_cls: 0.0380, s1.acc: 98.4771, s1.loss_bbox: 0.0831, loss: 0.3335\r\n",
      "2025-03-18 12:22:56,350 - mmrotate - INFO - Epoch [8][800/928]\tlr: 5.000e-03, eta: 0:22:51, time: 0.708, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0087, loss_rpn_bbox: 0.0122, s0.loss_cls: 0.0711, s0.acc: 97.1787, s0.loss_bbox: 0.1246, s1.loss_cls: 0.0377, s1.acc: 98.5220, s1.loss_bbox: 0.0826, loss: 0.3368\r\n",
      "2025-03-18 12:24:06,968 - mmrotate - INFO - Epoch [8][900/928]\tlr: 5.000e-03, eta: 0:21:43, time: 0.706, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0086, loss_rpn_bbox: 0.0134, s0.loss_cls: 0.0666, s0.acc: 97.3638, s0.loss_bbox: 0.0910, s1.loss_cls: 0.0360, s1.acc: 98.5459, s1.loss_bbox: 0.0768, loss: 0.2923\r\n",
      "2025-03-18 12:24:26,602 - mmrotate - INFO - Saving checkpoint at 8 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 9.6 task/s, elapsed: 48s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 12:25:23,407 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 2863 | 0.783  | 0.691 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.691 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 12:25:23,493 - mmrotate - INFO - Exp name: roi_trans_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 12:25:23,494 - mmrotate - INFO - Epoch(val) [8][464]\tmAP: 0.6906\r\n",
      "2025-03-18 12:26:36,558 - mmrotate - INFO - Epoch [9][100/928]\tlr: 5.000e-04, eta: 0:20:10, time: 0.729, data_time: 0.045, memory: 7055, loss_rpn_cls: 0.0083, loss_rpn_bbox: 0.0110, s0.loss_cls: 0.0635, s0.acc: 97.4771, s0.loss_bbox: 0.0899, s1.loss_cls: 0.0373, s1.acc: 98.5420, s1.loss_bbox: 0.0844, loss: 0.2944\r\n",
      "2025-03-18 12:27:46,920 - mmrotate - INFO - Epoch [9][200/928]\tlr: 5.000e-04, eta: 0:19:02, time: 0.704, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0056, loss_rpn_bbox: 0.0088, s0.loss_cls: 0.0558, s0.acc: 97.7695, s0.loss_bbox: 0.0701, s1.loss_cls: 0.0322, s1.acc: 98.6948, s1.loss_bbox: 0.0736, loss: 0.2461\r\n",
      "2025-03-18 12:28:57,397 - mmrotate - INFO - Epoch [9][300/928]\tlr: 5.000e-04, eta: 0:17:53, time: 0.705, data_time: 0.023, memory: 7055, loss_rpn_cls: 0.0071, loss_rpn_bbox: 0.0099, s0.loss_cls: 0.0614, s0.acc: 97.5083, s0.loss_bbox: 0.0752, s1.loss_cls: 0.0370, s1.acc: 98.4971, s1.loss_bbox: 0.0797, loss: 0.2702\r\n",
      "2025-03-18 12:30:07,617 - mmrotate - INFO - Epoch [9][400/928]\tlr: 5.000e-04, eta: 0:16:44, time: 0.702, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0074, loss_rpn_bbox: 0.0119, s0.loss_cls: 0.0594, s0.acc: 97.6030, s0.loss_bbox: 0.0701, s1.loss_cls: 0.0354, s1.acc: 98.5635, s1.loss_bbox: 0.0784, loss: 0.2626\r\n",
      "2025-03-18 12:31:18,022 - mmrotate - INFO - Epoch [9][500/928]\tlr: 5.000e-04, eta: 0:15:36, time: 0.704, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0067, loss_rpn_bbox: 0.0093, s0.loss_cls: 0.0585, s0.acc: 97.6304, s0.loss_bbox: 0.0631, s1.loss_cls: 0.0343, s1.acc: 98.6509, s1.loss_bbox: 0.0756, loss: 0.2475\r\n",
      "2025-03-18 12:32:28,397 - mmrotate - INFO - Epoch [9][600/928]\tlr: 5.000e-04, eta: 0:14:27, time: 0.704, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0063, loss_rpn_bbox: 0.0091, s0.loss_cls: 0.0595, s0.acc: 97.6069, s0.loss_bbox: 0.0747, s1.loss_cls: 0.0358, s1.acc: 98.5820, s1.loss_bbox: 0.0799, loss: 0.2653\r\n",
      "2025-03-18 12:33:38,699 - mmrotate - INFO - Epoch [9][700/928]\tlr: 5.000e-04, eta: 0:13:18, time: 0.703, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0047, loss_rpn_bbox: 0.0089, s0.loss_cls: 0.0582, s0.acc: 97.6104, s0.loss_bbox: 0.0700, s1.loss_cls: 0.0342, s1.acc: 98.5840, s1.loss_bbox: 0.0779, loss: 0.2538\r\n",
      "2025-03-18 12:34:48,993 - mmrotate - INFO - Epoch [9][800/928]\tlr: 5.000e-04, eta: 0:12:09, time: 0.703, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0059, loss_rpn_bbox: 0.0085, s0.loss_cls: 0.0558, s0.acc: 97.7573, s0.loss_bbox: 0.0621, s1.loss_cls: 0.0339, s1.acc: 98.6440, s1.loss_bbox: 0.0757, loss: 0.2419\r\n",
      "2025-03-18 12:35:59,357 - mmrotate - INFO - Epoch [9][900/928]\tlr: 5.000e-04, eta: 0:11:00, time: 0.704, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0069, loss_rpn_bbox: 0.0104, s0.loss_cls: 0.0587, s0.acc: 97.6470, s0.loss_bbox: 0.0682, s1.loss_cls: 0.0332, s1.acc: 98.6470, s1.loss_bbox: 0.0716, loss: 0.2489\r\n",
      "2025-03-18 12:36:19,051 - mmrotate - INFO - Saving checkpoint at 9 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 9.6 task/s, elapsed: 48s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 12:37:15,950 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 3318 | 0.830  | 0.759 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.759 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 12:37:16,042 - mmrotate - INFO - Exp name: roi_trans_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 12:37:16,043 - mmrotate - INFO - Epoch(val) [9][464]\tmAP: 0.7593\r\n",
      "2025-03-18 12:38:28,890 - mmrotate - INFO - Epoch [10][100/928]\tlr: 5.000e-04, eta: 0:09:30, time: 0.727, data_time: 0.045, memory: 7055, loss_rpn_cls: 0.0056, loss_rpn_bbox: 0.0086, s0.loss_cls: 0.0578, s0.acc: 97.6665, s0.loss_bbox: 0.0643, s1.loss_cls: 0.0354, s1.acc: 98.6005, s1.loss_bbox: 0.0767, loss: 0.2485\r\n",
      "2025-03-18 12:39:39,112 - mmrotate - INFO - Epoch [10][200/928]\tlr: 5.000e-04, eta: 0:08:21, time: 0.702, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0061, loss_rpn_bbox: 0.0087, s0.loss_cls: 0.0548, s0.acc: 97.8027, s0.loss_bbox: 0.0560, s1.loss_cls: 0.0350, s1.acc: 98.6099, s1.loss_bbox: 0.0777, loss: 0.2382\r\n",
      "2025-03-18 12:40:49,393 - mmrotate - INFO - Epoch [10][300/928]\tlr: 5.000e-04, eta: 0:07:12, time: 0.703, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0045, loss_rpn_bbox: 0.0090, s0.loss_cls: 0.0531, s0.acc: 97.8047, s0.loss_bbox: 0.0571, s1.loss_cls: 0.0334, s1.acc: 98.6318, s1.loss_bbox: 0.0757, loss: 0.2327\r\n",
      "2025-03-18 12:41:59,591 - mmrotate - INFO - Epoch [10][400/928]\tlr: 5.000e-04, eta: 0:06:04, time: 0.702, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0062, loss_rpn_bbox: 0.0100, s0.loss_cls: 0.0598, s0.acc: 97.5894, s0.loss_bbox: 0.0717, s1.loss_cls: 0.0361, s1.acc: 98.5620, s1.loss_bbox: 0.0757, loss: 0.2595\r\n",
      "2025-03-18 12:43:10,034 - mmrotate - INFO - Epoch [10][500/928]\tlr: 5.000e-04, eta: 0:04:55, time: 0.704, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0058, loss_rpn_bbox: 0.0084, s0.loss_cls: 0.0535, s0.acc: 97.8047, s0.loss_bbox: 0.0575, s1.loss_cls: 0.0318, s1.acc: 98.7236, s1.loss_bbox: 0.0724, loss: 0.2294\r\n",
      "2025-03-18 12:44:20,339 - mmrotate - INFO - Epoch [10][600/928]\tlr: 5.000e-04, eta: 0:03:46, time: 0.703, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0068, loss_rpn_bbox: 0.0097, s0.loss_cls: 0.0579, s0.acc: 97.7051, s0.loss_bbox: 0.0642, s1.loss_cls: 0.0359, s1.acc: 98.5595, s1.loss_bbox: 0.0805, loss: 0.2551\r\n",
      "2025-03-18 12:45:30,409 - mmrotate - INFO - Epoch [10][700/928]\tlr: 5.000e-04, eta: 0:02:37, time: 0.701, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0058, loss_rpn_bbox: 0.0078, s0.loss_cls: 0.0512, s0.acc: 97.9795, s0.loss_bbox: 0.0587, s1.loss_cls: 0.0292, s1.acc: 98.8442, s1.loss_bbox: 0.0682, loss: 0.2209\r\n",
      "2025-03-18 12:46:40,659 - mmrotate - INFO - Epoch [10][800/928]\tlr: 5.000e-04, eta: 0:01:28, time: 0.702, data_time: 0.022, memory: 7055, loss_rpn_cls: 0.0064, loss_rpn_bbox: 0.0102, s0.loss_cls: 0.0583, s0.acc: 97.6509, s0.loss_bbox: 0.0686, s1.loss_cls: 0.0342, s1.acc: 98.6011, s1.loss_bbox: 0.0779, loss: 0.2556\r\n",
      "2025-03-18 12:47:50,914 - mmrotate - INFO - Epoch [10][900/928]\tlr: 5.000e-04, eta: 0:00:19, time: 0.703, data_time: 0.021, memory: 7055, loss_rpn_cls: 0.0062, loss_rpn_bbox: 0.0101, s0.loss_cls: 0.0568, s0.acc: 97.7300, s0.loss_bbox: 0.0716, s1.loss_cls: 0.0332, s1.acc: 98.6714, s1.loss_bbox: 0.0811, loss: 0.2591\r\n",
      "2025-03-18 12:48:10,625 - mmrotate - INFO - Saving checkpoint at 10 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 9.6 task/s, elapsed: 48s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 12:49:07,588 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 3572 | 0.849  | 0.764 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.764 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 12:49:07,660 - mmrotate - INFO - Exp name: roi_trans_r50_fpn_1x_sccos.py\r\n",
      "2025-03-18 12:49:07,660 - mmrotate - INFO - Epoch(val) [10][464]\tmAP: 0.7640\r\n",
      "Training completed.\n"
     ]
    }
   ],
   "source": [
    "# Step 8: Train the Model\n",
    "%cd /kaggle/working/mmrotate\n",
    "!mkdir -p /kaggle/working/runs/roi_trans_train\n",
    "!python tools/train.py \\\n",
    "    configs/roi_trans/roi_trans_r50_fpn_1x_sccos.py \\\n",
    "    --work-dir /kaggle/working/runs/roi_trans_train \\\n",
    "    --gpus 1\n",
    "\n",
    "print(\"Training completed.\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9a56303d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T12:49:10.703536Z",
     "iopub.status.busy": "2025-03-18T12:49:10.703223Z",
     "iopub.status.idle": "2025-03-18T12:50:15.821552Z",
     "shell.execute_reply": "2025-03-18T12:50:15.820541Z"
    },
    "papermill": {
     "duration": 65.371388,
     "end_time": "2025-03-18T12:50:15.823227",
     "exception": false,
     "start_time": "2025-03-18T12:49:10.451839",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/working/mmrotate\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/kaggle/working/mmrotate/mmrotate/utils/setup_env.py:38: UserWarning: Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.\r\n",
      "  warnings.warn(\r\n",
      "/kaggle/working/mmrotate/mmrotate/utils/setup_env.py:48: UserWarning: Setting MKL_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmdet/models/dense_heads/anchor_head.py:116: UserWarning: DeprecationWarning: `num_anchors` is deprecated, for consistency or also use `num_base_priors` instead\r\n",
      "  warnings.warn('DeprecationWarning: `num_anchors` is deprecated, '\r\n",
      "load checkpoint from local path: /kaggle/working/runs/roi_trans_train/latest.pth\r\n",
      "[                                                  ] 0/464, elapsed: 0s, ETA:/usr/local/lib/python3.10/dist-packages/mmdet/models/dense_heads/anchor_head.py:123: UserWarning: DeprecationWarning: anchor_generator is deprecated, please use \"prior_generator\" instead\r\n",
      "  warnings.warn('DeprecationWarning: anchor_generator is deprecated, '\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 9.4 task/s, elapsed: 49s, ETA:     0s\r\n",
      "writing results to /kaggle/working/runs/roi_trans_test/results.pkl\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 1737 | 3003 | 0.895  | 0.796 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.796 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "{'mAP': 0.7962080240249634}\r\n",
      "Testing completed.\n"
     ]
    }
   ],
   "source": [
    "# Step 9: Test the Model\n",
    "%cd /kaggle/working/mmrotate\n",
    "!mkdir -p /kaggle/working/runs/roi_trans_test\n",
    "!python tools/test.py \\\n",
    "    configs/roi_trans/roi_trans_r50_fpn_1x_sccos.py \\\n",
    "    /kaggle/working/runs/roi_trans_train/latest.pth \\\n",
    "    --eval mAP \\\n",
    "    --out /kaggle/working/runs/roi_trans_test/results.pkl\n",
    "\n",
    "print(\"Testing completed.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9db2a8d",
   "metadata": {
    "papermill": {
     "duration": 0.274916,
     "end_time": "2025-03-18T12:50:16.432420",
     "exception": false,
     "start_time": "2025-03-18T12:50:16.157504",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 6771261,
     "sourceId": 10895847,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30919,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7701.647343,
   "end_time": "2025-03-18T12:50:17.437358",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-18T10:41:55.790015",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
