{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f296afc1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T08:53:34.869341Z",
     "iopub.status.busy": "2025-03-18T08:53:34.869140Z",
     "iopub.status.idle": "2025-03-18T08:53:38.844569Z",
     "shell.execute_reply": "2025-03-18T08:53:38.843718Z"
    },
    "papermill": {
     "duration": 3.98109,
     "end_time": "2025-03-18T08:53:38.846219",
     "exception": false,
     "start_time": "2025-03-18T08:53:34.865129",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nvcc: NVIDIA (R) Cuda compiler driver\r\n",
      "Copyright (c) 2005-2023 NVIDIA Corporation\r\n",
      "Built on Tue_Aug_15_22:02:13_PDT_2023\r\n",
      "Cuda compilation tools, release 12.2, V12.2.140\r\n",
      "Build cuda_12.2.r12.2/compiler.33191640_0\r\n",
      "PyTorch: 2.5.1+cu121 CUDA Available: True CUDA Version: 12.1\r\n"
     ]
    }
   ],
   "source": [
    "!nvcc --version\n",
    "!python -c \"import torch; print('PyTorch:', torch.__version__, 'CUDA Available:', torch.cuda.is_available(), 'CUDA Version:', torch.version.cuda)\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a5883b17",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T08:53:38.853627Z",
     "iopub.status.busy": "2025-03-18T08:53:38.853388Z",
     "iopub.status.idle": "2025-03-18T08:54:29.747177Z",
     "shell.execute_reply": "2025-03-18T08:54:29.746191Z"
    },
    "papermill": {
     "duration": 50.899075,
     "end_time": "2025-03-18T08:54:29.748873",
     "exception": false,
     "start_time": "2025-03-18T08:53:38.849798",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[33mWARNING: Skipping mmcv as it is not installed.\u001b[0m\u001b[33m\r\n",
      "\u001b[0m\u001b[33mWARNING: Skipping mmcv-full as it is not installed.\u001b[0m\u001b[33m\r\n",
      "\u001b[0m\u001b[33mWARNING: Skipping mmdet as it is not installed.\u001b[0m\u001b[33m\r\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "# Step 2: Uninstall Conflicting Packages\n",
    "!pip uninstall -y mmcv mmcv-full mmdet torch torchvision tensorflow tensorboard -q"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "510d1720",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T08:54:29.756546Z",
     "iopub.status.busy": "2025-03-18T08:54:29.756309Z",
     "iopub.status.idle": "2025-03-18T08:56:44.374888Z",
     "shell.execute_reply": "2025-03-18T08:56:44.373827Z"
    },
    "papermill": {
     "duration": 134.624056,
     "end_time": "2025-03-18T08:56:44.376571",
     "exception": false,
     "start_time": "2025-03-18T08:54:29.752515",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 GB\u001b[0m \u001b[31m474.4 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.2/24.2 MB\u001b[0m \u001b[31m58.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "pytorch-lightning 2.5.0.post0 requires torch>=2.1.0, but you have torch 1.13.1+cu116 which is incompatible.\r\n",
      "torchaudio 2.5.1+cu121 requires torch==2.5.1, but you have torch 1.13.1+cu116 which is incompatible.\r\n",
      "torchmetrics 1.6.1 requires torch>=2.0.0, but you have torch 1.13.1+cu116 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m46.0/46.0 MB\u001b[0m \u001b[31m14.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m46.8/46.8 kB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m256.2/256.2 kB\u001b[0m \u001b[31m21.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.5/1.5 MB\u001b[0m \u001b[31m56.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m259.5/259.5 kB\u001b[0m \u001b[31m19.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m57.0/57.0 kB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m50.1/50.1 kB\u001b[0m \u001b[31m3.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m89.7/89.7 kB\u001b[0m \u001b[31m8.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m449.6/449.6 kB\u001b[0m \u001b[31m32.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m52.7/52.7 kB\u001b[0m \u001b[31m3.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m311.5/311.5 kB\u001b[0m \u001b[31m20.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.8/62.8 kB\u001b[0m \u001b[31m4.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m239.4/239.4 kB\u001b[0m \u001b[31m18.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m506.5/506.5 kB\u001b[0m \u001b[31m31.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m77.1/77.1 kB\u001b[0m \u001b[31m5.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m144.2/144.2 kB\u001b[0m \u001b[31m10.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m953.1/953.1 kB\u001b[0m \u001b[31m52.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m99.5/99.5 kB\u001b[0m \u001b[31m7.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Building wheel for oss2 (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Building wheel for aliyun-python-sdk-core (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "  Building wheel for crcmod (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "dopamine-rl 4.1.0 requires tensorflow>=2.2.0, which is not installed.\r\n",
      "tensorflow-decision-forests 1.10.0 requires tensorflow==2.17.0, which is not installed.\r\n",
      "datasets 3.3.1 requires requests>=2.32.2, but you have requests 2.28.2 which is incompatible.\r\n",
      "datasets 3.3.1 requires tqdm>=4.66.3, but you have tqdm 4.65.2 which is incompatible.\r\n",
      "featuretools 1.31.0 requires tqdm>=4.66.3, but you have tqdm 4.65.2 which is incompatible.\r\n",
      "gcsfs 2024.10.0 requires fsspec==2024.10.0, but you have fsspec 2024.12.0 which is incompatible.\r\n",
      "google-cloud-bigtable 2.27.0 requires google-api-core[grpc]<3.0.0dev,>=2.16.0, but you have google-api-core 1.34.1 which is incompatible.\r\n",
      "google-colab 1.0.0 requires notebook==6.5.5, but you have notebook 6.5.4 which is incompatible.\r\n",
      "google-colab 1.0.0 requires pandas==2.2.2, but you have pandas 2.2.3 which is incompatible.\r\n",
      "google-colab 1.0.0 requires requests==2.32.3, but you have requests 2.28.2 which is incompatible.\r\n",
      "jupyterlab-server 2.27.3 requires requests>=2.31, but you have requests 2.28.2 which is incompatible.\r\n",
      "langchain 0.3.12 requires async-timeout<5.0.0,>=4.0.0; python_version < \"3.11\", but you have async-timeout 5.0.1 which is incompatible.\r\n",
      "pandas-gbq 0.25.0 requires google-api-core<3.0.0dev,>=2.10.2, but you have google-api-core 1.34.1 which is incompatible.\r\n",
      "plotnine 0.14.4 requires matplotlib>=3.8.0, but you have matplotlib 3.7.5 which is incompatible.\r\n",
      "pymc 5.19.1 requires rich>=13.7.1, but you have rich 13.4.2 which is incompatible.\r\n",
      "pytensor 2.26.4 requires filelock>=3.15, but you have filelock 3.14.0 which is incompatible.\r\n",
      "pytorch-lightning 2.5.0.post0 requires torch>=2.1.0, but you have torch 1.13.1+cu116 which is incompatible.\r\n",
      "sphinx 8.1.3 requires requests>=2.30.0, but you have requests 2.28.2 which is incompatible.\r\n",
      "torchmetrics 1.6.1 requires torch>=2.0.0, but you have torch 1.13.1+cu116 which is incompatible.\r\n",
      "yfinance 0.2.50 requires requests>=2.31, but you have requests 2.28.2 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m452.7/452.7 kB\u001b[0m \u001b[31m24.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    }
   ],
   "source": [
    "!pip install torch==1.13.1+cu116 torchvision==0.14.1+cu116 -f https://download.pytorch.org/whl/torch_stable.html -q\n",
    "!pip install mmcv-full==1.7.1 -f https://download.openmmlab.com/mmcv/dist/cu116/torch1.13.0/index.html -q\n",
    "!pip install mmdet==2.28.2 -q\n",
    "!pip install -U openmim -q\n",
    "!mim install \"mmengine>=0.7.0\" -q\n",
    "!pip install xmltodict -q  # For dataset conversion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2f9d01ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T08:56:44.449065Z",
     "iopub.status.busy": "2025-03-18T08:56:44.448791Z",
     "iopub.status.idle": "2025-03-18T08:56:45.962591Z",
     "shell.execute_reply": "2025-03-18T08:56:45.961487Z"
    },
    "papermill": {
     "duration": 1.551811,
     "end_time": "2025-03-18T08:56:45.964315",
     "exception": false,
     "start_time": "2025-03-18T08:56:44.412504",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nvcc: NVIDIA (R) Cuda compiler driver\r\n",
      "Copyright (c) 2005-2023 NVIDIA Corporation\r\n",
      "Built on Tue_Aug_15_22:02:13_PDT_2023\r\n",
      "Cuda compilation tools, release 12.2, V12.2.140\r\n",
      "Build cuda_12.2.r12.2/compiler.33191640_0\r\n",
      "PyTorch: 1.13.1+cu116 CUDA Available: True CUDA Version: 11.6\r\n"
     ]
    }
   ],
   "source": [
    "!nvcc --version\n",
    "!python -c \"import torch; print('PyTorch:', torch.__version__, 'CUDA Available:', torch.cuda.is_available(), 'CUDA Version:', torch.version.cuda)\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8133d89b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T08:56:46.037488Z",
     "iopub.status.busy": "2025-03-18T08:56:46.037201Z",
     "iopub.status.idle": "2025-03-18T08:56:59.862358Z",
     "shell.execute_reply": "2025-03-18T08:56:59.861472Z"
    },
    "papermill": {
     "duration": 13.863385,
     "end_time": "2025-03-18T08:56:59.863990",
     "exception": false,
     "start_time": "2025-03-18T08:56:46.000605",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cloning into '/kaggle/working/mmrotate'...\r\n",
      "remote: Enumerating objects: 3897, done.\u001b[K\r\n",
      "remote: Counting objects: 100% (1265/1265), done.\u001b[K\r\n",
      "remote: Compressing objects: 100% (386/386), done.\u001b[K\r\n",
      "remote: Total 3897 (delta 987), reused 879 (delta 879), pack-reused 2632 (from 2)\u001b[K\r\n",
      "Receiving objects: 100% (3897/3897), 25.33 MiB | 14.73 MiB/s, done.\r\n",
      "Resolving deltas: 100% (2384/2384), done.\r\n",
      "/kaggle/working/mmrotate\n",
      "Obtaining file:///kaggle/working/mmrotate\r\n",
      "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\r\n",
      "Collecting e2cnn (from mmrotate==0.3.4)\r\n",
      "  Downloading e2cnn-0.2.3-py3-none-any.whl.metadata (15 kB)\r\n",
      "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (3.7.5)\r\n",
      "Requirement already satisfied: mmcv-full in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (1.7.1)\r\n",
      "Requirement already satisfied: mmdet<3.0.0,>=2.25.1 in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (2.28.2)\r\n",
      "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (1.26.4)\r\n",
      "Requirement already satisfied: pycocotools in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (2.0.8)\r\n",
      "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (1.17.0)\r\n",
      "Requirement already satisfied: terminaltables in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (3.1.10)\r\n",
      "Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (from mmrotate==0.3.4) (1.13.1+cu116)\r\n",
      "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from mmdet<3.0.0,>=2.25.1->mmrotate==0.3.4) (1.13.1)\r\n",
      "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from e2cnn->mmrotate==0.3.4) (1.13.1)\r\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (1.3.1)\r\n",
      "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (0.12.1)\r\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (4.55.3)\r\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (1.4.7)\r\n",
      "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (24.2)\r\n",
      "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (11.0.0)\r\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (3.2.0)\r\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mmrotate==0.3.4) (2.9.0.post0)\r\n",
      "Requirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy->mmrotate==0.3.4) (1.3.8)\r\n",
      "Requirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy->mmrotate==0.3.4) (1.2.4)\r\n",
      "Requirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy->mmrotate==0.3.4) (0.1.1)\r\n",
      "Requirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy->mmrotate==0.3.4) (2025.0.1)\r\n",
      "Requirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy->mmrotate==0.3.4) (2022.0.0)\r\n",
      "Requirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy->mmrotate==0.3.4) (2.4.1)\r\n",
      "Requirement already satisfied: addict in /usr/local/lib/python3.10/dist-packages (from mmcv-full->mmrotate==0.3.4) (2.4.0)\r\n",
      "Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from mmcv-full->mmrotate==0.3.4) (6.0.2)\r\n",
      "Requirement already satisfied: yapf in /usr/local/lib/python3.10/dist-packages (from mmcv-full->mmrotate==0.3.4) (0.43.0)\r\n",
      "Requirement already satisfied: opencv-python>=3 in /usr/local/lib/python3.10/dist-packages (from mmcv-full->mmrotate==0.3.4) (4.10.0.84)\r\n",
      "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from torch->mmrotate==0.3.4) (4.12.2)\r\n",
      "Requirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy->mmrotate==0.3.4) (2024.2.0)\r\n",
      "Requirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy->mmrotate==0.3.4) (2022.0.0)\r\n",
      "Requirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy->mmrotate==0.3.4) (1.2.0)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy->mmrotate==0.3.4) (2024.2.0)\r\n",
      "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from sympy->e2cnn->mmrotate==0.3.4) (1.3.0)\r\n",
      "Requirement already satisfied: platformdirs>=3.5.1 in /usr/local/lib/python3.10/dist-packages (from yapf->mmcv-full->mmrotate==0.3.4) (4.3.6)\r\n",
      "Requirement already satisfied: tomli>=2.0.1 in /usr/local/lib/python3.10/dist-packages (from yapf->mmcv-full->mmrotate==0.3.4) (2.2.1)\r\n",
      "Requirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy->mmrotate==0.3.4) (2024.2.0)\r\n",
      "Downloading e2cnn-0.2.3-py3-none-any.whl (225 kB)\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m225.3/225.3 kB\u001b[0m \u001b[31m14.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hInstalling collected packages: e2cnn, mmrotate\r\n",
      "  Running setup.py develop for mmrotate\r\n",
      "Successfully installed e2cnn-0.2.3 mmrotate-0.3.4\r\n"
     ]
    }
   ],
   "source": [
    "# Step 4: Clone and Install MMRotate 0.3.4\n",
    "!git clone https://github.com/open-mmlab/mmrotate.git /kaggle/working/mmrotate\n",
    "%cd /kaggle/working/mmrotate\n",
    "# !git checkout v0.3.4  # Ensure exact version\n",
    "!pip install -r requirements/build.txt -q\n",
    "!pip install -v -e . -q"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "05af3a67",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T08:56:59.940798Z",
     "iopub.status.busy": "2025-03-18T08:56:59.940475Z",
     "iopub.status.idle": "2025-03-18T08:57:01.255399Z",
     "shell.execute_reply": "2025-03-18T08:57:01.254319Z"
    },
    "papermill": {
     "duration": 1.35484,
     "end_time": "2025-03-18T08:57:01.257387",
     "exception": false,
     "start_time": "2025-03-18T08:56:59.902547",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mmcv-full                          1.7.1\r\n",
      "mmdet                              2.28.2\r\n",
      "mmengine                           0.10.7\r\n",
      "mmrotate                           0.3.4                /kaggle/working/mmrotate\r\n",
      "pytorch-ignite                     0.5.1\r\n",
      "pytorch-lightning                  2.5.0.post0\r\n",
      "torch                              1.13.1+cu116\r\n",
      "torchaudio                         2.5.1+cu121\r\n",
      "torchinfo                          1.8.0\r\n",
      "torchmetrics                       1.6.1\r\n",
      "torchsummary                       1.5.1\r\n",
      "torchtune                          0.5.0\r\n",
      "torchvision                        0.14.1+cu116\r\n"
     ]
    }
   ],
   "source": [
    "# Step 5: Verify Installations\n",
    "!pip list | grep -E 'torch|mmcv|mmdet|mmengine|mmrotate'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a2b38939",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T08:57:01.333523Z",
     "iopub.status.busy": "2025-03-18T08:57:01.333244Z",
     "iopub.status.idle": "2025-03-18T08:57:01.347713Z",
     "shell.execute_reply": "2025-03-18T08:57:01.347078Z"
    },
    "papermill": {
     "duration": 0.05331,
     "end_time": "2025-03-18T08:57:01.348870",
     "exception": false,
     "start_time": "2025-03-18T08:57:01.295560",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Step 6: Prepare Dataset (SCCOS to DOTA format)\n",
    "import os\n",
    "import shutil\n",
    "import random\n",
    "import xmltodict\n",
    "import tqdm\n",
    "import math\n",
    "\n",
    "dataset_path = \"/kaggle/input/sccos-dataset/\"\n",
    "working_dir = \"/kaggle/working/sccos_dota\"\n",
    "train_images_dir = os.path.join(working_dir, \"train/images\")\n",
    "train_labels_dir = os.path.join(working_dir, \"train/labels\")\n",
    "val_images_dir = os.path.join(working_dir, \"val/images\")\n",
    "val_labels_dir = os.path.join(working_dir, \"val/labels\")\n",
    "test_images_dir = os.path.join(working_dir, \"test/images\")\n",
    "test_labels_dir = os.path.join(working_dir, \"test/labels\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "eb1b1c60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T08:57:01.423370Z",
     "iopub.status.busy": "2025-03-18T08:57:01.423110Z",
     "iopub.status.idle": "2025-03-18T08:59:58.681577Z",
     "shell.execute_reply": "2025-03-18T08:59:58.680613Z"
    },
    "papermill": {
     "duration": 177.297257,
     "end_time": "2025-03-18T08:59:58.683063",
     "exception": false,
     "start_time": "2025-03-18T08:57:01.385806",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset split: Train=3711, Val=464, Test=464\n",
      "Converting train set to DOTA format...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 3711/3711 [00:01<00:00, 2191.88it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Converting val set to DOTA format...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 464/464 [00:00<00:00, 2136.65it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Converting test set to DOTA format...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 464/464 [00:00<00:00, 2399.57it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dataset conversion to DOTA format complete.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# Clean and recreate directories\n",
    "if os.path.exists(working_dir):\n",
    "    shutil.rmtree(working_dir)\n",
    "for dir_path in [train_images_dir, train_labels_dir, val_images_dir, val_labels_dir, test_images_dir, test_labels_dir]:\n",
    "    os.makedirs(dir_path, exist_ok=True)\n",
    "\n",
    "# Source paths\n",
    "train_img_dir = os.path.join(dataset_path, \"train/images\")\n",
    "train_ann_dir = os.path.join(dataset_path, \"train/annotations\")\n",
    "test_img_dir = os.path.join(dataset_path, \"test/images\")\n",
    "test_ann_dir = os.path.join(dataset_path, \"test/annotations\")\n",
    "\n",
    "# Get all files and split\n",
    "train_files = [f for f in os.listdir(train_img_dir) if f.endswith('.png')]\n",
    "test_files = [f for f in os.listdir(test_img_dir) if f.endswith('.png')]\n",
    "random.seed(42)\n",
    "random.shuffle(train_files)\n",
    "random.shuffle(test_files)\n",
    "test_size = len(test_files)\n",
    "val_size = test_size // 2\n",
    "val_files = test_files[:val_size]\n",
    "test_files = test_files[val_size:]\n",
    "\n",
    "# Copy files\n",
    "def copy_files(file_list, src_img_dir, src_ann_dir, dst_img_dir, dst_ann_dir):\n",
    "    for img_file in file_list:\n",
    "        shutil.copy(os.path.join(src_img_dir, img_file), os.path.join(dst_img_dir, img_file))\n",
    "        ann_file = img_file.replace('.png', '.xml')\n",
    "        if os.path.exists(os.path.join(src_ann_dir, ann_file)):\n",
    "            shutil.copy(os.path.join(src_ann_dir, ann_file), os.path.join(dst_ann_dir, ann_file))\n",
    "\n",
    "copy_files(train_files, train_img_dir, train_ann_dir, train_images_dir, train_labels_dir)\n",
    "copy_files(val_files, test_img_dir, test_ann_dir, val_images_dir, val_labels_dir)\n",
    "copy_files(test_files, test_img_dir, test_ann_dir, test_images_dir, test_labels_dir)\n",
    "print(f\"Dataset split: Train={len(train_files)}, Val={len(val_files)}, Test={len(test_files)}\")\n",
    "\n",
    "# Convert XML to DOTA format\n",
    "def convert_robndbox_to_corners(cx, cy, w, h, angle):\n",
    "    angle = float(angle)\n",
    "    cx, cy, w, h = float(cx), float(cy), float(w), float(h)\n",
    "    cos_a = math.cos(angle)\n",
    "    sin_a = math.sin(angle)\n",
    "    dx, dy = w / 2, h / 2\n",
    "    corners = [(-dx, -dy), (dx, -dy), (dx, dy), (-dx, dy)]\n",
    "    rotated_corners = [(cx + x * cos_a - y * sin_a, cy + x * sin_a + y * cos_a) for x, y in corners]\n",
    "    return rotated_corners\n",
    "\n",
    "def convert_xml_to_dota(xml_path, output_label_dir):\n",
    "    with open(xml_path, 'r') as f:\n",
    "        xml_data = xmltodict.parse(f.read())\n",
    "    objects = xml_data['annotation'].get('object', [])\n",
    "    if not isinstance(objects, list):\n",
    "        objects = [objects] if objects else []\n",
    "    txt_lines = []\n",
    "    for obj in objects:\n",
    "        if obj and 'robndbox' in obj:\n",
    "            robndbox = obj['robndbox']\n",
    "            try:\n",
    "                cx, cy, w, h, angle = robndbox['cx'], robndbox['cy'], robndbox['w'], robndbox['h'], robndbox['angle']\n",
    "                (x1, y1), (x2, y2), (x3, y3), (x4, y4) = convert_robndbox_to_corners(cx, cy, w, h, angle)\n",
    "                class_name = \"ship\"\n",
    "                difficulty = 0\n",
    "                txt_lines.append(f\"{x1:.2f} {y1:.2f} {x2:.2f} {y2:.2f} {x3:.2f} {y3:.2f} {x4:.2f} {y4:.2f} {class_name} {difficulty}\")\n",
    "            except (KeyError, ValueError) as e:\n",
    "                print(f\"Invalid robndbox data in {xml_path}: {e}\")\n",
    "                continue\n",
    "    txt_filename = os.path.splitext(os.path.basename(xml_path))[0] + \".txt\"\n",
    "    txt_path = os.path.join(output_label_dir, txt_filename)\n",
    "    if txt_lines:\n",
    "        with open(txt_path, 'w') as f:\n",
    "            f.write(\"\\n\".join(txt_lines))\n",
    "    os.remove(xml_path)\n",
    "\n",
    "for split, label_dir in [(\"train\", train_labels_dir), (\"val\", val_labels_dir), (\"test\", test_labels_dir)]:\n",
    "    print(f\"Converting {split} set to DOTA format...\")\n",
    "    for xml_file in tqdm.tqdm(os.listdir(label_dir)):\n",
    "        if xml_file.endswith(\".xml\"):\n",
    "            convert_xml_to_dota(os.path.join(label_dir, xml_file), label_dir)\n",
    "print(\"Dataset conversion to DOTA format complete.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bd7d86f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T08:59:58.761232Z",
     "iopub.status.busy": "2025-03-18T08:59:58.760982Z",
     "iopub.status.idle": "2025-03-18T09:01:41.499465Z",
     "shell.execute_reply": "2025-03-18T09:01:41.498526Z"
    },
    "papermill": {
     "duration": 102.778814,
     "end_time": "2025-03-18T09:01:41.501096",
     "exception": false,
     "start_time": "2025-03-18T08:59:58.722282",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m190.2/190.2 kB\u001b[0m \u001b[31m10.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validating training images...\n",
      "Empty file detected: /kaggle/working/sccos_dota/train/images/2284.png\n",
      "Removed bad image: /kaggle/working/sccos_dota/train/images/2284.png\n",
      "Removed corresponding label: /kaggle/working/sccos_dota/train/labels/2284.txt\n",
      "Found and handled 1 bad files.\n"
     ]
    }
   ],
   "source": [
    "# NEW: Fix YAPF compatibility issue\n",
    "!pip install yapf==0.32.0 -q  # Pin to a version compatible with MMCV 1.7.1\n",
    "\n",
    "# NEW: Validate training images\n",
    "import os\n",
    "import cv2\n",
    "import mmcv\n",
    "\n",
    "def validate_images(image_dir, label_dir):\n",
    "    bad_files = []\n",
    "    for img_file in os.listdir(image_dir):\n",
    "        if not img_file.endswith('.png'):\n",
    "            continue\n",
    "        img_path = os.path.join(image_dir, img_file)\n",
    "        # Check if file is empty\n",
    "        if os.path.getsize(img_path) == 0:\n",
    "            bad_files.append(img_file)\n",
    "            print(f\"Empty file detected: {img_path}\")\n",
    "            continue\n",
    "        # Try loading with mmcv (mimics pipeline behavior)\n",
    "        try:\n",
    "            img = mmcv.imread(img_path)\n",
    "            if img is None:\n",
    "                raise ValueError(\"Image loaded as None\")\n",
    "        except Exception as e:\n",
    "            bad_files.append(img_file)\n",
    "            print(f\"Corrupt or unreadable file: {img_path} - Error: {e}\")\n",
    "    \n",
    "    # Remove bad files and their labels\n",
    "    for bad_file in bad_files:\n",
    "        img_path = os.path.join(image_dir, bad_file)\n",
    "        label_file = bad_file.replace('.png', '.txt')\n",
    "        label_path = os.path.join(label_dir, label_file)\n",
    "        if os.path.exists(img_path):\n",
    "            os.remove(img_path)\n",
    "            print(f\"Removed bad image: {img_path}\")\n",
    "        if os.path.exists(label_path):\n",
    "            os.remove(label_path)\n",
    "            print(f\"Removed corresponding label: {label_path}\")\n",
    "    \n",
    "    if bad_files:\n",
    "        print(f\"Found and handled {len(bad_files)} bad files.\")\n",
    "    else:\n",
    "        print(\"All images validated successfully.\")\n",
    "\n",
    "# Validate training set\n",
    "train_images_dir = \"/kaggle/working/sccos_dota/train/images\"\n",
    "train_labels_dir = \"/kaggle/working/sccos_dota/train/labels\"\n",
    "print(\"Validating training images...\")\n",
    "validate_images(train_images_dir, train_labels_dir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7c72f659",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T09:01:41.585840Z",
     "iopub.status.busy": "2025-03-18T09:01:41.585396Z",
     "iopub.status.idle": "2025-03-18T09:01:41.592123Z",
     "shell.execute_reply": "2025-03-18T09:01:41.591401Z"
    },
    "papermill": {
     "duration": 0.047543,
     "end_time": "2025-03-18T09:01:41.593326",
     "exception": false,
     "start_time": "2025-03-18T09:01:41.545783",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ReDet configuration saved to /kaggle/working/mmrotate/configs/redet/redet_re50_refpn_1x_sccos.py\n"
     ]
    }
   ],
   "source": [
    "# Step 7: Create Config File for ReDet\n",
    "config_content = \"\"\"\n",
    "_base_ = [\n",
    "    '../_base_/datasets/dotav1.py', '../_base_/schedules/schedule_1x.py',\n",
    "    '../_base_/default_runtime.py'\n",
    "]\n",
    "\n",
    "angle_version = 'le90'\n",
    "dataset_type = 'DOTADataset'\n",
    "data_root = '/kaggle/working/sccos_dota/'\n",
    "classes = ('ship',)\n",
    "img_norm_cfg = dict(mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\n",
    "\n",
    "train_pipeline = [\n",
    "    dict(type='LoadImageFromFile'),\n",
    "    dict(type='LoadAnnotations', with_bbox=True),\n",
    "    dict(type='RResize', img_scale=(1024, 1024)),\n",
    "    dict(\n",
    "        type='RRandomFlip',\n",
    "        flip_ratio=[0.25, 0.25, 0.25],\n",
    "        direction=['horizontal', 'vertical', 'diagonal'],\n",
    "        version=angle_version),\n",
    "    dict(type='Normalize', **img_norm_cfg),\n",
    "    dict(type='Pad', size_divisor=32),\n",
    "    dict(type='DefaultFormatBundle'),\n",
    "    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n",
    "]\n",
    "test_pipeline = [\n",
    "    dict(type='LoadImageFromFile'),\n",
    "    dict(type='MultiScaleFlipAug', img_scale=(1024, 1024), flip=False,\n",
    "         transforms=[\n",
    "             dict(type='RResize'),\n",
    "             dict(type='Normalize', **img_norm_cfg),\n",
    "             dict(type='Pad', size_divisor=32),\n",
    "             dict(type='DefaultFormatBundle'),\n",
    "             dict(type='Collect', keys=['img'])\n",
    "         ])\n",
    "]\n",
    "\n",
    "data = dict(\n",
    "    samples_per_gpu=4,\n",
    "    workers_per_gpu=1,\n",
    "    train=dict(\n",
    "        type=dataset_type,\n",
    "        ann_file=data_root + 'train/labels/',\n",
    "        img_prefix=data_root + 'train/images/',\n",
    "        pipeline=train_pipeline,\n",
    "        classes=classes,\n",
    "        version=angle_version),\n",
    "    val=dict(\n",
    "        type=dataset_type,\n",
    "        ann_file=data_root + 'val/labels/',\n",
    "        img_prefix=data_root + 'val/images/',\n",
    "        pipeline=test_pipeline,\n",
    "        classes=classes,\n",
    "        version=angle_version),\n",
    "    test=dict(\n",
    "        type=dataset_type,\n",
    "        ann_file=data_root + 'test/labels/',\n",
    "        img_prefix=data_root + 'test/images/',\n",
    "        pipeline=test_pipeline,\n",
    "        classes=classes,\n",
    "        version=angle_version))\n",
    "\n",
    "evaluation = dict(interval=1, metric='mAP')\n",
    "optimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0001)\n",
    "optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\n",
    "lr_config = dict(\n",
    "    policy='step',\n",
    "    warmup='linear',\n",
    "    warmup_iters=200,\n",
    "    warmup_ratio=1.0 / 3,\n",
    "    step=[8, 11])\n",
    "runner = dict(type='EpochBasedRunner', max_epochs=10)\n",
    "checkpoint_config = dict(interval=1)\n",
    "log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\n",
    "\n",
    "model = dict(\n",
    "    type='ReDet',\n",
    "    backbone=dict(\n",
    "        type='ReResNet',\n",
    "        depth=50,\n",
    "        num_stages=4,\n",
    "        out_indices=(0, 1, 2, 3),\n",
    "        frozen_stages=1,\n",
    "        style='pytorch',\n",
    "        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n",
    "    neck=dict(\n",
    "        type='ReFPN',\n",
    "        in_channels=[256, 512, 1024, 2048],\n",
    "        out_channels=256,\n",
    "        num_outs=5),\n",
    "    rpn_head=dict(\n",
    "        type='RotatedRPNHead',\n",
    "        in_channels=256,\n",
    "        feat_channels=256,\n",
    "        version=angle_version,\n",
    "        anchor_generator=dict(\n",
    "            type='AnchorGenerator',\n",
    "            scales=[8],\n",
    "            ratios=[0.5, 1.0, 2.0],\n",
    "            strides=[4, 8, 16, 32, 64]),\n",
    "        bbox_coder=dict(\n",
    "            type='DeltaXYWHBBoxCoder',\n",
    "            target_means=[0.0, 0.0, 0.0, 0.0],\n",
    "            target_stds=[1.0, 1.0, 1.0, 1.0]),\n",
    "        loss_cls=dict(\n",
    "            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n",
    "        loss_bbox=dict(type='SmoothL1Loss', beta=1.0 / 9.0, loss_weight=1.0)),\n",
    "    roi_head=dict(\n",
    "        type='RoITransRoIHead',\n",
    "        version=angle_version,\n",
    "        num_stages=2,\n",
    "        stage_loss_weights=[1, 1],\n",
    "        bbox_roi_extractor=[\n",
    "            dict(\n",
    "                type='SingleRoIExtractor',\n",
    "                roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n",
    "                out_channels=256,\n",
    "                featmap_strides=[4, 8, 16, 32]),\n",
    "            dict(\n",
    "                type='RotatedSingleRoIExtractor',\n",
    "                roi_layer=dict(\n",
    "                    type='RiRoIAlignRotated',\n",
    "                    out_size=7,\n",
    "                    num_samples=2,\n",
    "                    num_orientations=8,\n",
    "                    clockwise=True),\n",
    "                out_channels=256,\n",
    "                featmap_strides=[4, 8, 16, 32]),\n",
    "        ],\n",
    "        bbox_head=[\n",
    "            dict(\n",
    "                type='RotatedShared2FCBBoxHead',\n",
    "                in_channels=256,\n",
    "                fc_out_channels=1024,\n",
    "                roi_feat_size=7,\n",
    "                num_classes=1,\n",
    "                bbox_coder=dict(\n",
    "                    type='DeltaXYWHAHBBoxCoder',\n",
    "                    angle_range=angle_version,\n",
    "                    norm_factor=2,\n",
    "                    edge_swap=True,\n",
    "                    target_means=[0.0, 0.0, 0.0, 0.0, 0.0],\n",
    "                    target_stds=[0.1, 0.1, 0.2, 0.2, 1.0]),\n",
    "                reg_class_agnostic=True,\n",
    "                loss_cls=dict(\n",
    "                    type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n",
    "                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0)),\n",
    "            dict(\n",
    "                type='RotatedShared2FCBBoxHead',\n",
    "                in_channels=256,\n",
    "                fc_out_channels=1024,\n",
    "                roi_feat_size=7,\n",
    "                num_classes=1,\n",
    "                bbox_coder=dict(\n",
    "                    type='DeltaXYWHAOBBoxCoder',\n",
    "                    angle_range=angle_version,\n",
    "                    norm_factor=None,\n",
    "                    edge_swap=True,\n",
    "                    proj_xy=True,\n",
    "                    target_means=[0.0, 0.0, 0.0, 0.0, 0.0],\n",
    "                    target_stds=[0.05, 0.05, 0.1, 0.1, 0.5]),\n",
    "                reg_class_agnostic=False,\n",
    "                loss_cls=dict(\n",
    "                    type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n",
    "                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n",
    "        ]),\n",
    "    train_cfg=dict(\n",
    "        rpn=dict(\n",
    "            assigner=dict(\n",
    "                type='MaxIoUAssigner',\n",
    "                pos_iou_thr=0.7,\n",
    "                neg_iou_thr=0.3,\n",
    "                min_pos_iou=0.3,\n",
    "                match_low_quality=True,\n",
    "                ignore_iof_thr=-1),\n",
    "            sampler=dict(\n",
    "                type='RandomSampler',\n",
    "                num=256,\n",
    "                pos_fraction=0.5,\n",
    "                neg_pos_ub=-1,\n",
    "                add_gt_as_proposals=False),\n",
    "            allowed_border=0,\n",
    "            pos_weight=-1,\n",
    "            debug=False),\n",
    "        rpn_proposal=dict(\n",
    "            nms_pre=2000,\n",
    "            max_per_img=2000,\n",
    "            nms=dict(type='nms', iou_threshold=0.7),\n",
    "            min_bbox_size=0),\n",
    "        rcnn=[\n",
    "            dict(\n",
    "                assigner=dict(\n",
    "                    type='MaxIoUAssigner',\n",
    "                    pos_iou_thr=0.5,\n",
    "                    neg_iou_thr=0.5,\n",
    "                    min_pos_iou=0.5,\n",
    "                    match_low_quality=False,\n",
    "                    ignore_iof_thr=-1,\n",
    "                    iou_calculator=dict(type='BboxOverlaps2D')),\n",
    "                sampler=dict(\n",
    "                    type='RandomSampler',\n",
    "                    num=512,\n",
    "                    pos_fraction=0.25,\n",
    "                    neg_pos_ub=-1,\n",
    "                    add_gt_as_proposals=True),\n",
    "                pos_weight=-1,\n",
    "                debug=False),\n",
    "            dict(\n",
    "                assigner=dict(\n",
    "                    type='MaxIoUAssigner',\n",
    "                    pos_iou_thr=0.5,\n",
    "                    neg_iou_thr=0.5,\n",
    "                    min_pos_iou=0.5,\n",
    "                    match_low_quality=False,\n",
    "                    ignore_iof_thr=-1,\n",
    "                    iou_calculator=dict(type='RBboxOverlaps2D')),\n",
    "                sampler=dict(\n",
    "                    type='RRandomSampler',\n",
    "                    num=512,\n",
    "                    pos_fraction=0.25,\n",
    "                    neg_pos_ub=-1,\n",
    "                    add_gt_as_proposals=True),\n",
    "                pos_weight=-1,\n",
    "                debug=False)\n",
    "        ]),\n",
    "    test_cfg=dict(\n",
    "        rpn=dict(\n",
    "            nms_pre=2000,\n",
    "            max_per_img=2000,\n",
    "            nms=dict(type='nms', iou_threshold=0.7),\n",
    "            min_bbox_size=0),\n",
    "        rcnn=dict(\n",
    "            nms_pre=2000,\n",
    "            min_bbox_size=0,\n",
    "            score_thr=0.05,\n",
    "            nms=dict(iou_thr=0.1),\n",
    "            max_per_img=2000))\n",
    ")\n",
    "\"\"\"\n",
    "config_path = \"/kaggle/working/mmrotate/configs/redet/redet_re50_refpn_1x_sccos.py\"\n",
    "with open(config_path, 'w') as f:\n",
    "    f.write(config_content)\n",
    "print(f\"ReDet configuration saved to {config_path}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "893b2c65",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T09:01:41.671919Z",
     "iopub.status.busy": "2025-03-18T09:01:41.671698Z",
     "iopub.status.idle": "2025-03-18T12:32:12.782766Z",
     "shell.execute_reply": "2025-03-18T12:32:12.781705Z"
    },
    "papermill": {
     "duration": 12631.152126,
     "end_time": "2025-03-18T12:32:12.784107",
     "exception": false,
     "start_time": "2025-03-18T09:01:41.631981",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/working/mmrotate\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 09:01:50,379 - mmrotate - INFO - Environment info:\r\n",
      "------------------------------------------------------------\r\n",
      "sys.platform: linux\r\n",
      "Python: 3.10.12 (main, Nov  6 2024, 20:22:13) [GCC 11.4.0]\r\n",
      "CUDA available: True\r\n",
      "GPU 0: Tesla P100-PCIE-16GB\r\n",
      "CUDA_HOME: /usr/local/cuda\r\n",
      "NVCC: Cuda compilation tools, release 12.2, V12.2.140\r\n",
      "GCC: x86_64-linux-gnu-gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0\r\n",
      "PyTorch: 1.13.1+cu116\r\n",
      "PyTorch compiling details: PyTorch built with:\r\n",
      "  - GCC 9.3\r\n",
      "  - C++ Version: 201402\r\n",
      "  - Intel(R) oneAPI Math Kernel Library Version 2025.0.1-Product Build 20241031 for Intel(R) 64 architecture applications\r\n",
      "  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\r\n",
      "  - OpenMP 201511 (a.k.a. OpenMP 4.5)\r\n",
      "  - LAPACK is enabled (usually provided by MKL)\r\n",
      "  - NNPACK is enabled\r\n",
      "  - CPU capability usage: AVX2\r\n",
      "  - CUDA Runtime 11.6\r\n",
      "  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\r\n",
      "  - CuDNN 8.3.2  (built against CUDA 11.5)\r\n",
      "  - Magma 2.6.1\r\n",
      "  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \r\n",
      "\r\n",
      "TorchVision: 0.14.1+cu116\r\n",
      "OpenCV: 4.10.0\r\n",
      "MMCV: 1.7.1\r\n",
      "MMCV Compiler: GCC 9.3\r\n",
      "MMCV CUDA Compiler: 11.6\r\n",
      "MMRotate: 0.3.4+b030f38\r\n",
      "------------------------------------------------------------\r\n",
      "\r\n",
      "2025-03-18 09:01:50,668 - mmrotate - INFO - Distributed training: False\r\n",
      "2025-03-18 09:01:51,091 - mmrotate - INFO - Config:\r\n",
      "dataset_type = 'DOTADataset'\r\n",
      "data_root = '/kaggle/working/sccos_dota/'\r\n",
      "img_norm_cfg = dict(\r\n",
      "    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\r\n",
      "train_pipeline = [\r\n",
      "    dict(type='LoadImageFromFile'),\r\n",
      "    dict(type='LoadAnnotations', with_bbox=True),\r\n",
      "    dict(type='RResize', img_scale=(1024, 1024)),\r\n",
      "    dict(\r\n",
      "        type='RRandomFlip',\r\n",
      "        flip_ratio=[0.25, 0.25, 0.25],\r\n",
      "        direction=['horizontal', 'vertical', 'diagonal'],\r\n",
      "        version='le90'),\r\n",
      "    dict(\r\n",
      "        type='Normalize',\r\n",
      "        mean=[123.675, 116.28, 103.53],\r\n",
      "        std=[58.395, 57.12, 57.375],\r\n",
      "        to_rgb=True),\r\n",
      "    dict(type='Pad', size_divisor=32),\r\n",
      "    dict(type='DefaultFormatBundle'),\r\n",
      "    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\r\n",
      "]\r\n",
      "test_pipeline = [\r\n",
      "    dict(type='LoadImageFromFile'),\r\n",
      "    dict(\r\n",
      "        type='MultiScaleFlipAug',\r\n",
      "        img_scale=(1024, 1024),\r\n",
      "        flip=False,\r\n",
      "        transforms=[\r\n",
      "            dict(type='RResize'),\r\n",
      "            dict(\r\n",
      "                type='Normalize',\r\n",
      "                mean=[123.675, 116.28, 103.53],\r\n",
      "                std=[58.395, 57.12, 57.375],\r\n",
      "                to_rgb=True),\r\n",
      "            dict(type='Pad', size_divisor=32),\r\n",
      "            dict(type='DefaultFormatBundle'),\r\n",
      "            dict(type='Collect', keys=['img'])\r\n",
      "        ])\r\n",
      "]\r\n",
      "data = dict(\r\n",
      "    samples_per_gpu=4,\r\n",
      "    workers_per_gpu=1,\r\n",
      "    train=dict(\r\n",
      "        type='DOTADataset',\r\n",
      "        ann_file='/kaggle/working/sccos_dota/train/labels/',\r\n",
      "        img_prefix='/kaggle/working/sccos_dota/train/images/',\r\n",
      "        pipeline=[\r\n",
      "            dict(type='LoadImageFromFile'),\r\n",
      "            dict(type='LoadAnnotations', with_bbox=True),\r\n",
      "            dict(type='RResize', img_scale=(1024, 1024)),\r\n",
      "            dict(\r\n",
      "                type='RRandomFlip',\r\n",
      "                flip_ratio=[0.25, 0.25, 0.25],\r\n",
      "                direction=['horizontal', 'vertical', 'diagonal'],\r\n",
      "                version='le90'),\r\n",
      "            dict(\r\n",
      "                type='Normalize',\r\n",
      "                mean=[123.675, 116.28, 103.53],\r\n",
      "                std=[58.395, 57.12, 57.375],\r\n",
      "                to_rgb=True),\r\n",
      "            dict(type='Pad', size_divisor=32),\r\n",
      "            dict(type='DefaultFormatBundle'),\r\n",
      "            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\r\n",
      "        ],\r\n",
      "        classes=('ship', ),\r\n",
      "        version='le90'),\r\n",
      "    val=dict(\r\n",
      "        type='DOTADataset',\r\n",
      "        ann_file='/kaggle/working/sccos_dota/val/labels/',\r\n",
      "        img_prefix='/kaggle/working/sccos_dota/val/images/',\r\n",
      "        pipeline=[\r\n",
      "            dict(type='LoadImageFromFile'),\r\n",
      "            dict(\r\n",
      "                type='MultiScaleFlipAug',\r\n",
      "                img_scale=(1024, 1024),\r\n",
      "                flip=False,\r\n",
      "                transforms=[\r\n",
      "                    dict(type='RResize'),\r\n",
      "                    dict(\r\n",
      "                        type='Normalize',\r\n",
      "                        mean=[123.675, 116.28, 103.53],\r\n",
      "                        std=[58.395, 57.12, 57.375],\r\n",
      "                        to_rgb=True),\r\n",
      "                    dict(type='Pad', size_divisor=32),\r\n",
      "                    dict(type='DefaultFormatBundle'),\r\n",
      "                    dict(type='Collect', keys=['img'])\r\n",
      "                ])\r\n",
      "        ],\r\n",
      "        classes=('ship', ),\r\n",
      "        version='le90'),\r\n",
      "    test=dict(\r\n",
      "        type='DOTADataset',\r\n",
      "        ann_file='/kaggle/working/sccos_dota/test/labels/',\r\n",
      "        img_prefix='/kaggle/working/sccos_dota/test/images/',\r\n",
      "        pipeline=[\r\n",
      "            dict(type='LoadImageFromFile'),\r\n",
      "            dict(\r\n",
      "                type='MultiScaleFlipAug',\r\n",
      "                img_scale=(1024, 1024),\r\n",
      "                flip=False,\r\n",
      "                transforms=[\r\n",
      "                    dict(type='RResize'),\r\n",
      "                    dict(\r\n",
      "                        type='Normalize',\r\n",
      "                        mean=[123.675, 116.28, 103.53],\r\n",
      "                        std=[58.395, 57.12, 57.375],\r\n",
      "                        to_rgb=True),\r\n",
      "                    dict(type='Pad', size_divisor=32),\r\n",
      "                    dict(type='DefaultFormatBundle'),\r\n",
      "                    dict(type='Collect', keys=['img'])\r\n",
      "                ])\r\n",
      "        ],\r\n",
      "        classes=('ship', ),\r\n",
      "        version='le90'))\r\n",
      "evaluation = dict(interval=1, metric='mAP')\r\n",
      "optimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0001)\r\n",
      "optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\r\n",
      "lr_config = dict(\r\n",
      "    policy='step',\r\n",
      "    warmup='linear',\r\n",
      "    warmup_iters=200,\r\n",
      "    warmup_ratio=0.3333333333333333,\r\n",
      "    step=[8, 11])\r\n",
      "runner = dict(type='EpochBasedRunner', max_epochs=10)\r\n",
      "checkpoint_config = dict(interval=1)\r\n",
      "log_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\r\n",
      "dist_params = dict(backend='nccl')\r\n",
      "log_level = 'INFO'\r\n",
      "load_from = None\r\n",
      "resume_from = None\r\n",
      "workflow = [('train', 1)]\r\n",
      "opencv_num_threads = 0\r\n",
      "mp_start_method = 'fork'\r\n",
      "angle_version = 'le90'\r\n",
      "classes = ('ship', )\r\n",
      "model = dict(\r\n",
      "    type='ReDet',\r\n",
      "    backbone=dict(\r\n",
      "        type='ReResNet',\r\n",
      "        depth=50,\r\n",
      "        num_stages=4,\r\n",
      "        out_indices=(0, 1, 2, 3),\r\n",
      "        frozen_stages=1,\r\n",
      "        style='pytorch',\r\n",
      "        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\r\n",
      "    neck=dict(\r\n",
      "        type='ReFPN',\r\n",
      "        in_channels=[256, 512, 1024, 2048],\r\n",
      "        out_channels=256,\r\n",
      "        num_outs=5),\r\n",
      "    rpn_head=dict(\r\n",
      "        type='RotatedRPNHead',\r\n",
      "        in_channels=256,\r\n",
      "        feat_channels=256,\r\n",
      "        version='le90',\r\n",
      "        anchor_generator=dict(\r\n",
      "            type='AnchorGenerator',\r\n",
      "            scales=[8],\r\n",
      "            ratios=[0.5, 1.0, 2.0],\r\n",
      "            strides=[4, 8, 16, 32, 64]),\r\n",
      "        bbox_coder=dict(\r\n",
      "            type='DeltaXYWHBBoxCoder',\r\n",
      "            target_means=[0.0, 0.0, 0.0, 0.0],\r\n",
      "            target_stds=[1.0, 1.0, 1.0, 1.0]),\r\n",
      "        loss_cls=dict(\r\n",
      "            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\r\n",
      "        loss_bbox=dict(\r\n",
      "            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\r\n",
      "    roi_head=dict(\r\n",
      "        type='RoITransRoIHead',\r\n",
      "        version='le90',\r\n",
      "        num_stages=2,\r\n",
      "        stage_loss_weights=[1, 1],\r\n",
      "        bbox_roi_extractor=[\r\n",
      "            dict(\r\n",
      "                type='SingleRoIExtractor',\r\n",
      "                roi_layer=dict(\r\n",
      "                    type='RoIAlign', output_size=7, sampling_ratio=0),\r\n",
      "                out_channels=256,\r\n",
      "                featmap_strides=[4, 8, 16, 32]),\r\n",
      "            dict(\r\n",
      "                type='RotatedSingleRoIExtractor',\r\n",
      "                roi_layer=dict(\r\n",
      "                    type='RiRoIAlignRotated',\r\n",
      "                    out_size=7,\r\n",
      "                    num_samples=2,\r\n",
      "                    num_orientations=8,\r\n",
      "                    clockwise=True),\r\n",
      "                out_channels=256,\r\n",
      "                featmap_strides=[4, 8, 16, 32])\r\n",
      "        ],\r\n",
      "        bbox_head=[\r\n",
      "            dict(\r\n",
      "                type='RotatedShared2FCBBoxHead',\r\n",
      "                in_channels=256,\r\n",
      "                fc_out_channels=1024,\r\n",
      "                roi_feat_size=7,\r\n",
      "                num_classes=1,\r\n",
      "                bbox_coder=dict(\r\n",
      "                    type='DeltaXYWHAHBBoxCoder',\r\n",
      "                    angle_range='le90',\r\n",
      "                    norm_factor=2,\r\n",
      "                    edge_swap=True,\r\n",
      "                    target_means=[0.0, 0.0, 0.0, 0.0, 0.0],\r\n",
      "                    target_stds=[0.1, 0.1, 0.2, 0.2, 1.0]),\r\n",
      "                reg_class_agnostic=True,\r\n",
      "                loss_cls=dict(\r\n",
      "                    type='CrossEntropyLoss',\r\n",
      "                    use_sigmoid=False,\r\n",
      "                    loss_weight=1.0),\r\n",
      "                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\r\n",
      "                               loss_weight=1.0)),\r\n",
      "            dict(\r\n",
      "                type='RotatedShared2FCBBoxHead',\r\n",
      "                in_channels=256,\r\n",
      "                fc_out_channels=1024,\r\n",
      "                roi_feat_size=7,\r\n",
      "                num_classes=1,\r\n",
      "                bbox_coder=dict(\r\n",
      "                    type='DeltaXYWHAOBBoxCoder',\r\n",
      "                    angle_range='le90',\r\n",
      "                    norm_factor=None,\r\n",
      "                    edge_swap=True,\r\n",
      "                    proj_xy=True,\r\n",
      "                    target_means=[0.0, 0.0, 0.0, 0.0, 0.0],\r\n",
      "                    target_stds=[0.05, 0.05, 0.1, 0.1, 0.5]),\r\n",
      "                reg_class_agnostic=False,\r\n",
      "                loss_cls=dict(\r\n",
      "                    type='CrossEntropyLoss',\r\n",
      "                    use_sigmoid=False,\r\n",
      "                    loss_weight=1.0),\r\n",
      "                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\r\n",
      "        ]),\r\n",
      "    train_cfg=dict(\r\n",
      "        rpn=dict(\r\n",
      "            assigner=dict(\r\n",
      "                type='MaxIoUAssigner',\r\n",
      "                pos_iou_thr=0.7,\r\n",
      "                neg_iou_thr=0.3,\r\n",
      "                min_pos_iou=0.3,\r\n",
      "                match_low_quality=True,\r\n",
      "                ignore_iof_thr=-1),\r\n",
      "            sampler=dict(\r\n",
      "                type='RandomSampler',\r\n",
      "                num=256,\r\n",
      "                pos_fraction=0.5,\r\n",
      "                neg_pos_ub=-1,\r\n",
      "                add_gt_as_proposals=False),\r\n",
      "            allowed_border=0,\r\n",
      "            pos_weight=-1,\r\n",
      "            debug=False),\r\n",
      "        rpn_proposal=dict(\r\n",
      "            nms_pre=2000,\r\n",
      "            max_per_img=2000,\r\n",
      "            nms=dict(type='nms', iou_threshold=0.7),\r\n",
      "            min_bbox_size=0),\r\n",
      "        rcnn=[\r\n",
      "            dict(\r\n",
      "                assigner=dict(\r\n",
      "                    type='MaxIoUAssigner',\r\n",
      "                    pos_iou_thr=0.5,\r\n",
      "                    neg_iou_thr=0.5,\r\n",
      "                    min_pos_iou=0.5,\r\n",
      "                    match_low_quality=False,\r\n",
      "                    ignore_iof_thr=-1,\r\n",
      "                    iou_calculator=dict(type='BboxOverlaps2D')),\r\n",
      "                sampler=dict(\r\n",
      "                    type='RandomSampler',\r\n",
      "                    num=512,\r\n",
      "                    pos_fraction=0.25,\r\n",
      "                    neg_pos_ub=-1,\r\n",
      "                    add_gt_as_proposals=True),\r\n",
      "                pos_weight=-1,\r\n",
      "                debug=False),\r\n",
      "            dict(\r\n",
      "                assigner=dict(\r\n",
      "                    type='MaxIoUAssigner',\r\n",
      "                    pos_iou_thr=0.5,\r\n",
      "                    neg_iou_thr=0.5,\r\n",
      "                    min_pos_iou=0.5,\r\n",
      "                    match_low_quality=False,\r\n",
      "                    ignore_iof_thr=-1,\r\n",
      "                    iou_calculator=dict(type='RBboxOverlaps2D')),\r\n",
      "                sampler=dict(\r\n",
      "                    type='RRandomSampler',\r\n",
      "                    num=512,\r\n",
      "                    pos_fraction=0.25,\r\n",
      "                    neg_pos_ub=-1,\r\n",
      "                    add_gt_as_proposals=True),\r\n",
      "                pos_weight=-1,\r\n",
      "                debug=False)\r\n",
      "        ]),\r\n",
      "    test_cfg=dict(\r\n",
      "        rpn=dict(\r\n",
      "            nms_pre=2000,\r\n",
      "            max_per_img=2000,\r\n",
      "            nms=dict(type='nms', iou_threshold=0.7),\r\n",
      "            min_bbox_size=0),\r\n",
      "        rcnn=dict(\r\n",
      "            nms_pre=2000,\r\n",
      "            min_bbox_size=0,\r\n",
      "            score_thr=0.05,\r\n",
      "            nms=dict(iou_thr=0.1),\r\n",
      "            max_per_img=2000)))\r\n",
      "work_dir = '/kaggle/working/runs/redet_train'\r\n",
      "auto_resume = False\r\n",
      "gpu_ids = range(0, 1)\r\n",
      "\r\n",
      "2025-03-18 09:01:51,093 - mmrotate - INFO - Set random seed to 1297466876, deterministic: False\r\n",
      "/usr/local/lib/python3.10/dist-packages/e2cnn/nn/modules/r2_conv/basisexpansion_singleblock.py:80: UserWarning: indexing with dtype torch.uint8 is now deprecated, please use a dtype torch.bool instead. (Triggered internally at ../aten/src/ATen/native/IndexingUtils.h:27.)\r\n",
      "  full_mask[mask] = norms.to(torch.uint8)\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmdet/models/dense_heads/anchor_head.py:116: UserWarning: DeprecationWarning: `num_anchors` is deprecated, for consistency or also use `num_base_priors` instead\r\n",
      "  warnings.warn('DeprecationWarning: `num_anchors` is deprecated, '\r\n",
      "2025-03-18 09:02:17,555 - mmcv - INFO - initialize RotatedRPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}\r\n",
      "2025-03-18 09:02:17,560 - mmcv - INFO - initialize RotatedShared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]\r\n",
      "2025-03-18 09:02:17,745 - mmcv - INFO - initialize RotatedShared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'layer': 'Linear', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]\r\n",
      "2025-03-18 09:02:17,941 - mmcv - INFO - \r\n",
      "backbone.conv1.weights - torch.Size([960]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,942 - mmcv - INFO - \r\n",
      "backbone.bn1.batch_norm_[8].weight - torch.Size([8]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,942 - mmcv - INFO - \r\n",
      "backbone.bn1.batch_norm_[8].bias - torch.Size([8]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,942 - mmcv - INFO - \r\n",
      "backbone.layer1.0.conv1.weights - torch.Size([512]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,942 - mmcv - INFO - \r\n",
      "backbone.layer1.0.bn1.batch_norm_[8].weight - torch.Size([8]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,942 - mmcv - INFO - \r\n",
      "backbone.layer1.0.bn1.batch_norm_[8].bias - torch.Size([8]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,942 - mmcv - INFO - \r\n",
      "backbone.layer1.0.conv2.weights - torch.Size([4096]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,944 - mmcv - INFO - \r\n",
      "backbone.layer1.0.bn2.batch_norm_[8].weight - torch.Size([8]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,944 - mmcv - INFO - \r\n",
      "backbone.layer1.0.bn2.batch_norm_[8].bias - torch.Size([8]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,944 - mmcv - INFO - \r\n",
      "backbone.layer1.0.conv3.weights - torch.Size([2048]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,944 - mmcv - INFO - \r\n",
      "backbone.layer1.0.bn3.batch_norm_[8].weight - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,944 - mmcv - INFO - \r\n",
      "backbone.layer1.0.bn3.batch_norm_[8].bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,944 - mmcv - INFO - \r\n",
      "backbone.layer1.0.downsample.0.weights - torch.Size([2048]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,946 - mmcv - INFO - \r\n",
      "backbone.layer1.0.downsample.1.batch_norm_[8].weight - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,946 - mmcv - INFO - \r\n",
      "backbone.layer1.0.downsample.1.batch_norm_[8].bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,946 - mmcv - INFO - \r\n",
      "backbone.layer1.1.conv1.weights - torch.Size([2048]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,946 - mmcv - INFO - \r\n",
      "backbone.layer1.1.bn1.batch_norm_[8].weight - torch.Size([8]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,947 - mmcv - INFO - \r\n",
      "backbone.layer1.1.bn1.batch_norm_[8].bias - torch.Size([8]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,947 - mmcv - INFO - \r\n",
      "backbone.layer1.1.conv2.weights - torch.Size([4096]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,951 - mmcv - INFO - \r\n",
      "backbone.layer1.1.bn2.batch_norm_[8].weight - torch.Size([8]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,951 - mmcv - INFO - \r\n",
      "backbone.layer1.1.bn2.batch_norm_[8].bias - torch.Size([8]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,951 - mmcv - INFO - \r\n",
      "backbone.layer1.1.conv3.weights - torch.Size([2048]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,952 - mmcv - INFO - \r\n",
      "backbone.layer1.1.bn3.batch_norm_[8].weight - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,953 - mmcv - INFO - \r\n",
      "backbone.layer1.1.bn3.batch_norm_[8].bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,953 - mmcv - INFO - \r\n",
      "backbone.layer1.2.conv1.weights - torch.Size([2048]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,954 - mmcv - INFO - \r\n",
      "backbone.layer1.2.bn1.batch_norm_[8].weight - torch.Size([8]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,954 - mmcv - INFO - \r\n",
      "backbone.layer1.2.bn1.batch_norm_[8].bias - torch.Size([8]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,954 - mmcv - INFO - \r\n",
      "backbone.layer1.2.conv2.weights - torch.Size([4096]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,958 - mmcv - INFO - \r\n",
      "backbone.layer1.2.bn2.batch_norm_[8].weight - torch.Size([8]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,959 - mmcv - INFO - \r\n",
      "backbone.layer1.2.bn2.batch_norm_[8].bias - torch.Size([8]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,959 - mmcv - INFO - \r\n",
      "backbone.layer1.2.conv3.weights - torch.Size([2048]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,960 - mmcv - INFO - \r\n",
      "backbone.layer1.2.bn3.batch_norm_[8].weight - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,960 - mmcv - INFO - \r\n",
      "backbone.layer1.2.bn3.batch_norm_[8].bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,960 - mmcv - INFO - \r\n",
      "backbone.layer2.0.conv1.weights - torch.Size([4096]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,961 - mmcv - INFO - \r\n",
      "backbone.layer2.0.bn1.batch_norm_[8].weight - torch.Size([16]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,961 - mmcv - INFO - \r\n",
      "backbone.layer2.0.bn1.batch_norm_[8].bias - torch.Size([16]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,961 - mmcv - INFO - \r\n",
      "backbone.layer2.0.conv2.weights - torch.Size([16384]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,962 - mmcv - INFO - \r\n",
      "backbone.layer2.0.bn2.batch_norm_[8].weight - torch.Size([16]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,962 - mmcv - INFO - \r\n",
      "backbone.layer2.0.bn2.batch_norm_[8].bias - torch.Size([16]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,962 - mmcv - INFO - \r\n",
      "backbone.layer2.0.conv3.weights - torch.Size([8192]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,962 - mmcv - INFO - \r\n",
      "backbone.layer2.0.bn3.batch_norm_[8].weight - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,963 - mmcv - INFO - \r\n",
      "backbone.layer2.0.bn3.batch_norm_[8].bias - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,963 - mmcv - INFO - \r\n",
      "backbone.layer2.0.downsample.0.weights - torch.Size([16384]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,963 - mmcv - INFO - \r\n",
      "backbone.layer2.0.downsample.1.batch_norm_[8].weight - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,963 - mmcv - INFO - \r\n",
      "backbone.layer2.0.downsample.1.batch_norm_[8].bias - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,963 - mmcv - INFO - \r\n",
      "backbone.layer2.1.conv1.weights - torch.Size([8192]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,964 - mmcv - INFO - \r\n",
      "backbone.layer2.1.bn1.batch_norm_[8].weight - torch.Size([16]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,964 - mmcv - INFO - \r\n",
      "backbone.layer2.1.bn1.batch_norm_[8].bias - torch.Size([16]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,964 - mmcv - INFO - \r\n",
      "backbone.layer2.1.conv2.weights - torch.Size([16384]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,968 - mmcv - INFO - \r\n",
      "backbone.layer2.1.bn2.batch_norm_[8].weight - torch.Size([16]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,968 - mmcv - INFO - \r\n",
      "backbone.layer2.1.bn2.batch_norm_[8].bias - torch.Size([16]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,968 - mmcv - INFO - \r\n",
      "backbone.layer2.1.conv3.weights - torch.Size([8192]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,969 - mmcv - INFO - \r\n",
      "backbone.layer2.1.bn3.batch_norm_[8].weight - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,970 - mmcv - INFO - \r\n",
      "backbone.layer2.1.bn3.batch_norm_[8].bias - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,970 - mmcv - INFO - \r\n",
      "backbone.layer2.2.conv1.weights - torch.Size([8192]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,971 - mmcv - INFO - \r\n",
      "backbone.layer2.2.bn1.batch_norm_[8].weight - torch.Size([16]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,971 - mmcv - INFO - \r\n",
      "backbone.layer2.2.bn1.batch_norm_[8].bias - torch.Size([16]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,971 - mmcv - INFO - \r\n",
      "backbone.layer2.2.conv2.weights - torch.Size([16384]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,975 - mmcv - INFO - \r\n",
      "backbone.layer2.2.bn2.batch_norm_[8].weight - torch.Size([16]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,976 - mmcv - INFO - \r\n",
      "backbone.layer2.2.bn2.batch_norm_[8].bias - torch.Size([16]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,976 - mmcv - INFO - \r\n",
      "backbone.layer2.2.conv3.weights - torch.Size([8192]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,977 - mmcv - INFO - \r\n",
      "backbone.layer2.2.bn3.batch_norm_[8].weight - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,977 - mmcv - INFO - \r\n",
      "backbone.layer2.2.bn3.batch_norm_[8].bias - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,977 - mmcv - INFO - \r\n",
      "backbone.layer2.3.conv1.weights - torch.Size([8192]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,979 - mmcv - INFO - \r\n",
      "backbone.layer2.3.bn1.batch_norm_[8].weight - torch.Size([16]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,979 - mmcv - INFO - \r\n",
      "backbone.layer2.3.bn1.batch_norm_[8].bias - torch.Size([16]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,979 - mmcv - INFO - \r\n",
      "backbone.layer2.3.conv2.weights - torch.Size([16384]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,983 - mmcv - INFO - \r\n",
      "backbone.layer2.3.bn2.batch_norm_[8].weight - torch.Size([16]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,983 - mmcv - INFO - \r\n",
      "backbone.layer2.3.bn2.batch_norm_[8].bias - torch.Size([16]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,983 - mmcv - INFO - \r\n",
      "backbone.layer2.3.conv3.weights - torch.Size([8192]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,985 - mmcv - INFO - \r\n",
      "backbone.layer2.3.bn3.batch_norm_[8].weight - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,985 - mmcv - INFO - \r\n",
      "backbone.layer2.3.bn3.batch_norm_[8].bias - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,985 - mmcv - INFO - \r\n",
      "backbone.layer3.0.conv1.weights - torch.Size([16384]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,985 - mmcv - INFO - \r\n",
      "backbone.layer3.0.bn1.batch_norm_[8].weight - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,985 - mmcv - INFO - \r\n",
      "backbone.layer3.0.bn1.batch_norm_[8].bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,986 - mmcv - INFO - \r\n",
      "backbone.layer3.0.conv2.weights - torch.Size([65536]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,986 - mmcv - INFO - \r\n",
      "backbone.layer3.0.bn2.batch_norm_[8].weight - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,987 - mmcv - INFO - \r\n",
      "backbone.layer3.0.bn2.batch_norm_[8].bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,987 - mmcv - INFO - \r\n",
      "backbone.layer3.0.conv3.weights - torch.Size([32768]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,987 - mmcv - INFO - \r\n",
      "backbone.layer3.0.bn3.batch_norm_[8].weight - torch.Size([128]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,987 - mmcv - INFO - \r\n",
      "backbone.layer3.0.bn3.batch_norm_[8].bias - torch.Size([128]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,987 - mmcv - INFO - \r\n",
      "backbone.layer3.0.downsample.0.weights - torch.Size([65536]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,988 - mmcv - INFO - \r\n",
      "backbone.layer3.0.downsample.1.batch_norm_[8].weight - torch.Size([128]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,988 - mmcv - INFO - \r\n",
      "backbone.layer3.0.downsample.1.batch_norm_[8].bias - torch.Size([128]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,988 - mmcv - INFO - \r\n",
      "backbone.layer3.1.conv1.weights - torch.Size([32768]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,988 - mmcv - INFO - \r\n",
      "backbone.layer3.1.bn1.batch_norm_[8].weight - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,988 - mmcv - INFO - \r\n",
      "backbone.layer3.1.bn1.batch_norm_[8].bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,989 - mmcv - INFO - \r\n",
      "backbone.layer3.1.conv2.weights - torch.Size([65536]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,995 - mmcv - INFO - \r\n",
      "backbone.layer3.1.bn2.batch_norm_[8].weight - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,995 - mmcv - INFO - \r\n",
      "backbone.layer3.1.bn2.batch_norm_[8].bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,995 - mmcv - INFO - \r\n",
      "backbone.layer3.1.conv3.weights - torch.Size([32768]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,997 - mmcv - INFO - \r\n",
      "backbone.layer3.1.bn3.batch_norm_[8].weight - torch.Size([128]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,997 - mmcv - INFO - \r\n",
      "backbone.layer3.1.bn3.batch_norm_[8].bias - torch.Size([128]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,997 - mmcv - INFO - \r\n",
      "backbone.layer3.2.conv1.weights - torch.Size([32768]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,998 - mmcv - INFO - \r\n",
      "backbone.layer3.2.bn1.batch_norm_[8].weight - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,999 - mmcv - INFO - \r\n",
      "backbone.layer3.2.bn1.batch_norm_[8].bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:17,999 - mmcv - INFO - \r\n",
      "backbone.layer3.2.conv2.weights - torch.Size([65536]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,003 - mmcv - INFO - \r\n",
      "backbone.layer3.2.bn2.batch_norm_[8].weight - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,003 - mmcv - INFO - \r\n",
      "backbone.layer3.2.bn2.batch_norm_[8].bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,003 - mmcv - INFO - \r\n",
      "backbone.layer3.2.conv3.weights - torch.Size([32768]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,004 - mmcv - INFO - \r\n",
      "backbone.layer3.2.bn3.batch_norm_[8].weight - torch.Size([128]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,005 - mmcv - INFO - \r\n",
      "backbone.layer3.2.bn3.batch_norm_[8].bias - torch.Size([128]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,005 - mmcv - INFO - \r\n",
      "backbone.layer3.3.conv1.weights - torch.Size([32768]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,006 - mmcv - INFO - \r\n",
      "backbone.layer3.3.bn1.batch_norm_[8].weight - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,006 - mmcv - INFO - \r\n",
      "backbone.layer3.3.bn1.batch_norm_[8].bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,006 - mmcv - INFO - \r\n",
      "backbone.layer3.3.conv2.weights - torch.Size([65536]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,010 - mmcv - INFO - \r\n",
      "backbone.layer3.3.bn2.batch_norm_[8].weight - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,011 - mmcv - INFO - \r\n",
      "backbone.layer3.3.bn2.batch_norm_[8].bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,011 - mmcv - INFO - \r\n",
      "backbone.layer3.3.conv3.weights - torch.Size([32768]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,012 - mmcv - INFO - \r\n",
      "backbone.layer3.3.bn3.batch_norm_[8].weight - torch.Size([128]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,012 - mmcv - INFO - \r\n",
      "backbone.layer3.3.bn3.batch_norm_[8].bias - torch.Size([128]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,012 - mmcv - INFO - \r\n",
      "backbone.layer3.4.conv1.weights - torch.Size([32768]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,014 - mmcv - INFO - \r\n",
      "backbone.layer3.4.bn1.batch_norm_[8].weight - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,014 - mmcv - INFO - \r\n",
      "backbone.layer3.4.bn1.batch_norm_[8].bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,014 - mmcv - INFO - \r\n",
      "backbone.layer3.4.conv2.weights - torch.Size([65536]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,018 - mmcv - INFO - \r\n",
      "backbone.layer3.4.bn2.batch_norm_[8].weight - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,018 - mmcv - INFO - \r\n",
      "backbone.layer3.4.bn2.batch_norm_[8].bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,018 - mmcv - INFO - \r\n",
      "backbone.layer3.4.conv3.weights - torch.Size([32768]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,020 - mmcv - INFO - \r\n",
      "backbone.layer3.4.bn3.batch_norm_[8].weight - torch.Size([128]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,020 - mmcv - INFO - \r\n",
      "backbone.layer3.4.bn3.batch_norm_[8].bias - torch.Size([128]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,020 - mmcv - INFO - \r\n",
      "backbone.layer3.5.conv1.weights - torch.Size([32768]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,021 - mmcv - INFO - \r\n",
      "backbone.layer3.5.bn1.batch_norm_[8].weight - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,021 - mmcv - INFO - \r\n",
      "backbone.layer3.5.bn1.batch_norm_[8].bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,021 - mmcv - INFO - \r\n",
      "backbone.layer3.5.conv2.weights - torch.Size([65536]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,026 - mmcv - INFO - \r\n",
      "backbone.layer3.5.bn2.batch_norm_[8].weight - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,026 - mmcv - INFO - \r\n",
      "backbone.layer3.5.bn2.batch_norm_[8].bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,026 - mmcv - INFO - \r\n",
      "backbone.layer3.5.conv3.weights - torch.Size([32768]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,027 - mmcv - INFO - \r\n",
      "backbone.layer3.5.bn3.batch_norm_[8].weight - torch.Size([128]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,027 - mmcv - INFO - \r\n",
      "backbone.layer3.5.bn3.batch_norm_[8].bias - torch.Size([128]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,028 - mmcv - INFO - \r\n",
      "backbone.layer4.0.conv1.weights - torch.Size([65536]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,028 - mmcv - INFO - \r\n",
      "backbone.layer4.0.bn1.batch_norm_[8].weight - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,028 - mmcv - INFO - \r\n",
      "backbone.layer4.0.bn1.batch_norm_[8].bias - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,028 - mmcv - INFO - \r\n",
      "backbone.layer4.0.conv2.weights - torch.Size([262144]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,029 - mmcv - INFO - \r\n",
      "backbone.layer4.0.bn2.batch_norm_[8].weight - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,029 - mmcv - INFO - \r\n",
      "backbone.layer4.0.bn2.batch_norm_[8].bias - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,029 - mmcv - INFO - \r\n",
      "backbone.layer4.0.conv3.weights - torch.Size([131072]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,030 - mmcv - INFO - \r\n",
      "backbone.layer4.0.bn3.batch_norm_[8].weight - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,030 - mmcv - INFO - \r\n",
      "backbone.layer4.0.bn3.batch_norm_[8].bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,030 - mmcv - INFO - \r\n",
      "backbone.layer4.0.downsample.0.weights - torch.Size([262144]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,030 - mmcv - INFO - \r\n",
      "backbone.layer4.0.downsample.1.batch_norm_[8].weight - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,030 - mmcv - INFO - \r\n",
      "backbone.layer4.0.downsample.1.batch_norm_[8].bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,031 - mmcv - INFO - \r\n",
      "backbone.layer4.1.conv1.weights - torch.Size([131072]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,031 - mmcv - INFO - \r\n",
      "backbone.layer4.1.bn1.batch_norm_[8].weight - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,031 - mmcv - INFO - \r\n",
      "backbone.layer4.1.bn1.batch_norm_[8].bias - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,031 - mmcv - INFO - \r\n",
      "backbone.layer4.1.conv2.weights - torch.Size([262144]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,035 - mmcv - INFO - \r\n",
      "backbone.layer4.1.bn2.batch_norm_[8].weight - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,036 - mmcv - INFO - \r\n",
      "backbone.layer4.1.bn2.batch_norm_[8].bias - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,036 - mmcv - INFO - \r\n",
      "backbone.layer4.1.conv3.weights - torch.Size([131072]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,037 - mmcv - INFO - \r\n",
      "backbone.layer4.1.bn3.batch_norm_[8].weight - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,037 - mmcv - INFO - \r\n",
      "backbone.layer4.1.bn3.batch_norm_[8].bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,037 - mmcv - INFO - \r\n",
      "backbone.layer4.2.conv1.weights - torch.Size([131072]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,039 - mmcv - INFO - \r\n",
      "backbone.layer4.2.bn1.batch_norm_[8].weight - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,039 - mmcv - INFO - \r\n",
      "backbone.layer4.2.bn1.batch_norm_[8].bias - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,039 - mmcv - INFO - \r\n",
      "backbone.layer4.2.conv2.weights - torch.Size([262144]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,046 - mmcv - INFO - \r\n",
      "backbone.layer4.2.bn2.batch_norm_[8].weight - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,046 - mmcv - INFO - \r\n",
      "backbone.layer4.2.bn2.batch_norm_[8].bias - torch.Size([64]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,046 - mmcv - INFO - \r\n",
      "backbone.layer4.2.conv3.weights - torch.Size([131072]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,048 - mmcv - INFO - \r\n",
      "backbone.layer4.2.bn3.batch_norm_[8].weight - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,048 - mmcv - INFO - \r\n",
      "backbone.layer4.2.bn3.batch_norm_[8].bias - torch.Size([256]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,048 - mmcv - INFO - \r\n",
      "neck.lateral_convs.0.conv.bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,048 - mmcv - INFO - \r\n",
      "neck.lateral_convs.0.conv.weights - torch.Size([8192]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,049 - mmcv - INFO - \r\n",
      "neck.lateral_convs.1.conv.bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,049 - mmcv - INFO - \r\n",
      "neck.lateral_convs.1.conv.weights - torch.Size([16384]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,050 - mmcv - INFO - \r\n",
      "neck.lateral_convs.2.conv.bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,051 - mmcv - INFO - \r\n",
      "neck.lateral_convs.2.conv.weights - torch.Size([32768]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,052 - mmcv - INFO - \r\n",
      "neck.lateral_convs.3.conv.bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,052 - mmcv - INFO - \r\n",
      "neck.lateral_convs.3.conv.weights - torch.Size([65536]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,053 - mmcv - INFO - \r\n",
      "neck.fpn_convs.0.conv.bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,053 - mmcv - INFO - \r\n",
      "neck.fpn_convs.0.conv.weights - torch.Size([65536]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,057 - mmcv - INFO - \r\n",
      "neck.fpn_convs.1.conv.bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,057 - mmcv - INFO - \r\n",
      "neck.fpn_convs.1.conv.weights - torch.Size([65536]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,062 - mmcv - INFO - \r\n",
      "neck.fpn_convs.2.conv.bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,062 - mmcv - INFO - \r\n",
      "neck.fpn_convs.2.conv.weights - torch.Size([65536]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,066 - mmcv - INFO - \r\n",
      "neck.fpn_convs.3.conv.bias - torch.Size([32]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,066 - mmcv - INFO - \r\n",
      "neck.fpn_convs.3.conv.weights - torch.Size([65536]): \r\n",
      "The value is the same before and after calling `init_weights` of ReDet  \r\n",
      " \r\n",
      "2025-03-18 09:02:18,070 - mmcv - INFO - \r\n",
      "rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,070 - mmcv - INFO - \r\n",
      "rpn_head.rpn_conv.bias - torch.Size([256]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,070 - mmcv - INFO - \r\n",
      "rpn_head.rpn_cls.weight - torch.Size([3, 256, 1, 1]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,070 - mmcv - INFO - \r\n",
      "rpn_head.rpn_cls.bias - torch.Size([3]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,070 - mmcv - INFO - \r\n",
      "rpn_head.rpn_reg.weight - torch.Size([12, 256, 1, 1]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,071 - mmcv - INFO - \r\n",
      "rpn_head.rpn_reg.bias - torch.Size([12]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,071 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.0.fc_cls.weight - torch.Size([2, 1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,071 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.0.fc_cls.bias - torch.Size([2]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,071 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.0.fc_reg.weight - torch.Size([5, 1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,071 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.0.fc_reg.bias - torch.Size([5]): \r\n",
      "NormalInit: mean=0, std=0.001, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,071 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,071 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,071 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,071 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,071 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.1.fc_cls.weight - torch.Size([2, 1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,072 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.1.fc_cls.bias - torch.Size([2]): \r\n",
      "NormalInit: mean=0, std=0.01, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,072 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.1.fc_reg.weight - torch.Size([5, 1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,072 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.1.fc_reg.bias - torch.Size([5]): \r\n",
      "NormalInit: mean=0, std=0.001, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,072 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,072 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,072 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:18,072 - mmcv - INFO - \r\n",
      "roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): \r\n",
      "XavierInit: gain=1, distribution=normal, bias=0 \r\n",
      " \r\n",
      "2025-03-18 09:02:20,899 - mmrotate - INFO - Start running, host: root@d9025e61e510, work_dir: /kaggle/working/runs/redet_train\r\n",
      "2025-03-18 09:02:20,899 - mmrotate - INFO - Hooks will be executed in the following order:\r\n",
      "before_run:\r\n",
      "(VERY_HIGH   ) StepLrUpdaterHook                  \r\n",
      "(NORMAL      ) CheckpointHook                     \r\n",
      "(LOW         ) EvalHook                           \r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "before_train_epoch:\r\n",
      "(VERY_HIGH   ) StepLrUpdaterHook                  \r\n",
      "(LOW         ) IterTimerHook                      \r\n",
      "(LOW         ) EvalHook                           \r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "before_train_iter:\r\n",
      "(VERY_HIGH   ) StepLrUpdaterHook                  \r\n",
      "(LOW         ) IterTimerHook                      \r\n",
      "(LOW         ) EvalHook                           \r\n",
      " -------------------- \r\n",
      "after_train_iter:\r\n",
      "(ABOVE_NORMAL) OptimizerHook                      \r\n",
      "(NORMAL      ) CheckpointHook                     \r\n",
      "(LOW         ) IterTimerHook                      \r\n",
      "(LOW         ) EvalHook                           \r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "after_train_epoch:\r\n",
      "(NORMAL      ) CheckpointHook                     \r\n",
      "(LOW         ) EvalHook                           \r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "before_val_epoch:\r\n",
      "(LOW         ) IterTimerHook                      \r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "before_val_iter:\r\n",
      "(LOW         ) IterTimerHook                      \r\n",
      " -------------------- \r\n",
      "after_val_iter:\r\n",
      "(LOW         ) IterTimerHook                      \r\n",
      " -------------------- \r\n",
      "after_val_epoch:\r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "after_run:\r\n",
      "(VERY_LOW    ) TextLoggerHook                     \r\n",
      " -------------------- \r\n",
      "2025-03-18 09:02:20,900 - mmrotate - INFO - workflow: [('train', 1)], max: 10 epochs\r\n",
      "2025-03-18 09:02:20,900 - mmrotate - INFO - Checkpoints will be saved to /kaggle/working/runs/redet_train by HardDiskBackend.\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmdet/models/dense_heads/anchor_head.py:123: UserWarning: DeprecationWarning: anchor_generator is deprecated, please use \"prior_generator\" instead\r\n",
      "  warnings.warn('DeprecationWarning: anchor_generator is deprecated, '\r\n",
      "2025-03-18 09:04:26,162 - mmrotate - INFO - Epoch [1][100/928]\tlr: 3.317e-03, eta: 3:10:56, time: 1.248, data_time: 0.043, memory: 6882, loss_rpn_cls: 0.2188, loss_rpn_bbox: 0.0447, s0.loss_cls: 0.1322, s0.acc: 97.2993, s0.loss_bbox: 0.1795, s1.loss_cls: 0.1380, s1.acc: 98.2793, s1.loss_bbox: 0.0412, loss: 0.7544, grad_norm: 10.5008\r\n",
      "2025-03-18 09:06:27,119 - mmrotate - INFO - Epoch [1][200/928]\tlr: 4.983e-03, eta: 3:05:57, time: 1.210, data_time: 0.019, memory: 6882, loss_rpn_cls: 0.1376, loss_rpn_bbox: 0.0388, s0.loss_cls: 0.1430, s0.acc: 96.7598, s0.loss_bbox: 0.2057, s1.loss_cls: 0.0515, s1.acc: 99.0215, s1.loss_bbox: 0.0259, loss: 0.6025, grad_norm: 6.0025\r\n",
      "2025-03-18 09:08:28,134 - mmrotate - INFO - Epoch [1][300/928]\tlr: 5.000e-03, eta: 3:02:58, time: 1.210, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.1322, loss_rpn_bbox: 0.0402, s0.loss_cls: 0.1239, s0.acc: 97.0444, s0.loss_bbox: 0.1620, s1.loss_cls: 0.0442, s1.acc: 99.1235, s1.loss_bbox: 0.0163, loss: 0.5187, grad_norm: 4.0697\r\n",
      "2025-03-18 09:10:29,120 - mmrotate - INFO - Epoch [1][400/928]\tlr: 5.000e-03, eta: 3:00:28, time: 1.210, data_time: 0.019, memory: 6882, loss_rpn_cls: 0.1217, loss_rpn_bbox: 0.0383, s0.loss_cls: 0.1266, s0.acc: 96.7476, s0.loss_bbox: 0.1621, s1.loss_cls: 0.0415, s1.acc: 99.1006, s1.loss_bbox: 0.0156, loss: 0.5058, grad_norm: 3.4062\r\n",
      "2025-03-18 09:12:30,731 - mmrotate - INFO - Epoch [1][500/928]\tlr: 5.000e-03, eta: 2:58:20, time: 1.216, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.1118, loss_rpn_bbox: 0.0326, s0.loss_cls: 0.1376, s0.acc: 96.1553, s0.loss_bbox: 0.1920, s1.loss_cls: 0.0399, s1.acc: 99.1196, s1.loss_bbox: 0.0156, loss: 0.5296, grad_norm: 3.1866\r\n",
      "2025-03-18 09:14:30,910 - mmrotate - INFO - Epoch [1][600/928]\tlr: 5.000e-03, eta: 2:55:54, time: 1.202, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.1179, loss_rpn_bbox: 0.0418, s0.loss_cls: 0.1423, s0.acc: 96.0923, s0.loss_bbox: 0.1825, s1.loss_cls: 0.0446, s1.acc: 98.9951, s1.loss_bbox: 0.0193, loss: 0.5484, grad_norm: 3.0983\r\n",
      "2025-03-18 09:16:30,886 - mmrotate - INFO - Epoch [1][700/928]\tlr: 5.000e-03, eta: 2:53:32, time: 1.200, data_time: 0.019, memory: 6882, loss_rpn_cls: 0.0949, loss_rpn_bbox: 0.0331, s0.loss_cls: 0.1450, s0.acc: 95.8555, s0.loss_bbox: 0.1890, s1.loss_cls: 0.0402, s1.acc: 99.0571, s1.loss_bbox: 0.0199, loss: 0.5220, grad_norm: 2.7508\r\n",
      "2025-03-18 09:18:29,903 - mmrotate - INFO - Epoch [1][800/928]\tlr: 5.000e-03, eta: 2:51:06, time: 1.190, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0893, loss_rpn_bbox: 0.0317, s0.loss_cls: 0.1469, s0.acc: 95.7832, s0.loss_bbox: 0.1794, s1.loss_cls: 0.0403, s1.acc: 99.0566, s1.loss_bbox: 0.0206, loss: 0.5082, grad_norm: 2.8026\r\n",
      "2025-03-18 09:20:28,755 - mmrotate - INFO - Epoch [1][900/928]\tlr: 5.000e-03, eta: 2:48:44, time: 1.189, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0947, loss_rpn_bbox: 0.0384, s0.loss_cls: 0.1558, s0.acc: 95.3926, s0.loss_bbox: 0.1841, s1.loss_cls: 0.0451, s1.acc: 98.9146, s1.loss_bbox: 0.0213, loss: 0.5393, grad_norm: 2.8608\r\n",
      "2025-03-18 09:21:02,357 - mmrotate - INFO - Saving checkpoint at 1 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 3.0 task/s, elapsed: 155s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 09:23:45,512 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 2334 | 0.068  | 0.091 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.091 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 09:23:45,586 - mmrotate - INFO - Exp name: redet_re50_refpn_1x_sccos.py\r\n",
      "2025-03-18 09:23:45,587 - mmrotate - INFO - Epoch(val) [1][464]\tmAP: 0.0909\r\n",
      "2025-03-18 09:25:47,495 - mmrotate - INFO - Epoch [2][100/928]\tlr: 5.000e-03, eta: 2:41:46, time: 1.218, data_time: 0.045, memory: 6882, loss_rpn_cls: 0.0764, loss_rpn_bbox: 0.0319, s0.loss_cls: 0.1463, s0.acc: 95.6309, s0.loss_bbox: 0.1780, s1.loss_cls: 0.0374, s1.acc: 99.0801, s1.loss_bbox: 0.0200, loss: 0.4899, grad_norm: 2.7117\r\n",
      "2025-03-18 09:27:46,446 - mmrotate - INFO - Epoch [2][200/928]\tlr: 5.000e-03, eta: 2:39:58, time: 1.190, data_time: 0.019, memory: 6882, loss_rpn_cls: 0.0790, loss_rpn_bbox: 0.0364, s0.loss_cls: 0.1529, s0.acc: 95.1362, s0.loss_bbox: 0.1825, s1.loss_cls: 0.0375, s1.acc: 99.0063, s1.loss_bbox: 0.0235, loss: 0.5117, grad_norm: 2.8075\r\n",
      "2025-03-18 09:29:45,088 - mmrotate - INFO - Epoch [2][300/928]\tlr: 5.000e-03, eta: 2:38:06, time: 1.186, data_time: 0.019, memory: 6882, loss_rpn_cls: 0.0756, loss_rpn_bbox: 0.0370, s0.loss_cls: 0.1505, s0.acc: 95.2549, s0.loss_bbox: 0.1813, s1.loss_cls: 0.0380, s1.acc: 98.9556, s1.loss_bbox: 0.0284, loss: 0.5107, grad_norm: 2.9299\r\n",
      "2025-03-18 09:31:43,862 - mmrotate - INFO - Epoch [2][400/928]\tlr: 5.000e-03, eta: 2:36:14, time: 1.188, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0717, loss_rpn_bbox: 0.0304, s0.loss_cls: 0.1490, s0.acc: 95.2134, s0.loss_bbox: 0.1755, s1.loss_cls: 0.0323, s1.acc: 99.1416, s1.loss_bbox: 0.0249, loss: 0.4838, grad_norm: 2.8019\r\n",
      "2025-03-18 09:33:43,103 - mmrotate - INFO - Epoch [2][500/928]\tlr: 5.000e-03, eta: 2:34:24, time: 1.192, data_time: 0.019, memory: 6882, loss_rpn_cls: 0.0684, loss_rpn_bbox: 0.0349, s0.loss_cls: 0.1411, s0.acc: 95.3281, s0.loss_bbox: 0.1548, s1.loss_cls: 0.0342, s1.acc: 99.0176, s1.loss_bbox: 0.0287, loss: 0.4621, grad_norm: 2.6335\r\n",
      "2025-03-18 09:35:43,114 - mmrotate - INFO - Epoch [2][600/928]\tlr: 5.000e-03, eta: 2:32:36, time: 1.200, data_time: 0.021, memory: 6882, loss_rpn_cls: 0.0735, loss_rpn_bbox: 0.0300, s0.loss_cls: 0.1414, s0.acc: 95.2915, s0.loss_bbox: 0.1787, s1.loss_cls: 0.0342, s1.acc: 99.0669, s1.loss_bbox: 0.0276, loss: 0.4855, grad_norm: 2.7792\r\n",
      "2025-03-18 09:37:43,158 - mmrotate - INFO - Epoch [2][700/928]\tlr: 5.000e-03, eta: 2:30:47, time: 1.200, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0731, loss_rpn_bbox: 0.0332, s0.loss_cls: 0.1467, s0.acc: 95.0630, s0.loss_bbox: 0.1659, s1.loss_cls: 0.0384, s1.acc: 98.9233, s1.loss_bbox: 0.0313, loss: 0.4885, grad_norm: 2.7084\r\n",
      "2025-03-18 09:39:42,309 - mmrotate - INFO - Epoch [2][800/928]\tlr: 5.000e-03, eta: 2:28:53, time: 1.192, data_time: 0.019, memory: 6882, loss_rpn_cls: 0.0646, loss_rpn_bbox: 0.0346, s0.loss_cls: 0.1282, s0.acc: 95.8501, s0.loss_bbox: 0.1348, s1.loss_cls: 0.0310, s1.acc: 99.1348, s1.loss_bbox: 0.0292, loss: 0.4224, grad_norm: 2.4372\r\n",
      "2025-03-18 09:41:40,503 - mmrotate - INFO - Epoch [2][900/928]\tlr: 5.000e-03, eta: 2:26:54, time: 1.182, data_time: 0.019, memory: 6882, loss_rpn_cls: 0.0636, loss_rpn_bbox: 0.0296, s0.loss_cls: 0.1313, s0.acc: 95.5415, s0.loss_bbox: 0.1541, s1.loss_cls: 0.0338, s1.acc: 99.0332, s1.loss_bbox: 0.0330, loss: 0.4454, grad_norm: 2.4369\r\n",
      "2025-03-18 09:42:13,753 - mmrotate - INFO - Saving checkpoint at 2 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 3.0 task/s, elapsed: 155s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 09:44:57,391 - mmrotate - INFO - \r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "| class | gts  | dets  | recall | ap    |\r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "| ship  | 2147 | 11196 | 0.236  | 0.148 |\r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "| mAP   |      |       |        | 0.148 |\r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "2025-03-18 09:44:57,459 - mmrotate - INFO - Exp name: redet_re50_refpn_1x_sccos.py\r\n",
      "2025-03-18 09:44:57,459 - mmrotate - INFO - Epoch(val) [2][464]\tmAP: 0.1483\r\n",
      "2025-03-18 09:46:58,374 - mmrotate - INFO - Epoch [3][100/928]\tlr: 5.000e-03, eta: 2:22:28, time: 1.208, data_time: 0.045, memory: 6882, loss_rpn_cls: 0.0596, loss_rpn_bbox: 0.0318, s0.loss_cls: 0.1436, s0.acc: 95.0415, s0.loss_bbox: 0.1634, s1.loss_cls: 0.0362, s1.acc: 98.9272, s1.loss_bbox: 0.0360, loss: 0.4706, grad_norm: 2.5874\r\n",
      "2025-03-18 09:48:56,878 - mmrotate - INFO - Epoch [3][200/928]\tlr: 5.000e-03, eta: 2:20:38, time: 1.185, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0528, loss_rpn_bbox: 0.0269, s0.loss_cls: 0.1304, s0.acc: 95.5269, s0.loss_bbox: 0.1386, s1.loss_cls: 0.0332, s1.acc: 99.0249, s1.loss_bbox: 0.0349, loss: 0.4167, grad_norm: 2.3696\r\n",
      "2025-03-18 09:50:56,620 - mmrotate - INFO - Epoch [3][300/928]\tlr: 5.000e-03, eta: 2:18:51, time: 1.197, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0629, loss_rpn_bbox: 0.0327, s0.loss_cls: 0.1302, s0.acc: 95.5811, s0.loss_bbox: 0.1381, s1.loss_cls: 0.0333, s1.acc: 98.9922, s1.loss_bbox: 0.0367, loss: 0.4339, grad_norm: 2.4406\r\n",
      "2025-03-18 09:52:55,523 - mmrotate - INFO - Epoch [3][400/928]\tlr: 5.000e-03, eta: 2:17:00, time: 1.189, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0590, loss_rpn_bbox: 0.0305, s0.loss_cls: 0.1338, s0.acc: 95.3052, s0.loss_bbox: 0.1632, s1.loss_cls: 0.0328, s1.acc: 98.9673, s1.loss_bbox: 0.0404, loss: 0.4598, grad_norm: 2.5077\r\n",
      "2025-03-18 09:54:53,910 - mmrotate - INFO - Epoch [3][500/928]\tlr: 5.000e-03, eta: 2:15:07, time: 1.184, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0518, loss_rpn_bbox: 0.0317, s0.loss_cls: 0.1311, s0.acc: 95.4238, s0.loss_bbox: 0.1626, s1.loss_cls: 0.0353, s1.acc: 98.9375, s1.loss_bbox: 0.0409, loss: 0.4534, grad_norm: 2.5948\r\n",
      "2025-03-18 09:56:52,211 - mmrotate - INFO - Epoch [3][600/928]\tlr: 5.000e-03, eta: 2:13:13, time: 1.183, data_time: 0.021, memory: 6882, loss_rpn_cls: 0.0524, loss_rpn_bbox: 0.0264, s0.loss_cls: 0.1417, s0.acc: 95.0225, s0.loss_bbox: 0.1689, s1.loss_cls: 0.0392, s1.acc: 98.7617, s1.loss_bbox: 0.0435, loss: 0.4722, grad_norm: 2.5649\r\n",
      "2025-03-18 09:58:51,751 - mmrotate - INFO - Epoch [3][700/928]\tlr: 5.000e-03, eta: 2:11:22, time: 1.195, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0602, loss_rpn_bbox: 0.0280, s0.loss_cls: 0.1338, s0.acc: 95.3442, s0.loss_bbox: 0.1407, s1.loss_cls: 0.0356, s1.acc: 98.9199, s1.loss_bbox: 0.0423, loss: 0.4407, grad_norm: 2.5602\r\n",
      "2025-03-18 10:00:52,444 - mmrotate - INFO - Epoch [3][800/928]\tlr: 5.000e-03, eta: 2:09:34, time: 1.207, data_time: 0.022, memory: 6882, loss_rpn_cls: 0.0472, loss_rpn_bbox: 0.0274, s0.loss_cls: 0.1363, s0.acc: 95.0410, s0.loss_bbox: 0.1686, s1.loss_cls: 0.0385, s1.acc: 98.7417, s1.loss_bbox: 0.0477, loss: 0.4657, grad_norm: 2.5445\r\n",
      "2025-03-18 10:02:51,588 - mmrotate - INFO - Epoch [3][900/928]\tlr: 5.000e-03, eta: 2:07:40, time: 1.191, data_time: 0.021, memory: 6882, loss_rpn_cls: 0.0538, loss_rpn_bbox: 0.0273, s0.loss_cls: 0.1355, s0.acc: 95.1802, s0.loss_bbox: 0.1536, s1.loss_cls: 0.0355, s1.acc: 98.8628, s1.loss_bbox: 0.0468, loss: 0.4526, grad_norm: 2.4976\r\n",
      "2025-03-18 10:03:24,846 - mmrotate - INFO - Saving checkpoint at 3 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 3.0 task/s, elapsed: 157s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 10:06:09,628 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 8202 | 0.375  | 0.266 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.266 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 10:06:09,705 - mmrotate - INFO - Exp name: redet_re50_refpn_1x_sccos.py\r\n",
      "2025-03-18 10:06:09,705 - mmrotate - INFO - Epoch(val) [3][464]\tmAP: 0.2662\r\n",
      "2025-03-18 10:08:10,867 - mmrotate - INFO - Epoch [4][100/928]\tlr: 5.000e-03, eta: 2:04:05, time: 1.211, data_time: 0.044, memory: 6882, loss_rpn_cls: 0.0497, loss_rpn_bbox: 0.0292, s0.loss_cls: 0.1330, s0.acc: 95.1948, s0.loss_bbox: 0.1510, s1.loss_cls: 0.0379, s1.acc: 98.7456, s1.loss_bbox: 0.0538, loss: 0.4546, grad_norm: 2.4925\r\n",
      "2025-03-18 10:10:09,557 - mmrotate - INFO - Epoch [4][200/928]\tlr: 5.000e-03, eta: 2:02:14, time: 1.187, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0553, loss_rpn_bbox: 0.0285, s0.loss_cls: 0.1439, s0.acc: 94.8589, s0.loss_bbox: 0.1676, s1.loss_cls: 0.0407, s1.acc: 98.6611, s1.loss_bbox: 0.0553, loss: 0.4912, grad_norm: 2.6448\r\n",
      "2025-03-18 10:12:08,887 - mmrotate - INFO - Epoch [4][300/928]\tlr: 5.000e-03, eta: 2:00:23, time: 1.193, data_time: 0.021, memory: 6882, loss_rpn_cls: 0.0508, loss_rpn_bbox: 0.0270, s0.loss_cls: 0.1394, s0.acc: 94.9419, s0.loss_bbox: 0.1629, s1.loss_cls: 0.0420, s1.acc: 98.5747, s1.loss_bbox: 0.0611, loss: 0.4832, grad_norm: 2.5157\r\n",
      "2025-03-18 10:14:08,362 - mmrotate - INFO - Epoch [4][400/928]\tlr: 5.000e-03, eta: 1:58:32, time: 1.195, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0422, loss_rpn_bbox: 0.0274, s0.loss_cls: 0.1289, s0.acc: 95.2690, s0.loss_bbox: 0.1687, s1.loss_cls: 0.0369, s1.acc: 98.7656, s1.loss_bbox: 0.0534, loss: 0.4575, grad_norm: 2.6336\r\n",
      "2025-03-18 10:16:07,978 - mmrotate - INFO - Epoch [4][500/928]\tlr: 5.000e-03, eta: 1:56:41, time: 1.196, data_time: 0.021, memory: 6882, loss_rpn_cls: 0.0484, loss_rpn_bbox: 0.0254, s0.loss_cls: 0.1320, s0.acc: 95.2397, s0.loss_bbox: 0.1394, s1.loss_cls: 0.0414, s1.acc: 98.6162, s1.loss_bbox: 0.0552, loss: 0.4418, grad_norm: 2.4308\r\n",
      "2025-03-18 10:18:07,227 - mmrotate - INFO - Epoch [4][600/928]\tlr: 5.000e-03, eta: 1:54:48, time: 1.192, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0424, loss_rpn_bbox: 0.0277, s0.loss_cls: 0.1296, s0.acc: 95.3228, s0.loss_bbox: 0.1677, s1.loss_cls: 0.0422, s1.acc: 98.5522, s1.loss_bbox: 0.0601, loss: 0.4698, grad_norm: 2.6512\r\n",
      "2025-03-18 10:20:06,889 - mmrotate - INFO - Epoch [4][700/928]\tlr: 5.000e-03, eta: 1:52:56, time: 1.197, data_time: 0.021, memory: 6882, loss_rpn_cls: 0.0378, loss_rpn_bbox: 0.0245, s0.loss_cls: 0.1214, s0.acc: 95.6323, s0.loss_bbox: 0.1517, s1.loss_cls: 0.0381, s1.acc: 98.6831, s1.loss_bbox: 0.0601, loss: 0.4336, grad_norm: 2.4312\r\n",
      "2025-03-18 10:22:05,888 - mmrotate - INFO - Epoch [4][800/928]\tlr: 5.000e-03, eta: 1:51:02, time: 1.190, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0445, loss_rpn_bbox: 0.0271, s0.loss_cls: 0.1179, s0.acc: 95.7002, s0.loss_bbox: 0.1466, s1.loss_cls: 0.0394, s1.acc: 98.6191, s1.loss_bbox: 0.0557, loss: 0.4312, grad_norm: 2.3917\r\n",
      "2025-03-18 10:24:04,447 - mmrotate - INFO - Epoch [4][900/928]\tlr: 5.000e-03, eta: 1:49:08, time: 1.186, data_time: 0.021, memory: 6882, loss_rpn_cls: 0.0344, loss_rpn_bbox: 0.0220, s0.loss_cls: 0.1215, s0.acc: 95.6274, s0.loss_bbox: 0.1313, s1.loss_cls: 0.0380, s1.acc: 98.6914, s1.loss_bbox: 0.0609, loss: 0.4080, grad_norm: 2.2813\r\n",
      "2025-03-18 10:24:37,597 - mmrotate - INFO - Saving checkpoint at 4 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 3.0 task/s, elapsed: 153s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 10:27:18,169 - mmrotate - INFO - \r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "| class | gts  | dets  | recall | ap    |\r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "| ship  | 2147 | 10709 | 0.479  | 0.350 |\r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "| mAP   |      |       |        | 0.350 |\r\n",
      "+-------+------+-------+--------+-------+\r\n",
      "2025-03-18 10:27:18,238 - mmrotate - INFO - Exp name: redet_re50_refpn_1x_sccos.py\r\n",
      "2025-03-18 10:27:18,238 - mmrotate - INFO - Epoch(val) [4][464]\tmAP: 0.3498\r\n",
      "2025-03-18 10:29:18,746 - mmrotate - INFO - Epoch [5][100/928]\tlr: 5.000e-03, eta: 1:45:56, time: 1.204, data_time: 0.044, memory: 6882, loss_rpn_cls: 0.0374, loss_rpn_bbox: 0.0275, s0.loss_cls: 0.1237, s0.acc: 95.4634, s0.loss_bbox: 0.1449, s1.loss_cls: 0.0412, s1.acc: 98.5176, s1.loss_bbox: 0.0621, loss: 0.4369, grad_norm: 2.4515\r\n",
      "2025-03-18 10:31:18,406 - mmrotate - INFO - Epoch [5][200/928]\tlr: 5.000e-03, eta: 1:44:04, time: 1.197, data_time: 0.021, memory: 6882, loss_rpn_cls: 0.0406, loss_rpn_bbox: 0.0239, s0.loss_cls: 0.1352, s0.acc: 95.0894, s0.loss_bbox: 0.1481, s1.loss_cls: 0.0442, s1.acc: 98.4561, s1.loss_bbox: 0.0702, loss: 0.4623, grad_norm: 2.4942\r\n",
      "2025-03-18 10:33:16,396 - mmrotate - INFO - Epoch [5][300/928]\tlr: 5.000e-03, eta: 1:42:10, time: 1.180, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0424, loss_rpn_bbox: 0.0257, s0.loss_cls: 0.1279, s0.acc: 95.2744, s0.loss_bbox: 0.1590, s1.loss_cls: 0.0447, s1.acc: 98.3784, s1.loss_bbox: 0.0709, loss: 0.4706, grad_norm: 2.5405\r\n",
      "2025-03-18 10:35:13,760 - mmrotate - INFO - Epoch [5][400/928]\tlr: 5.000e-03, eta: 1:40:15, time: 1.174, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0374, loss_rpn_bbox: 0.0240, s0.loss_cls: 0.1316, s0.acc: 95.1421, s0.loss_bbox: 0.1475, s1.loss_cls: 0.0480, s1.acc: 98.3135, s1.loss_bbox: 0.0707, loss: 0.4592, grad_norm: 2.5345\r\n",
      "2025-03-18 10:37:11,051 - mmrotate - INFO - Epoch [5][500/928]\tlr: 5.000e-03, eta: 1:38:20, time: 1.173, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0328, loss_rpn_bbox: 0.0234, s0.loss_cls: 0.1206, s0.acc: 95.5537, s0.loss_bbox: 0.1374, s1.loss_cls: 0.0457, s1.acc: 98.3525, s1.loss_bbox: 0.0727, loss: 0.4327, grad_norm: 2.3662\r\n",
      "2025-03-18 10:39:07,832 - mmrotate - INFO - Epoch [5][600/928]\tlr: 5.000e-03, eta: 1:36:24, time: 1.168, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0432, loss_rpn_bbox: 0.0270, s0.loss_cls: 0.1259, s0.acc: 95.2754, s0.loss_bbox: 0.1446, s1.loss_cls: 0.0500, s1.acc: 98.1836, s1.loss_bbox: 0.0793, loss: 0.4700, grad_norm: 2.5671\r\n",
      "2025-03-18 10:41:05,251 - mmrotate - INFO - Epoch [5][700/928]\tlr: 5.000e-03, eta: 1:34:28, time: 1.174, data_time: 0.019, memory: 6882, loss_rpn_cls: 0.0317, loss_rpn_bbox: 0.0228, s0.loss_cls: 0.1106, s0.acc: 95.8740, s0.loss_bbox: 0.1458, s1.loss_cls: 0.0464, s1.acc: 98.3481, s1.loss_bbox: 0.0725, loss: 0.4298, grad_norm: 2.4771\r\n",
      "2025-03-18 10:43:02,897 - mmrotate - INFO - Epoch [5][800/928]\tlr: 5.000e-03, eta: 1:32:33, time: 1.176, data_time: 0.021, memory: 6882, loss_rpn_cls: 0.0341, loss_rpn_bbox: 0.0207, s0.loss_cls: 0.1229, s0.acc: 95.4541, s0.loss_bbox: 0.1365, s1.loss_cls: 0.0477, s1.acc: 98.2598, s1.loss_bbox: 0.0780, loss: 0.4399, grad_norm: 2.3290\r\n",
      "2025-03-18 10:45:00,174 - mmrotate - INFO - Epoch [5][900/928]\tlr: 5.000e-03, eta: 1:30:38, time: 1.173, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0329, loss_rpn_bbox: 0.0212, s0.loss_cls: 0.1158, s0.acc: 95.7100, s0.loss_bbox: 0.1404, s1.loss_cls: 0.0438, s1.acc: 98.3809, s1.loss_bbox: 0.0761, loss: 0.4302, grad_norm: 2.6164\r\n",
      "2025-03-18 10:45:32,923 - mmrotate - INFO - Saving checkpoint at 5 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 3.1 task/s, elapsed: 149s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 10:48:10,945 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 5832 | 0.539  | 0.446 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.446 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 10:48:11,019 - mmrotate - INFO - Exp name: redet_re50_refpn_1x_sccos.py\r\n",
      "2025-03-18 10:48:11,020 - mmrotate - INFO - Epoch(val) [5][464]\tmAP: 0.4458\r\n",
      "2025-03-18 10:50:10,618 - mmrotate - INFO - Epoch [6][100/928]\tlr: 5.000e-03, eta: 1:27:40, time: 1.195, data_time: 0.044, memory: 6882, loss_rpn_cls: 0.0318, loss_rpn_bbox: 0.0251, s0.loss_cls: 0.1251, s0.acc: 95.3154, s0.loss_bbox: 0.1415, s1.loss_cls: 0.0506, s1.acc: 98.0913, s1.loss_bbox: 0.0866, loss: 0.4608, grad_norm: 2.4431\r\n",
      "2025-03-18 10:52:07,914 - mmrotate - INFO - Epoch [6][200/928]\tlr: 5.000e-03, eta: 1:25:45, time: 1.173, data_time: 0.019, memory: 6882, loss_rpn_cls: 0.0305, loss_rpn_bbox: 0.0217, s0.loss_cls: 0.1120, s0.acc: 95.8506, s0.loss_bbox: 0.1404, s1.loss_cls: 0.0445, s1.acc: 98.3579, s1.loss_bbox: 0.0747, loss: 0.4236, grad_norm: 2.4583\r\n",
      "2025-03-18 10:54:05,772 - mmrotate - INFO - Epoch [6][300/928]\tlr: 5.000e-03, eta: 1:23:51, time: 1.179, data_time: 0.021, memory: 6882, loss_rpn_cls: 0.0279, loss_rpn_bbox: 0.0203, s0.loss_cls: 0.1202, s0.acc: 95.4146, s0.loss_bbox: 0.1360, s1.loss_cls: 0.0470, s1.acc: 98.2686, s1.loss_bbox: 0.0840, loss: 0.4354, grad_norm: 2.3325\r\n",
      "2025-03-18 10:56:03,030 - mmrotate - INFO - Epoch [6][400/928]\tlr: 5.000e-03, eta: 1:21:56, time: 1.173, data_time: 0.021, memory: 6882, loss_rpn_cls: 0.0292, loss_rpn_bbox: 0.0168, s0.loss_cls: 0.1091, s0.acc: 95.9224, s0.loss_bbox: 0.1231, s1.loss_cls: 0.0514, s1.acc: 98.1353, s1.loss_bbox: 0.0861, loss: 0.4157, grad_norm: 2.3619\r\n",
      "2025-03-18 10:57:59,855 - mmrotate - INFO - Epoch [6][500/928]\tlr: 5.000e-03, eta: 1:20:01, time: 1.168, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0266, loss_rpn_bbox: 0.0199, s0.loss_cls: 0.1219, s0.acc: 95.3970, s0.loss_bbox: 0.1625, s1.loss_cls: 0.0522, s1.acc: 98.0737, s1.loss_bbox: 0.0893, loss: 0.4723, grad_norm: 2.4759\r\n",
      "2025-03-18 10:59:56,647 - mmrotate - INFO - Epoch [6][600/928]\tlr: 5.000e-03, eta: 1:18:06, time: 1.168, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0309, loss_rpn_bbox: 0.0214, s0.loss_cls: 0.1211, s0.acc: 95.4141, s0.loss_bbox: 0.1459, s1.loss_cls: 0.0526, s1.acc: 98.0845, s1.loss_bbox: 0.0908, loss: 0.4628, grad_norm: 2.5381\r\n",
      "2025-03-18 11:01:53,890 - mmrotate - INFO - Epoch [6][700/928]\tlr: 5.000e-03, eta: 1:16:11, time: 1.172, data_time: 0.021, memory: 6882, loss_rpn_cls: 0.0283, loss_rpn_bbox: 0.0224, s0.loss_cls: 0.1171, s0.acc: 95.5854, s0.loss_bbox: 0.1383, s1.loss_cls: 0.0523, s1.acc: 98.0508, s1.loss_bbox: 0.0884, loss: 0.4468, grad_norm: 2.4902\r\n",
      "2025-03-18 11:03:50,660 - mmrotate - INFO - Epoch [6][800/928]\tlr: 5.000e-03, eta: 1:14:15, time: 1.168, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0308, loss_rpn_bbox: 0.0239, s0.loss_cls: 0.1157, s0.acc: 95.6367, s0.loss_bbox: 0.1327, s1.loss_cls: 0.0508, s1.acc: 98.0967, s1.loss_bbox: 0.0878, loss: 0.4416, grad_norm: 2.3749\r\n",
      "2025-03-18 11:05:47,621 - mmrotate - INFO - Epoch [6][900/928]\tlr: 5.000e-03, eta: 1:12:20, time: 1.170, data_time: 0.022, memory: 6882, loss_rpn_cls: 0.0348, loss_rpn_bbox: 0.0230, s0.loss_cls: 0.1106, s0.acc: 95.7686, s0.loss_bbox: 0.1328, s1.loss_cls: 0.0563, s1.acc: 97.9321, s1.loss_bbox: 0.0973, loss: 0.4548, grad_norm: 2.3891\r\n",
      "2025-03-18 11:06:20,604 - mmrotate - INFO - Saving checkpoint at 6 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 3.1 task/s, elapsed: 151s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 11:08:59,204 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 4682 | 0.599  | 0.493 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.493 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 11:08:59,274 - mmrotate - INFO - Exp name: redet_re50_refpn_1x_sccos.py\r\n",
      "2025-03-18 11:08:59,274 - mmrotate - INFO - Epoch(val) [6][464]\tmAP: 0.4927\r\n",
      "2025-03-18 11:10:58,744 - mmrotate - INFO - Epoch [7][100/928]\tlr: 5.000e-03, eta: 1:09:33, time: 1.194, data_time: 0.044, memory: 6882, loss_rpn_cls: 0.0252, loss_rpn_bbox: 0.0208, s0.loss_cls: 0.1159, s0.acc: 95.4712, s0.loss_bbox: 0.1478, s1.loss_cls: 0.0530, s1.acc: 98.0229, s1.loss_bbox: 0.0983, loss: 0.4610, grad_norm: 2.5854\r\n",
      "2025-03-18 11:12:55,579 - mmrotate - INFO - Epoch [7][200/928]\tlr: 5.000e-03, eta: 1:07:38, time: 1.168, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0298, loss_rpn_bbox: 0.0197, s0.loss_cls: 0.1078, s0.acc: 95.9043, s0.loss_bbox: 0.1288, s1.loss_cls: 0.0491, s1.acc: 98.1255, s1.loss_bbox: 0.0886, loss: 0.4239, grad_norm: 2.4164\r\n",
      "2025-03-18 11:14:51,913 - mmrotate - INFO - Epoch [7][300/928]\tlr: 5.000e-03, eta: 1:05:43, time: 1.163, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0280, loss_rpn_bbox: 0.0213, s0.loss_cls: 0.1147, s0.acc: 95.7065, s0.loss_bbox: 0.1147, s1.loss_cls: 0.0557, s1.acc: 97.9331, s1.loss_bbox: 0.0984, loss: 0.4330, grad_norm: 2.3171\r\n",
      "2025-03-18 11:16:49,017 - mmrotate - INFO - Epoch [7][400/928]\tlr: 5.000e-03, eta: 1:03:48, time: 1.171, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0246, loss_rpn_bbox: 0.0212, s0.loss_cls: 0.1040, s0.acc: 96.0972, s0.loss_bbox: 0.1228, s1.loss_cls: 0.0516, s1.acc: 98.0664, s1.loss_bbox: 0.0928, loss: 0.4171, grad_norm: 2.3353\r\n",
      "2025-03-18 11:18:46,776 - mmrotate - INFO - Epoch [7][500/928]\tlr: 5.000e-03, eta: 1:01:54, time: 1.178, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0252, loss_rpn_bbox: 0.0197, s0.loss_cls: 0.1085, s0.acc: 95.8926, s0.loss_bbox: 0.1188, s1.loss_cls: 0.0545, s1.acc: 97.9360, s1.loss_bbox: 0.0970, loss: 0.4236, grad_norm: 2.2600\r\n",
      "2025-03-18 11:20:44,577 - mmrotate - INFO - Epoch [7][600/928]\tlr: 5.000e-03, eta: 0:59:59, time: 1.178, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0205, loss_rpn_bbox: 0.0171, s0.loss_cls: 0.1043, s0.acc: 95.9731, s0.loss_bbox: 0.1256, s1.loss_cls: 0.0502, s1.acc: 98.0776, s1.loss_bbox: 0.0985, loss: 0.4163, grad_norm: 2.3974\r\n",
      "2025-03-18 11:22:41,408 - mmrotate - INFO - Epoch [7][700/928]\tlr: 5.000e-03, eta: 0:58:04, time: 1.168, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0297, loss_rpn_bbox: 0.0189, s0.loss_cls: 0.0984, s0.acc: 96.3369, s0.loss_bbox: 0.1076, s1.loss_cls: 0.0522, s1.acc: 98.1050, s1.loss_bbox: 0.0925, loss: 0.3993, grad_norm: 2.2750\r\n",
      "2025-03-18 11:24:37,836 - mmrotate - INFO - Epoch [7][800/928]\tlr: 5.000e-03, eta: 0:56:09, time: 1.164, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0243, loss_rpn_bbox: 0.0212, s0.loss_cls: 0.1137, s0.acc: 95.6572, s0.loss_bbox: 0.1337, s1.loss_cls: 0.0573, s1.acc: 97.8540, s1.loss_bbox: 0.1036, loss: 0.4538, grad_norm: 2.5664\r\n",
      "2025-03-18 11:26:34,258 - mmrotate - INFO - Epoch [7][900/928]\tlr: 5.000e-03, eta: 0:54:13, time: 1.164, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0280, loss_rpn_bbox: 0.0229, s0.loss_cls: 0.1129, s0.acc: 95.6328, s0.loss_bbox: 0.1473, s1.loss_cls: 0.0577, s1.acc: 97.8130, s1.loss_bbox: 0.1059, loss: 0.4747, grad_norm: 2.6147\r\n",
      "2025-03-18 11:27:06,747 - mmrotate - INFO - Saving checkpoint at 7 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 3.1 task/s, elapsed: 152s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 11:29:46,538 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 5415 | 0.639  | 0.546 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.546 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 11:29:46,612 - mmrotate - INFO - Exp name: redet_re50_refpn_1x_sccos.py\r\n",
      "2025-03-18 11:29:46,612 - mmrotate - INFO - Epoch(val) [7][464]\tmAP: 0.5457\r\n",
      "2025-03-18 11:31:46,554 - mmrotate - INFO - Epoch [8][100/928]\tlr: 5.000e-03, eta: 0:51:34, time: 1.199, data_time: 0.043, memory: 6882, loss_rpn_cls: 0.0292, loss_rpn_bbox: 0.0214, s0.loss_cls: 0.1088, s0.acc: 95.8936, s0.loss_bbox: 0.1283, s1.loss_cls: 0.0560, s1.acc: 97.9087, s1.loss_bbox: 0.1025, loss: 0.4462, grad_norm: 2.4763\r\n",
      "2025-03-18 11:33:44,365 - mmrotate - INFO - Epoch [8][200/928]\tlr: 5.000e-03, eta: 0:49:39, time: 1.178, data_time: 0.021, memory: 6882, loss_rpn_cls: 0.0300, loss_rpn_bbox: 0.0232, s0.loss_cls: 0.1120, s0.acc: 95.7490, s0.loss_bbox: 0.1292, s1.loss_cls: 0.0594, s1.acc: 97.7095, s1.loss_bbox: 0.1092, loss: 0.4631, grad_norm: 2.3984\r\n",
      "2025-03-18 11:35:42,328 - mmrotate - INFO - Epoch [8][300/928]\tlr: 5.000e-03, eta: 0:47:45, time: 1.180, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0234, loss_rpn_bbox: 0.0196, s0.loss_cls: 0.1003, s0.acc: 96.1216, s0.loss_bbox: 0.1279, s1.loss_cls: 0.0519, s1.acc: 98.0580, s1.loss_bbox: 0.1003, loss: 0.4234, grad_norm: 2.4152\r\n",
      "2025-03-18 11:37:39,857 - mmrotate - INFO - Epoch [8][400/928]\tlr: 5.000e-03, eta: 0:45:50, time: 1.175, data_time: 0.020, memory: 6882, loss_rpn_cls: 0.0237, loss_rpn_bbox: 0.0193, s0.loss_cls: 0.1046, s0.acc: 95.9429, s0.loss_bbox: 0.1277, s1.loss_cls: 0.0550, s1.acc: 97.8755, s1.loss_bbox: 0.1014, loss: 0.4317, grad_norm: 2.4702\r\n",
      "2025-03-18 11:39:36,885 - mmrotate - INFO - Epoch [8][500/928]\tlr: 5.000e-03, eta: 0:43:56, time: 1.170, data_time: 0.021, memory: 6882, loss_rpn_cls: 0.0216, loss_rpn_bbox: 0.0178, s0.loss_cls: 0.1014, s0.acc: 96.1294, s0.loss_bbox: 0.1324, s1.loss_cls: 0.0544, s1.acc: 97.9199, s1.loss_bbox: 0.1004, loss: 0.4279, grad_norm: 2.3333\r\n",
      "2025-03-18 11:41:33,571 - mmrotate - INFO - Epoch [8][600/928]\tlr: 5.000e-03, eta: 0:42:01, time: 1.167, data_time: 0.019, memory: 6882, loss_rpn_cls: 0.0257, loss_rpn_bbox: 0.0180, s0.loss_cls: 0.1027, s0.acc: 96.0991, s0.loss_bbox: 0.1073, s1.loss_cls: 0.0569, s1.acc: 97.7856, s1.loss_bbox: 0.1015, loss: 0.4121, grad_norm: 2.2819\r\n",
      "2025-03-18 11:43:30,290 - mmrotate - INFO - Epoch [8][700/928]\tlr: 5.000e-03, eta: 0:40:05, time: 1.167, data_time: 0.020, memory: 6883, loss_rpn_cls: 0.0200, loss_rpn_bbox: 0.0185, s0.loss_cls: 0.0982, s0.acc: 96.2100, s0.loss_bbox: 0.1221, s1.loss_cls: 0.0545, s1.acc: 97.9201, s1.loss_bbox: 0.1099, loss: 0.4232, grad_norm: 2.3570\r\n",
      "2025-03-18 11:45:26,923 - mmrotate - INFO - Epoch [8][800/928]\tlr: 5.000e-03, eta: 0:38:10, time: 1.166, data_time: 0.020, memory: 6883, loss_rpn_cls: 0.0193, loss_rpn_bbox: 0.0161, s0.loss_cls: 0.0970, s0.acc: 96.3174, s0.loss_bbox: 0.1338, s1.loss_cls: 0.0534, s1.acc: 97.9609, s1.loss_bbox: 0.0981, loss: 0.4177, grad_norm: 2.4085\r\n",
      "2025-03-18 11:47:23,481 - mmrotate - INFO - Epoch [8][900/928]\tlr: 5.000e-03, eta: 0:36:15, time: 1.166, data_time: 0.020, memory: 6883, loss_rpn_cls: 0.0216, loss_rpn_bbox: 0.0170, s0.loss_cls: 0.1049, s0.acc: 95.9883, s0.loss_bbox: 0.1257, s1.loss_cls: 0.0591, s1.acc: 97.7939, s1.loss_bbox: 0.1083, loss: 0.4367, grad_norm: 2.4373\r\n",
      "2025-03-18 11:47:56,337 - mmrotate - INFO - Saving checkpoint at 8 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 3.1 task/s, elapsed: 150s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 11:50:34,990 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 4778 | 0.670  | 0.575 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.575 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 11:50:35,061 - mmrotate - INFO - Exp name: redet_re50_refpn_1x_sccos.py\r\n",
      "2025-03-18 11:50:35,061 - mmrotate - INFO - Epoch(val) [8][464]\tmAP: 0.5751\r\n",
      "2025-03-18 11:52:34,435 - mmrotate - INFO - Epoch [9][100/928]\tlr: 5.000e-04, eta: 0:33:41, time: 1.193, data_time: 0.044, memory: 6883, loss_rpn_cls: 0.0216, loss_rpn_bbox: 0.0160, s0.loss_cls: 0.0931, s0.acc: 96.4946, s0.loss_bbox: 0.1063, s1.loss_cls: 0.0507, s1.acc: 98.0522, s1.loss_bbox: 0.1010, loss: 0.3886, grad_norm: 2.0924\r\n",
      "2025-03-18 11:54:31,832 - mmrotate - INFO - Epoch [9][200/928]\tlr: 5.000e-04, eta: 0:31:46, time: 1.174, data_time: 0.020, memory: 6883, loss_rpn_cls: 0.0177, loss_rpn_bbox: 0.0164, s0.loss_cls: 0.0923, s0.acc: 96.4341, s0.loss_bbox: 0.1020, s1.loss_cls: 0.0528, s1.acc: 97.9512, s1.loss_bbox: 0.1081, loss: 0.3893, grad_norm: 2.1741\r\n",
      "2025-03-18 11:56:28,957 - mmrotate - INFO - Epoch [9][300/928]\tlr: 5.000e-04, eta: 0:29:51, time: 1.171, data_time: 0.020, memory: 6883, loss_rpn_cls: 0.0202, loss_rpn_bbox: 0.0154, s0.loss_cls: 0.0938, s0.acc: 96.4126, s0.loss_bbox: 0.1033, s1.loss_cls: 0.0546, s1.acc: 97.8960, s1.loss_bbox: 0.1102, loss: 0.3974, grad_norm: 2.0989\r\n",
      "2025-03-18 11:58:25,969 - mmrotate - INFO - Epoch [9][400/928]\tlr: 5.000e-04, eta: 0:27:57, time: 1.170, data_time: 0.020, memory: 6883, loss_rpn_cls: 0.0230, loss_rpn_bbox: 0.0166, s0.loss_cls: 0.1001, s0.acc: 96.1943, s0.loss_bbox: 0.1190, s1.loss_cls: 0.0574, s1.acc: 97.8105, s1.loss_bbox: 0.1126, loss: 0.4287, grad_norm: 2.2809\r\n",
      "2025-03-18 12:00:23,180 - mmrotate - INFO - Epoch [9][500/928]\tlr: 5.000e-04, eta: 0:26:02, time: 1.172, data_time: 0.020, memory: 6883, loss_rpn_cls: 0.0182, loss_rpn_bbox: 0.0138, s0.loss_cls: 0.0920, s0.acc: 96.4888, s0.loss_bbox: 0.0916, s1.loss_cls: 0.0543, s1.acc: 97.9179, s1.loss_bbox: 0.1100, loss: 0.3799, grad_norm: 2.0164\r\n",
      "2025-03-18 12:02:20,282 - mmrotate - INFO - Epoch [9][600/928]\tlr: 5.000e-04, eta: 0:24:07, time: 1.171, data_time: 0.021, memory: 6883, loss_rpn_cls: 0.0251, loss_rpn_bbox: 0.0157, s0.loss_cls: 0.0997, s0.acc: 96.2051, s0.loss_bbox: 0.1001, s1.loss_cls: 0.0581, s1.acc: 97.8271, s1.loss_bbox: 0.1085, loss: 0.4071, grad_norm: 2.1639\r\n",
      "2025-03-18 12:04:16,993 - mmrotate - INFO - Epoch [9][700/928]\tlr: 5.000e-04, eta: 0:22:12, time: 1.167, data_time: 0.021, memory: 6883, loss_rpn_cls: 0.0190, loss_rpn_bbox: 0.0138, s0.loss_cls: 0.0946, s0.acc: 96.3516, s0.loss_bbox: 0.0972, s1.loss_cls: 0.0563, s1.acc: 97.8174, s1.loss_bbox: 0.1153, loss: 0.3962, grad_norm: 2.1231\r\n",
      "2025-03-18 12:06:13,544 - mmrotate - INFO - Epoch [9][800/928]\tlr: 5.000e-04, eta: 0:20:17, time: 1.166, data_time: 0.020, memory: 6883, loss_rpn_cls: 0.0156, loss_rpn_bbox: 0.0120, s0.loss_cls: 0.0875, s0.acc: 96.6143, s0.loss_bbox: 0.0958, s1.loss_cls: 0.0513, s1.acc: 98.0154, s1.loss_bbox: 0.1018, loss: 0.3641, grad_norm: 2.1326\r\n",
      "2025-03-18 12:08:10,389 - mmrotate - INFO - Epoch [9][900/928]\tlr: 5.000e-04, eta: 0:18:22, time: 1.168, data_time: 0.020, memory: 6883, loss_rpn_cls: 0.0174, loss_rpn_bbox: 0.0141, s0.loss_cls: 0.0920, s0.acc: 96.4507, s0.loss_bbox: 0.1001, s1.loss_cls: 0.0540, s1.acc: 97.9324, s1.loss_bbox: 0.1086, loss: 0.3862, grad_norm: 2.1863\r\n",
      "2025-03-18 12:08:43,031 - mmrotate - INFO - Saving checkpoint at 9 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 3.1 task/s, elapsed: 150s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 12:11:21,713 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 5649 | 0.691  | 0.587 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.587 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 12:11:21,780 - mmrotate - INFO - Exp name: redet_re50_refpn_1x_sccos.py\r\n",
      "2025-03-18 12:11:21,780 - mmrotate - INFO - Epoch(val) [9][464]\tmAP: 0.5875\r\n",
      "2025-03-18 12:13:20,790 - mmrotate - INFO - Epoch [10][100/928]\tlr: 5.000e-04, eta: 0:15:51, time: 1.189, data_time: 0.044, memory: 6883, loss_rpn_cls: 0.0170, loss_rpn_bbox: 0.0129, s0.loss_cls: 0.0915, s0.acc: 96.5098, s0.loss_bbox: 0.0912, s1.loss_cls: 0.0524, s1.acc: 98.0081, s1.loss_bbox: 0.1066, loss: 0.3716, grad_norm: 2.1327\r\n",
      "2025-03-18 12:15:17,932 - mmrotate - INFO - Epoch [10][200/928]\tlr: 5.000e-04, eta: 0:13:56, time: 1.171, data_time: 0.020, memory: 6883, loss_rpn_cls: 0.0139, loss_rpn_bbox: 0.0139, s0.loss_cls: 0.0892, s0.acc: 96.5234, s0.loss_bbox: 0.0893, s1.loss_cls: 0.0536, s1.acc: 97.8530, s1.loss_bbox: 0.1087, loss: 0.3685, grad_norm: 2.0270\r\n",
      "2025-03-18 12:17:14,778 - mmrotate - INFO - Epoch [10][300/928]\tlr: 5.000e-04, eta: 0:12:02, time: 1.168, data_time: 0.021, memory: 6883, loss_rpn_cls: 0.0168, loss_rpn_bbox: 0.0151, s0.loss_cls: 0.0970, s0.acc: 96.2729, s0.loss_bbox: 0.1006, s1.loss_cls: 0.0587, s1.acc: 97.7059, s1.loss_bbox: 0.1221, loss: 0.4102, grad_norm: 2.1893\r\n",
      "2025-03-18 12:19:11,525 - mmrotate - INFO - Epoch [10][400/928]\tlr: 5.000e-04, eta: 0:10:07, time: 1.167, data_time: 0.020, memory: 6883, loss_rpn_cls: 0.0201, loss_rpn_bbox: 0.0135, s0.loss_cls: 0.0945, s0.acc: 96.3345, s0.loss_bbox: 0.0999, s1.loss_cls: 0.0583, s1.acc: 97.7983, s1.loss_bbox: 0.1117, loss: 0.3981, grad_norm: 2.3014\r\n",
      "2025-03-18 12:21:08,560 - mmrotate - INFO - Epoch [10][500/928]\tlr: 5.000e-04, eta: 0:08:12, time: 1.170, data_time: 0.021, memory: 6883, loss_rpn_cls: 0.0186, loss_rpn_bbox: 0.0144, s0.loss_cls: 0.0859, s0.acc: 96.7061, s0.loss_bbox: 0.0923, s1.loss_cls: 0.0509, s1.acc: 98.0619, s1.loss_bbox: 0.1049, loss: 0.3672, grad_norm: 2.1260\r\n",
      "2025-03-18 12:23:05,826 - mmrotate - INFO - Epoch [10][600/928]\tlr: 5.000e-04, eta: 0:06:17, time: 1.173, data_time: 0.020, memory: 6883, loss_rpn_cls: 0.0176, loss_rpn_bbox: 0.0153, s0.loss_cls: 0.0924, s0.acc: 96.3970, s0.loss_bbox: 0.0936, s1.loss_cls: 0.0547, s1.acc: 97.8227, s1.loss_bbox: 0.1161, loss: 0.3897, grad_norm: 2.0829\r\n",
      "2025-03-18 12:25:03,189 - mmrotate - INFO - Epoch [10][700/928]\tlr: 5.000e-04, eta: 0:04:22, time: 1.174, data_time: 0.020, memory: 6883, loss_rpn_cls: 0.0175, loss_rpn_bbox: 0.0131, s0.loss_cls: 0.0818, s0.acc: 96.8613, s0.loss_bbox: 0.0877, s1.loss_cls: 0.0499, s1.acc: 98.0740, s1.loss_bbox: 0.1064, loss: 0.3564, grad_norm: 2.0788\r\n",
      "2025-03-18 12:27:00,548 - mmrotate - INFO - Epoch [10][800/928]\tlr: 5.000e-04, eta: 0:02:27, time: 1.174, data_time: 0.019, memory: 6883, loss_rpn_cls: 0.0167, loss_rpn_bbox: 0.0152, s0.loss_cls: 0.0901, s0.acc: 96.4805, s0.loss_bbox: 0.0931, s1.loss_cls: 0.0549, s1.acc: 97.8617, s1.loss_bbox: 0.1123, loss: 0.3823, grad_norm: 2.2865\r\n",
      "2025-03-18 12:28:58,199 - mmrotate - INFO - Epoch [10][900/928]\tlr: 5.000e-04, eta: 0:00:32, time: 1.177, data_time: 0.021, memory: 6883, loss_rpn_cls: 0.0257, loss_rpn_bbox: 0.0149, s0.loss_cls: 0.1012, s0.acc: 96.1758, s0.loss_bbox: 0.1055, s1.loss_cls: 0.0620, s1.acc: 97.6679, s1.loss_bbox: 0.1207, loss: 0.4301, grad_norm: 2.3993\r\n",
      "2025-03-18 12:29:31,185 - mmrotate - INFO - Saving checkpoint at 10 epochs\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 3.1 task/s, elapsed: 150s, ETA:     0s/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "2025-03-18 12:32:09,844 - mmrotate - INFO - \r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 2147 | 6148 | 0.691  | 0.585 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.585 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "2025-03-18 12:32:09,917 - mmrotate - INFO - Exp name: redet_re50_refpn_1x_sccos.py\r\n",
      "2025-03-18 12:32:09,917 - mmrotate - INFO - Epoch(val) [10][464]\tmAP: 0.5853\r\n",
      "Training completed.\n"
     ]
    }
   ],
   "source": [
    "# Step 8: Train the Model\n",
    "%cd /kaggle/working/mmrotate\n",
    "!mkdir -p /kaggle/working/runs/redet_train\n",
    "!python tools/train.py \\\n",
    "    configs/redet/redet_re50_refpn_1x_sccos.py \\\n",
    "    --work-dir /kaggle/working/runs/redet_train \\\n",
    "    --gpus 1\n",
    "print(\"Training completed.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "694704f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-03-18T12:32:13.371756Z",
     "iopub.status.busy": "2025-03-18T12:32:13.371404Z",
     "iopub.status.idle": "2025-03-18T12:35:26.832521Z",
     "shell.execute_reply": "2025-03-18T12:35:26.831430Z"
    },
    "papermill": {
     "duration": 193.723463,
     "end_time": "2025-03-18T12:35:26.834359",
     "exception": false,
     "start_time": "2025-03-18T12:32:13.110896",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/working/mmrotate\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/e2cnn/nn/modules/r2_conv/basisexpansion_singleblock.py:80: UserWarning: indexing with dtype torch.uint8 is now deprecated, please use a dtype torch.bool instead. (Triggered internally at ../aten/src/ATen/native/IndexingUtils.h:27.)\r\n",
      "  full_mask[mask] = norms.to(torch.uint8)\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmdet/models/dense_heads/anchor_head.py:116: UserWarning: DeprecationWarning: `num_anchors` is deprecated, for consistency or also use `num_base_priors` instead\r\n",
      "  warnings.warn('DeprecationWarning: `num_anchors` is deprecated, '\r\n",
      "load checkpoint from local path: /kaggle/working/runs/redet_train/latest.pth\r\n",
      "The model and loaded state dict do not match exactly\r\n",
      "\r\n",
      "missing keys in source state_dict: backbone.conv1.filter, backbone.layer2.0.conv1.filter, backbone.layer2.0.conv2.filter, backbone.layer2.0.conv3.filter, backbone.layer2.0.downsample.0.filter, backbone.layer2.1.conv1.filter, backbone.layer2.1.conv2.filter, backbone.layer2.1.conv3.filter, backbone.layer2.2.conv1.filter, backbone.layer2.2.conv2.filter, backbone.layer2.2.conv3.filter, backbone.layer2.3.conv1.filter, backbone.layer2.3.conv2.filter, backbone.layer2.3.conv3.filter, backbone.layer3.0.conv1.filter, backbone.layer3.0.conv2.filter, backbone.layer3.0.conv3.filter, backbone.layer3.0.downsample.0.filter, backbone.layer3.1.conv1.filter, backbone.layer3.1.conv2.filter, backbone.layer3.1.conv3.filter, backbone.layer3.2.conv1.filter, backbone.layer3.2.conv2.filter, backbone.layer3.2.conv3.filter, backbone.layer3.3.conv1.filter, backbone.layer3.3.conv2.filter, backbone.layer3.3.conv3.filter, backbone.layer3.4.conv1.filter, backbone.layer3.4.conv2.filter, backbone.layer3.4.conv3.filter, backbone.layer3.5.conv1.filter, backbone.layer3.5.conv2.filter, backbone.layer3.5.conv3.filter, backbone.layer4.0.conv1.filter, backbone.layer4.0.conv2.filter, backbone.layer4.0.conv3.filter, backbone.layer4.0.downsample.0.filter, backbone.layer4.1.conv1.filter, backbone.layer4.1.conv2.filter, backbone.layer4.1.conv3.filter, backbone.layer4.2.conv1.filter, backbone.layer4.2.conv2.filter, backbone.layer4.2.conv3.filter, neck.lateral_convs.0.conv.expanded_bias, neck.lateral_convs.0.conv.filter, neck.lateral_convs.1.conv.expanded_bias, neck.lateral_convs.1.conv.filter, neck.lateral_convs.2.conv.expanded_bias, neck.lateral_convs.2.conv.filter, neck.lateral_convs.3.conv.expanded_bias, neck.lateral_convs.3.conv.filter, neck.fpn_convs.0.conv.expanded_bias, neck.fpn_convs.0.conv.filter, neck.fpn_convs.1.conv.expanded_bias, neck.fpn_convs.1.conv.filter, neck.fpn_convs.2.conv.expanded_bias, neck.fpn_convs.2.conv.filter, neck.fpn_convs.3.conv.expanded_bias, neck.fpn_convs.3.conv.filter\r\n",
      "\r\n",
      "[                                                  ] 0/464, elapsed: 0s, ETA:/usr/local/lib/python3.10/dist-packages/mmdet/models/dense_heads/anchor_head.py:123: UserWarning: DeprecationWarning: anchor_generator is deprecated, please use \"prior_generator\" instead\r\n",
      "  warnings.warn('DeprecationWarning: anchor_generator is deprecated, '\r\n",
      "[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] 464/464, 3.1 task/s, elapsed: 151s, ETA:     0s\r\n",
      "writing results to /kaggle/working/runs/redet_test_results.pkl\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/mmcv/__init__.py:20: UserWarning: On January 1, 2023, MMCV will release v2.0.0, in which it will remove components related to the training process and add a data transformation module. In addition, it will rename the package names mmcv to mmcv-lite and mmcv-full to mmcv. See https://github.com/open-mmlab/mmcv/blob/master/docs/en/compatibility.md for more details.\r\n",
      "  warnings.warn(\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "/usr/local/lib/python3.10/dist-packages/albumentations/__init__.py:24: UserWarning: A new version of Albumentations is available: 2.0.5 (you have 1.4.20). Upgrade using: pip install -U albumentations. To disable automatic update checks, set the environment variable NO_ALBUMENTATIONS_UPDATE to 1.\r\n",
      "  check_for_updates()\r\n",
      "\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| class | gts  | dets | recall | ap    |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| ship  | 1737 | 5941 | 0.803  | 0.714 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "| mAP   |      |      |        | 0.714 |\r\n",
      "+-------+------+------+--------+-------+\r\n",
      "{'mAP': 0.7137728333473206}\r\n",
      "Testing completed. Results saved to /kaggle/working/runs/redet_test_results.pkl\n"
     ]
    }
   ],
   "source": [
    "# Step 9: Test the Model\n",
    "%cd /kaggle/working/mmrotate\n",
    "!python tools/test.py \\\n",
    "    configs/redet/redet_re50_refpn_1x_sccos.py \\\n",
    "    /kaggle/working/runs/redet_train/latest.pth \\\n",
    "    --eval mAP \\\n",
    "    --out /kaggle/working/runs/redet_test_results.pkl\n",
    "print(\"Testing completed. Results saved to /kaggle/working/runs/redet_test_results.pkl\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e5f4d927",
   "metadata": {
    "papermill": {
     "duration": 0.277144,
     "end_time": "2025-03-18T12:35:27.393368",
     "exception": false,
     "start_time": "2025-03-18T12:35:27.116224",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 6771261,
     "sourceId": 10895847,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30919,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 13316.202598,
   "end_time": "2025-03-18T12:35:28.502873",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-03-18T08:53:32.300275",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
